diff --git a/esm/vs/base/browser/ui/actionbar/actionViewItems.js b/esm/vs/base/browser/ui/actionbar/actionViewItems.js
index 4df6d28300c1c815de6e2ff718f41aaaeebdf025..68314edfae1a8ba65733b45cda57e08e6577f4fa 100644
--- a/esm/vs/base/browser/ui/actionbar/actionViewItems.js
+++ b/esm/vs/base/browser/ui/actionbar/actionViewItems.js
@@ -273,7 +273,7 @@ export class ActionViewItem extends BaseActionViewItem {
         else if (!this.options.label && this.action.label && this.options.icon) {
             title = this.action.label;
             if (this.options.keybinding) {
-                title = nls.localize({ key: 'titleLabel', comment: ['action title', 'action keybinding'] }, "{0} ({1})", title, this.options.keybinding);
+                title = nls.localize('vs/base/browser/ui/actionbar/actionViewItems', { key: 'titleLabel', comment: ['action title', 'action keybinding'] }, "{0} ({1})", title, this.options.keybinding);
             }
         }
         return title ?? undefined;
diff --git a/esm/vs/base/browser/ui/findinput/findInput.js b/esm/vs/base/browser/ui/findinput/findInput.js
index 0eaa81ae114b8fe95f3aa2c8caa972026af7f35a..4d8464ed2222360841fa4a86caef97a8c6c30fa0 100644
--- a/esm/vs/base/browser/ui/findinput/findInput.js
+++ b/esm/vs/base/browser/ui/findinput/findInput.js
@@ -11,7 +11,7 @@ import './findInput.css';
 import * as nls from '../../../../nls.js';
 import { DisposableStore, MutableDisposable } from '../../../common/lifecycle.js';
 import { createInstantHoverDelegate } from '../hover/hoverDelegateFactory.js';
-const NLS_DEFAULT_LABEL = nls.localize('defaultLabel', "input");
+const NLS_DEFAULT_LABEL = nls.localize('vs/base/browser/ui/findinput/findInput', 'defaultLabel', "input");
 export class FindInput extends Widget {
     constructor(parent, contextViewProvider, options) {
         super();
diff --git a/esm/vs/base/browser/ui/findinput/findInputToggles.js b/esm/vs/base/browser/ui/findinput/findInputToggles.js
index 7ac45cb7b9e814308bce620f75c84104f642a316..1e54f5bc7a72a25c86f3e0a47dea68c209da2c8e 100644
--- a/esm/vs/base/browser/ui/findinput/findInputToggles.js
+++ b/esm/vs/base/browser/ui/findinput/findInputToggles.js
@@ -6,9 +6,9 @@ import { getDefaultHoverDelegate } from '../hover/hoverDelegateFactory.js';
 import { Toggle } from '../toggle/toggle.js';
 import { Codicon } from '../../../common/codicons.js';
 import * as nls from '../../../../nls.js';
-const NLS_CASE_SENSITIVE_TOGGLE_LABEL = nls.localize('caseDescription', "Match Case");
-const NLS_WHOLE_WORD_TOGGLE_LABEL = nls.localize('wordsDescription', "Match Whole Word");
-const NLS_REGEX_TOGGLE_LABEL = nls.localize('regexDescription', "Use Regular Expression");
+const NLS_CASE_SENSITIVE_TOGGLE_LABEL = nls.localize('vs/base/browser/ui/findinput/findInputToggles', 'caseDescription', "Match Case");
+const NLS_WHOLE_WORD_TOGGLE_LABEL = nls.localize('vs/base/browser/ui/findinput/findInputToggles', 'wordsDescription', "Match Whole Word");
+const NLS_REGEX_TOGGLE_LABEL = nls.localize('vs/base/browser/ui/findinput/findInputToggles', 'regexDescription', "Use Regular Expression");
 export class CaseSensitiveToggle extends Toggle {
     constructor(opts) {
         super({
diff --git a/esm/vs/base/browser/ui/findinput/replaceInput.js b/esm/vs/base/browser/ui/findinput/replaceInput.js
index 0953fbd88e3a7eb8c0d7591f7ff72ce5e8f334b7..f7358a2839653221736324e783dc3aa161792af2 100644
--- a/esm/vs/base/browser/ui/findinput/replaceInput.js
+++ b/esm/vs/base/browser/ui/findinput/replaceInput.js
@@ -11,8 +11,8 @@ import { Emitter } from '../../../common/event.js';
 import './findInput.css';
 import * as nls from '../../../../nls.js';
 import { getDefaultHoverDelegate } from '../hover/hoverDelegateFactory.js';
-const NLS_DEFAULT_LABEL = nls.localize('defaultLabel', "input");
-const NLS_PRESERVE_CASE_LABEL = nls.localize('label.preserveCaseToggle', "Preserve Case");
+const NLS_DEFAULT_LABEL = nls.localize('vs/base/browser/ui/findinput/replaceInput', 'defaultLabel', "input");
+const NLS_PRESERVE_CASE_LABEL = nls.localize('vs/base/browser/ui/findinput/replaceInput', 'label.preserveCaseToggle', "Preserve Case");
 class PreserveCaseToggle extends Toggle {
     constructor(opts) {
         super({
diff --git a/esm/vs/base/browser/ui/hover/hoverWidget.js b/esm/vs/base/browser/ui/hover/hoverWidget.js
index 35e7230b0d4c3b8dc24dbac8bf5ec9836a180b19..b33118f974f0f472c7b213f1fcbd8ce32770c1ce 100644
--- a/esm/vs/base/browser/ui/hover/hoverWidget.js
+++ b/esm/vs/base/browser/ui/hover/hoverWidget.js
@@ -60,7 +60,7 @@ export class HoverAction extends Disposable {
     }
 }
 export function getHoverAccessibleViewHint(shouldHaveHint, keybinding) {
-    return shouldHaveHint && keybinding ? localize('acessibleViewHint', "Inspect this in the accessible view with {0}.", keybinding) : shouldHaveHint ? localize('acessibleViewHintNoKbOpen', "Inspect this in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding.") : '';
+    return shouldHaveHint && keybinding ? localize('vs/base/browser/ui/hover/hoverWidget', 'acessibleViewHint', "Inspect this in the accessible view with {0}.", keybinding) : shouldHaveHint ? localize('vs/base/browser/ui/hover/hoverWidget', 'acessibleViewHintNoKbOpen', "Inspect this in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding.") : '';
 }
 export class ClickAction extends Disposable {
     constructor(container, run) {
diff --git a/esm/vs/base/browser/ui/inputbox/inputBox.js b/esm/vs/base/browser/ui/inputbox/inputBox.js
index 55a96a20f17cfef548409fa616a301709055304b..9f36556460c8a47386ea398f62bbf4f10ee568ca 100644
--- a/esm/vs/base/browser/ui/inputbox/inputBox.js
+++ b/esm/vs/base/browser/ui/inputbox/inputBox.js
@@ -297,13 +297,13 @@ export class InputBox extends Widget {
         // ARIA Support
         let alertText;
         if (this.message.type === 3 /* MessageType.ERROR */) {
-            alertText = nls.localize('alertErrorMessage', "Error: {0}", this.message.content);
+            alertText = nls.localize('vs/base/browser/ui/inputbox/inputBox', 'alertErrorMessage', "Error: {0}", this.message.content);
         }
         else if (this.message.type === 2 /* MessageType.WARNING */) {
-            alertText = nls.localize('alertWarningMessage', "Warning: {0}", this.message.content);
+            alertText = nls.localize('vs/base/browser/ui/inputbox/inputBox', 'alertWarningMessage', "Warning: {0}", this.message.content);
         }
         else {
-            alertText = nls.localize('alertInfoMessage', "Info: {0}", this.message.content);
+            alertText = nls.localize('vs/base/browser/ui/inputbox/inputBox', 'alertInfoMessage', "Info: {0}", this.message.content);
         }
         aria.alert(alertText);
         this.state = 'open';
@@ -387,11 +387,11 @@ export class InputBox extends Widget {
 }
 export class HistoryInputBox extends InputBox {
     constructor(container, contextViewProvider, options) {
-        const NLS_PLACEHOLDER_HISTORY_HINT_SUFFIX_NO_PARENS = nls.localize({
+        const NLS_PLACEHOLDER_HISTORY_HINT_SUFFIX_NO_PARENS = nls.localize('vs/base/browser/ui/inputbox/inputBox', {
             key: 'history.inputbox.hint.suffix.noparens',
             comment: ['Text is the suffix of an input field placeholder coming after the action the input field performs, this will be used when the input field ends in a closing parenthesis ")", for example "Filter (e.g. text, !exclude)". The character inserted into the final string is \u21C5 to represent the up and down arrow keys.']
         }, ' or {0} for history', `\u21C5`);
-        const NLS_PLACEHOLDER_HISTORY_HINT_SUFFIX_IN_PARENS = nls.localize({
+        const NLS_PLACEHOLDER_HISTORY_HINT_SUFFIX_IN_PARENS = nls.localize('vs/base/browser/ui/inputbox/inputBox', {
             key: 'history.inputbox.hint.suffix.inparens',
             comment: ['Text is the suffix of an input field placeholder coming after the action the input field performs, this will be used when the input field does NOT end in a closing parenthesis (eg. "Find"). The character inserted into the final string is \u21C5 to represent the up and down arrow keys.']
         }, ' ({0} for history)', `\u21C5`);
@@ -473,7 +473,7 @@ export class HistoryInputBox extends InputBox {
             next = next === this.value ? this.getNextValue() : next;
         }
         this.value = next ?? '';
-        aria.status(this.value ? this.value : nls.localize('clearedInput', "Cleared Input"));
+        aria.status(this.value ? this.value : nls.localize('vs/base/browser/ui/inputbox/inputBox', 'clearedInput', "Cleared Input"));
     }
     showPreviousValue() {
         if (!this.history.has(this.value)) {
diff --git a/esm/vs/base/browser/ui/keybindingLabel/keybindingLabel.js b/esm/vs/base/browser/ui/keybindingLabel/keybindingLabel.js
index 0fd91447aaa1cb6117788cb74e0cc6f63c6306ed..34f88ab52f4b23844745a114474800d0e8b72449 100644
--- a/esm/vs/base/browser/ui/keybindingLabel/keybindingLabel.js
+++ b/esm/vs/base/browser/ui/keybindingLabel/keybindingLabel.js
@@ -94,7 +94,7 @@ export class KeybindingLabel extends Disposable {
         }
     }
     renderUnbound(parent) {
-        dom.append(parent, this.createKeyElement(localize('unbound', "Unbound")));
+        dom.append(parent, this.createKeyElement(localize('vs/base/browser/ui/keybindingLabel/keybindingLabel', 'unbound', "Unbound")));
     }
     createKeyElement(label, extraClass = '') {
         const keyElement = $('span.monaco-keybinding-key' + extraClass, undefined, label);
diff --git a/esm/vs/base/browser/ui/selectBox/selectBoxCustom.js b/esm/vs/base/browser/ui/selectBox/selectBoxCustom.js
index de9c51a722be663f688b409c9dd59f77d99064e2..e072ec2731e77b0d98501ae51d7ab2ca4d8f3d4c 100644
--- a/esm/vs/base/browser/ui/selectBox/selectBoxCustom.js
+++ b/esm/vs/base/browser/ui/selectBox/selectBoxCustom.js
@@ -570,7 +570,7 @@ export class SelectBoxList extends Disposable {
                     }
                     return label;
                 },
-                getWidgetAriaLabel: () => localize({ key: 'selectBox', comment: ['Behave like native select dropdown element.'] }, "Select Box"),
+                getWidgetAriaLabel: () => localize('vs/base/browser/ui/selectBox/selectBoxCustom', { key: 'selectBox', comment: ['Behave like native select dropdown element.'] }, "Select Box"),
                 getRole: () => isMacintosh ? '' : 'option',
                 getWidgetRole: () => 'listbox'
             }
diff --git a/esm/vs/base/browser/ui/toolbar/toolbar.js b/esm/vs/base/browser/ui/toolbar/toolbar.js
index 0bdfae1f72a07045bd94e0ecd9310c1f11f4cb2e..34391326916fac5559b56a860f1adcfc39dbc182 100644
--- a/esm/vs/base/browser/ui/toolbar/toolbar.js
+++ b/esm/vs/base/browser/ui/toolbar/toolbar.js
@@ -122,7 +122,7 @@ export class ToolBar extends Disposable {
 export class ToggleMenuAction extends Action {
     static { this.ID = 'toolbar.toggle.more'; }
     constructor(toggleDropdownMenu, title) {
-        title = title || nls.localize('moreActions', "More Actions...");
+        title = title || nls.localize('vs/base/browser/ui/toolbar/toolbar', 'moreActions', "More Actions...");
         super(ToggleMenuAction.ID, title, undefined, true);
         this._menuActions = [];
         this.toggleDropdownMenu = toggleDropdownMenu;
diff --git a/esm/vs/base/browser/ui/tree/abstractTree.js b/esm/vs/base/browser/ui/tree/abstractTree.js
index e0ce7c28e1dcec30f03cd623b19bfe38d161205e..f50c0ff0d57c99d472c772662c3f94c9de47ade7 100644
--- a/esm/vs/base/browser/ui/tree/abstractTree.js
+++ b/esm/vs/base/browser/ui/tree/abstractTree.js
@@ -486,7 +486,7 @@ export class ModeToggle extends Toggle {
     constructor(opts) {
         super({
             icon: Codicon.listFilter,
-            title: localize('filter', "Filter"),
+            title: localize('vs/base/browser/ui/tree/abstractTree', 'filter', "Filter"),
             isChecked: opts.isChecked ?? false,
             hoverDelegate: opts.hoverDelegate ?? getDefaultHoverDelegate('element'),
             inputActiveOptionBorder: opts.inputActiveOptionBorder,
@@ -499,7 +499,7 @@ export class FuzzyToggle extends Toggle {
     constructor(opts) {
         super({
             icon: Codicon.searchFuzzy,
-            title: localize('fuzzySearch', "Fuzzy Match"),
+            title: localize('vs/base/browser/ui/tree/abstractTree', 'fuzzySearch', "Fuzzy Match"),
             isChecked: opts.isChecked ?? false,
             hoverDelegate: opts.hoverDelegate ?? getDefaultHoverDelegate('element'),
             inputActiveOptionBorder: opts.inputActiveOptionBorder,
@@ -529,7 +529,7 @@ export var TreeFindMatchType;
 class FindWidget extends Disposable {
     set mode(mode) {
         this.modeToggle.checked = mode === TreeFindMode.Filter;
-        this.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('type to filter', "Type to filter") : localize('type to search', "Type to search"));
+        this.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('vs/base/browser/ui/tree/abstractTree', 'type to filter', "Type to filter") : localize('vs/base/browser/ui/tree/abstractTree', 'type to search', "Type to search"));
     }
     set matchType(matchType) {
         this.matchTypeToggle.checked = matchType === TreeFindMatchType.Fuzzy;
@@ -561,7 +561,7 @@ class FindWidget extends Disposable {
         this.onDidChangeMode = Event.map(this.modeToggle.onChange, () => this.modeToggle.checked ? TreeFindMode.Filter : TreeFindMode.Highlight, this._store);
         this.onDidChangeMatchType = Event.map(this.matchTypeToggle.onChange, () => this.matchTypeToggle.checked ? TreeFindMatchType.Fuzzy : TreeFindMatchType.Contiguous, this._store);
         this.findInput = this._register(new FindInput(this.elements.findInput, contextViewProvider, {
-            label: localize('type to search', "Type to search"),
+            label: localize('vs/base/browser/ui/tree/abstractTree', 'type to search', "Type to search"),
             additionalToggles: [this.modeToggle, this.matchTypeToggle],
             showCommonFindToggles: false,
             inputBoxStyles: styles.inputBoxStyles,
@@ -604,7 +604,7 @@ class FindWidget extends Disposable {
                 return;
             }
         }));
-        const closeAction = this._register(new Action('close', localize('close', "Close"), 'codicon codicon-close', true, () => this.dispose()));
+        const closeAction = this._register(new Action('close', localize('vs/base/browser/ui/tree/abstractTree', 'close', "Close"), 'codicon codicon-close', true, () => this.dispose()));
         this.actionbar.push(closeAction, { icon: true, label: false });
         const onGrabMouseDown = this._register(new DomEmitter(this.elements.grab, 'mousedown'));
         this._register(onGrabMouseDown.event(e => {
@@ -759,9 +759,9 @@ class FindController {
     render() {
         const noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;
         if (this.pattern && noMatches) {
-            alert(localize('replFindNoResults', "No results"));
+            alert(localize('vs/base/browser/ui/tree/abstractTree', 'replFindNoResults', "No results"));
             if (this.tree.options.showNotFoundMessage ?? true) {
-                this.widget?.showMessage({ type: 2 /* MessageType.WARNING */, content: localize('not found', "No elements found.") });
+                this.widget?.showMessage({ type: 2 /* MessageType.WARNING */, content: localize('vs/base/browser/ui/tree/abstractTree', 'not found', "No elements found.") });
             }
             else {
                 this.widget?.showMessage({ type: 2 /* MessageType.WARNING */ });
@@ -770,7 +770,7 @@ class FindController {
         else {
             this.widget?.clearMessage();
             if (this.pattern) {
-                alert(localize('replFindResults', "{0} results", this.filter.matchCount));
+                alert(localize('vs/base/browser/ui/tree/abstractTree', 'replFindResults', "{0} results", this.filter.matchCount));
             }
         }
     }
diff --git a/esm/vs/base/common/actions.js b/esm/vs/base/common/actions.js
index 3cf979a90bafb8aa5b1e09990d903b53a4584031..7daaab33c25c9b747cf1affeb4fe2a33781edba9 100644
--- a/esm/vs/base/common/actions.js
+++ b/esm/vs/base/common/actions.js
@@ -158,7 +158,7 @@ export class SubmenuAction {
 export class EmptySubmenuAction extends Action {
     static { this.ID = 'vs.actions.empty'; }
     constructor() {
-        super(EmptySubmenuAction.ID, nls.localize('submenu.empty', '(empty)'), undefined, false);
+        super(EmptySubmenuAction.ID, nls.localize('vs/base/common/actions', 'submenu.empty', '(empty)'), undefined, false);
     }
 }
 export function toAction(props) {
diff --git a/esm/vs/base/common/errorMessage.js b/esm/vs/base/common/errorMessage.js
index 4cb4e1442d8b5433ed72833a78f9c7403482449c..dac38d5f38ba96afb25dff1c11a08ca490ed39d8 100644
--- a/esm/vs/base/common/errorMessage.js
+++ b/esm/vs/base/common/errorMessage.js
@@ -7,7 +7,7 @@ import * as types from './types.js';
 import * as nls from '../../nls.js';
 function exceptionToErrorMessage(exception, verbose) {
     if (verbose && (exception.stack || exception.stacktrace)) {
-        return nls.localize('stackTrace.format', "{0}: {1}", detectSystemErrorMessage(exception), stackToString(exception.stack) || stackToString(exception.stacktrace));
+        return nls.localize('vs/base/common/errorMessage', 'stackTrace.format', "{0}: {1}", detectSystemErrorMessage(exception), stackToString(exception.stack) || stackToString(exception.stacktrace));
     }
     return detectSystemErrorMessage(exception);
 }
@@ -24,9 +24,9 @@ function detectSystemErrorMessage(exception) {
     }
     // See https://nodejs.org/api/errors.html#errors_class_system_error
     if (typeof exception.code === 'string' && typeof exception.errno === 'number' && typeof exception.syscall === 'string') {
-        return nls.localize('nodeExceptionMessage', "A system error occurred ({0})", exception.message);
+        return nls.localize('vs/base/common/errorMessage', 'nodeExceptionMessage', "A system error occurred ({0})", exception.message);
     }
-    return exception.message || nls.localize('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
+    return exception.message || nls.localize('vs/base/common/errorMessage', 'error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
 }
 /**
  * Tries to generate a human readable error message out of the error. If the verbose parameter
@@ -36,13 +36,13 @@ function detectSystemErrorMessage(exception) {
  */
 export function toErrorMessage(error = null, verbose = false) {
     if (!error) {
-        return nls.localize('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
+        return nls.localize('vs/base/common/errorMessage', 'error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
     }
     if (Array.isArray(error)) {
         const errors = arrays.coalesce(error);
         const msg = toErrorMessage(errors[0], verbose);
         if (errors.length > 1) {
-            return nls.localize('error.moreErrors', "{0} ({1} errors in total)", msg, errors.length);
+            return nls.localize('vs/base/common/errorMessage', 'error.moreErrors', "{0} ({1} errors in total)", msg, errors.length);
         }
         return msg;
     }
@@ -64,5 +64,5 @@ export function toErrorMessage(error = null, verbose = false) {
     if (error.message) {
         return error.message;
     }
-    return nls.localize('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
+    return nls.localize('vs/base/common/errorMessage', 'error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
 }
diff --git a/esm/vs/base/common/keybindingLabels.js b/esm/vs/base/common/keybindingLabels.js
index a883a04e930ad9505705c3da963c1f0edb9924b6..03cce3de730d273f2bfc4f11ab51d0011194a014 100644
--- a/esm/vs/base/common/keybindingLabels.js
+++ b/esm/vs/base/common/keybindingLabels.js
@@ -37,38 +37,38 @@ export const UILabelProvider = new ModifierLabelProvider({
     metaKey: '⌘',
     separator: '',
 }, {
-    ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, "Ctrl"),
-    shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, "Shift"),
-    altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, "Alt"),
-    metaKey: nls.localize({ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, "Windows"),
+    ctrlKey: nls.localize('vs/base/common/keybindingLabels', { key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, "Ctrl"),
+    shiftKey: nls.localize('vs/base/common/keybindingLabels', { key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, "Shift"),
+    altKey: nls.localize('vs/base/common/keybindingLabels', { key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, "Alt"),
+    metaKey: nls.localize('vs/base/common/keybindingLabels', { key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, "Windows"),
     separator: '+',
 }, {
-    ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, "Ctrl"),
-    shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, "Shift"),
-    altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, "Alt"),
-    metaKey: nls.localize({ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, "Super"),
+    ctrlKey: nls.localize('vs/base/common/keybindingLabels', { key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, "Ctrl"),
+    shiftKey: nls.localize('vs/base/common/keybindingLabels', { key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, "Shift"),
+    altKey: nls.localize('vs/base/common/keybindingLabels', { key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, "Alt"),
+    metaKey: nls.localize('vs/base/common/keybindingLabels', { key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, "Super"),
     separator: '+',
 });
 /**
  * A label provider that prints modifiers in a suitable format for ARIA.
  */
 export const AriaLabelProvider = new ModifierLabelProvider({
-    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"),
-    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"),
-    altKey: nls.localize({ key: 'optKey.long', comment: ['This is the long form for the Alt/Option key on the keyboard'] }, "Option"),
-    metaKey: nls.localize({ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, "Command"),
+    ctrlKey: nls.localize('vs/base/common/keybindingLabels', { key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"),
+    shiftKey: nls.localize('vs/base/common/keybindingLabels', { key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"),
+    altKey: nls.localize('vs/base/common/keybindingLabels', { key: 'optKey.long', comment: ['This is the long form for the Alt/Option key on the keyboard'] }, "Option"),
+    metaKey: nls.localize('vs/base/common/keybindingLabels', { key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, "Command"),
     separator: '+',
 }, {
-    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"),
-    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"),
-    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, "Alt"),
-    metaKey: nls.localize({ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, "Windows"),
+    ctrlKey: nls.localize('vs/base/common/keybindingLabels', { key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"),
+    shiftKey: nls.localize('vs/base/common/keybindingLabels', { key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"),
+    altKey: nls.localize('vs/base/common/keybindingLabels', { key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, "Alt"),
+    metaKey: nls.localize('vs/base/common/keybindingLabels', { key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, "Windows"),
     separator: '+',
 }, {
-    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"),
-    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"),
-    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, "Alt"),
-    metaKey: nls.localize({ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, "Super"),
+    ctrlKey: nls.localize('vs/base/common/keybindingLabels', { key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"),
+    shiftKey: nls.localize('vs/base/common/keybindingLabels', { key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"),
+    altKey: nls.localize('vs/base/common/keybindingLabels', { key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, "Alt"),
+    metaKey: nls.localize('vs/base/common/keybindingLabels', { key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, "Super"),
     separator: '+',
 });
 /**
diff --git a/esm/vs/editor/browser/controller/textAreaHandler.js b/esm/vs/editor/browser/controller/textAreaHandler.js
index c7c47e1af8c1e8fd008a6e6c1023166d3c3d8e7f..c5832ed602d37efb224a6a8a5b8958dd10f58c08 100644
--- a/esm/vs/editor/browser/controller/textAreaHandler.js
+++ b/esm/vs/editor/browser/controller/textAreaHandler.js
@@ -129,7 +129,7 @@ let TextAreaHandler = class TextAreaHandler extends ViewPart {
         this.textArea.setAttribute('aria-required', options.get(5 /* EditorOption.ariaRequired */) ? 'true' : 'false');
         this.textArea.setAttribute('tabindex', String(options.get(125 /* EditorOption.tabIndex */)));
         this.textArea.setAttribute('role', 'textbox');
-        this.textArea.setAttribute('aria-roledescription', nls.localize('editor', "editor"));
+        this.textArea.setAttribute('aria-roledescription', nls.localize('vs/editor/browser/controller/textAreaHandler', 'editor', "editor"));
         this.textArea.setAttribute('aria-multiline', 'true');
         this.textArea.setAttribute('aria-autocomplete', options.get(92 /* EditorOption.readOnly */) ? 'none' : 'both');
         this._ensureReadOnlyAttribute();
@@ -441,15 +441,15 @@ let TextAreaHandler = class TextAreaHandler extends ViewPart {
             const toggleKeybindingLabel = this._keybindingService.lookupKeybinding('editor.action.toggleScreenReaderAccessibilityMode')?.getAriaLabel();
             const runCommandKeybindingLabel = this._keybindingService.lookupKeybinding('workbench.action.showCommands')?.getAriaLabel();
             const keybindingEditorKeybindingLabel = this._keybindingService.lookupKeybinding('workbench.action.openGlobalKeybindings')?.getAriaLabel();
-            const editorNotAccessibleMessage = nls.localize('accessibilityModeOff', "The editor is not accessible at this time.");
+            const editorNotAccessibleMessage = nls.localize('vs/editor/browser/controller/textAreaHandler', 'accessibilityModeOff', "The editor is not accessible at this time.");
             if (toggleKeybindingLabel) {
-                return nls.localize('accessibilityOffAriaLabel', "{0} To enable screen reader optimized mode, use {1}", editorNotAccessibleMessage, toggleKeybindingLabel);
+                return nls.localize('vs/editor/browser/controller/textAreaHandler', 'accessibilityOffAriaLabel', "{0} To enable screen reader optimized mode, use {1}", editorNotAccessibleMessage, toggleKeybindingLabel);
             }
             else if (runCommandKeybindingLabel) {
-                return nls.localize('accessibilityOffAriaLabelNoKb', "{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.", editorNotAccessibleMessage, runCommandKeybindingLabel);
+                return nls.localize('vs/editor/browser/controller/textAreaHandler', 'accessibilityOffAriaLabelNoKb', "{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.", editorNotAccessibleMessage, runCommandKeybindingLabel);
             }
             else if (keybindingEditorKeybindingLabel) {
-                return nls.localize('accessibilityOffAriaLabelNoKbs', "{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it.", editorNotAccessibleMessage, keybindingEditorKeybindingLabel);
+                return nls.localize('vs/editor/browser/controller/textAreaHandler', 'accessibilityOffAriaLabelNoKbs', "{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it.", editorNotAccessibleMessage, keybindingEditorKeybindingLabel);
             }
             else {
                 // SOS
diff --git a/esm/vs/editor/browser/coreCommands.js b/esm/vs/editor/browser/coreCommands.js
index 569223e08d394130aee7edaa86d637dadfe81eb4..d0a1b90553994cb49df79adbaf2ce1341dbdc026 100644
--- a/esm/vs/editor/browser/coreCommands.js
+++ b/esm/vs/editor/browser/coreCommands.js
@@ -858,7 +858,7 @@ export var CoreNavigationCommands;
                         type: 'object',
                         properties: {
                             'sticky': {
-                                description: nls.localize('stickydesc', "Stick to the end even when going to longer lines"),
+                                description: nls.localize('vs/editor/browser/coreCommands', 'stickydesc', "Stick to the end even when going to longer lines"),
                                 type: 'boolean',
                                 default: false
                             }
@@ -886,7 +886,7 @@ export var CoreNavigationCommands;
                         type: 'object',
                         properties: {
                             'sticky': {
-                                description: nls.localize('stickydesc', "Stick to the end even when going to longer lines"),
+                                description: nls.localize('vs/editor/browser/coreCommands', 'stickydesc', "Stick to the end even when going to longer lines"),
                                 type: 'boolean',
                                 default: false
                             }
@@ -1434,7 +1434,7 @@ export var CoreNavigationCommands;
                 viewModel.getPrimaryCursorState()
             ]);
             viewModel.revealAllCursors(args.source, true);
-            status(nls.localize('removedCursor', "Removed secondary cursors"));
+            status(nls.localize('vs/editor/browser/coreCommands', 'removedCursor', "Removed secondary cursors"));
         }
     });
     CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {
diff --git a/esm/vs/editor/browser/editorExtensions.js b/esm/vs/editor/browser/editorExtensions.js
index b0495f1c449ccb0b246094087f5ab2731d05a16d..6ae098e820111341ff60842d14e77caae545e48b 100644
--- a/esm/vs/editor/browser/editorExtensions.js
+++ b/esm/vs/editor/browser/editorExtensions.js
@@ -406,12 +406,12 @@ export const UndoCommand = registerCommand(new MultiCommand({
     menuOpts: [{
             menuId: MenuId.MenubarEditMenu,
             group: '1_do',
-            title: nls.localize({ key: 'miUndo', comment: ['&& denotes a mnemonic'] }, "&&Undo"),
+            title: nls.localize('vs/editor/browser/editorExtensions', { key: 'miUndo', comment: ['&& denotes a mnemonic'] }, "&&Undo"),
             order: 1
         }, {
             menuId: MenuId.CommandPalette,
             group: '',
-            title: nls.localize('undo', "Undo"),
+            title: nls.localize('vs/editor/browser/editorExtensions', 'undo', "Undo"),
             order: 1
         }]
 }));
@@ -428,12 +428,12 @@ export const RedoCommand = registerCommand(new MultiCommand({
     menuOpts: [{
             menuId: MenuId.MenubarEditMenu,
             group: '1_do',
-            title: nls.localize({ key: 'miRedo', comment: ['&& denotes a mnemonic'] }, "&&Redo"),
+            title: nls.localize('vs/editor/browser/editorExtensions', { key: 'miRedo', comment: ['&& denotes a mnemonic'] }, "&&Redo"),
             order: 2
         }, {
             menuId: MenuId.CommandPalette,
             group: '',
-            title: nls.localize('redo', "Redo"),
+            title: nls.localize('vs/editor/browser/editorExtensions', 'redo', "Redo"),
             order: 1
         }]
 }));
@@ -449,12 +449,12 @@ export const SelectAllCommand = registerCommand(new MultiCommand({
     menuOpts: [{
             menuId: MenuId.MenubarSelectionMenu,
             group: '1_basic',
-            title: nls.localize({ key: 'miSelectAll', comment: ['&& denotes a mnemonic'] }, "&&Select All"),
+            title: nls.localize('vs/editor/browser/editorExtensions', { key: 'miSelectAll', comment: ['&& denotes a mnemonic'] }, "&&Select All"),
             order: 1
         }, {
             menuId: MenuId.CommandPalette,
             group: '',
-            title: nls.localize('selectAll', "Select All"),
+            title: nls.localize('vs/editor/browser/editorExtensions', 'selectAll', "Select All"),
             order: 1
         }]
 }));
diff --git a/esm/vs/editor/browser/services/hoverService/hoverWidget.js b/esm/vs/editor/browser/services/hoverService/hoverWidget.js
index 2fb66969ffb873a256fe6f7a2c4080a6643f3c7c..1afd9626356d632750f0a4ea6c64aeb3e6ace2ad 100644
--- a/esm/vs/editor/browser/services/hoverService/hoverWidget.js
+++ b/esm/vs/editor/browser/services/hoverService/hoverWidget.js
@@ -182,7 +182,7 @@ let HoverWidget = class HoverWidget extends Widget {
         if (options.appearance?.showHoverHint) {
             const statusBarElement = $('div.hover-row.status-bar');
             const infoElement = $('div.info');
-            infoElement.textContent = localize('hoverhint', 'Hold {0} key to mouse over', isMacintosh ? 'Option' : 'Alt');
+            infoElement.textContent = localize('vs/editor/browser/services/hoverService/hoverWidget', 'hoverhint', 'Hold {0} key to mouse over', isMacintosh ? 'Option' : 'Alt');
             statusBarElement.appendChild(infoElement);
             this._hover.containerDomNode.appendChild(statusBarElement);
         }
diff --git a/esm/vs/editor/browser/services/hoverService/updatableHoverWidget.js b/esm/vs/editor/browser/services/hoverService/updatableHoverWidget.js
index 21d7543bfd95d755281e40051f378de04dddb972..660bf6f8c8c0590f79f62a0c19eddcb591b74600 100644
--- a/esm/vs/editor/browser/services/hoverService/updatableHoverWidget.js
+++ b/esm/vs/editor/browser/services/hoverService/updatableHoverWidget.js
@@ -33,7 +33,7 @@ export class ManagedHoverWidget {
             // compute the content, potentially long-running
             // show 'Loading' if no hover is up yet
             if (!this._hoverWidget) {
-                this.show(localize('iconLabel.loading', "Loading..."), focus, options);
+                this.show(localize('vs/editor/browser/services/hoverService/updatableHoverWidget', 'iconLabel.loading', "Loading..."), focus, options);
             }
             // compute the content
             this._cancellationTokenSource = new CancellationTokenSource();
diff --git a/esm/vs/editor/browser/widget/codeEditor/codeEditorWidget.js b/esm/vs/editor/browser/widget/codeEditor/codeEditorWidget.js
index b8f05d32df39bc8dba5445b0e481966f9c0fef69..1714c53b1da9f92591adb840d04b60f65520c974 100644
--- a/esm/vs/editor/browser/widget/codeEditor/codeEditorWidget.js
+++ b/esm/vs/editor/browser/widget/codeEditor/codeEditorWidget.js
@@ -1211,7 +1211,7 @@ let CodeEditorWidget = class CodeEditorWidget extends Disposable {
                 case 6 /* OutgoingViewModelEventKind.CursorStateChanged */: {
                     if (e.reachedMaxCursorCount) {
                         const multiCursorLimit = this.getOption(80 /* EditorOption.multiCursorLimit */);
-                        const message = nls.localize('cursors.maximum', "The number of cursors has been limited to {0}. Consider using [find and replace](https://code.visualstudio.com/docs/editor/codebasics#_find-and-replace) for larger changes or increase the editor multi cursor limit setting.", multiCursorLimit);
+                        const message = nls.localize('vs/editor/browser/widget/codeEditor/codeEditorWidget', 'cursors.maximum', "The number of cursors has been limited to {0}. Consider using [find and replace](https://code.visualstudio.com/docs/editor/codebasics#_find-and-replace) for larger changes or increase the editor multi cursor limit setting.", multiCursorLimit);
                         this._notificationService.prompt(Severity.Warning, message, [
                             {
                                 label: 'Find and Replace',
@@ -1220,7 +1220,7 @@ let CodeEditorWidget = class CodeEditorWidget extends Disposable {
                                 }
                             },
                             {
-                                label: nls.localize('goToSetting', 'Increase Multi Cursor Limit'),
+                                label: nls.localize('vs/editor/browser/widget/codeEditor/codeEditorWidget', 'goToSetting', 'Increase Multi Cursor Limit'),
                                 run: () => {
                                     this._commandService.executeCommand('workbench.action.openSettings2', {
                                         query: 'editor.multiCursorLimit'
diff --git a/esm/vs/editor/browser/widget/diffEditor/commands.js b/esm/vs/editor/browser/widget/diffEditor/commands.js
index cc9d59d15fbc2bfeed389db87d3191237f3d19a3..cf70eb43470a9f106d380b08eb0b221a4f85059d 100644
--- a/esm/vs/editor/browser/widget/diffEditor/commands.js
+++ b/esm/vs/editor/browser/widget/diffEditor/commands.js
@@ -17,7 +17,7 @@ export class ToggleCollapseUnchangedRegions extends Action2 {
     constructor() {
         super({
             id: 'diffEditor.toggleCollapseUnchangedRegions',
-            title: localize2('toggleCollapseUnchangedRegions', 'Toggle Collapse Unchanged Regions'),
+            title: localize2('vs/editor/browser/widget/diffEditor/commands', 'toggleCollapseUnchangedRegions', 'Toggle Collapse Unchanged Regions'),
             icon: Codicon.map,
             toggled: ContextKeyExpr.has('config.diffEditor.hideUnchangedRegions.enabled'),
             precondition: ContextKeyExpr.has('isInDiffEditor'),
@@ -39,7 +39,7 @@ export class ToggleShowMovedCodeBlocks extends Action2 {
     constructor() {
         super({
             id: 'diffEditor.toggleShowMovedCodeBlocks',
-            title: localize2('toggleShowMovedCodeBlocks', 'Toggle Show Moved Code Blocks'),
+            title: localize2('vs/editor/browser/widget/diffEditor/commands', 'toggleShowMovedCodeBlocks', 'Toggle Show Moved Code Blocks'),
             precondition: ContextKeyExpr.has('isInDiffEditor'),
         });
     }
@@ -53,7 +53,7 @@ export class ToggleUseInlineViewWhenSpaceIsLimited extends Action2 {
     constructor() {
         super({
             id: 'diffEditor.toggleUseInlineViewWhenSpaceIsLimited',
-            title: localize2('toggleUseInlineViewWhenSpaceIsLimited', 'Toggle Use Inline View When Space Is Limited'),
+            title: localize2('vs/editor/browser/widget/diffEditor/commands', 'toggleUseInlineViewWhenSpaceIsLimited', 'Toggle Use Inline View When Space Is Limited'),
             precondition: ContextKeyExpr.has('isInDiffEditor'),
         });
     }
@@ -63,12 +63,12 @@ export class ToggleUseInlineViewWhenSpaceIsLimited extends Action2 {
         configurationService.updateValue('diffEditor.useInlineViewWhenSpaceIsLimited', newValue);
     }
 }
-const diffEditorCategory = localize2('diffEditor', "Diff Editor");
+const diffEditorCategory = localize2('vs/editor/browser/widget/diffEditor/commands', 'diffEditor', "Diff Editor");
 export class SwitchSide extends EditorAction2 {
     constructor() {
         super({
             id: 'diffEditor.switchSide',
-            title: localize2('switchSide', 'Switch Side'),
+            title: localize2('vs/editor/browser/widget/diffEditor/commands', 'switchSide', 'Switch Side'),
             icon: Codicon.arrowSwap,
             precondition: ContextKeyExpr.has('isInDiffEditor'),
             f1: true,
@@ -92,7 +92,7 @@ export class ExitCompareMove extends EditorAction2 {
     constructor() {
         super({
             id: 'diffEditor.exitCompareMove',
-            title: localize2('exitCompareMove', 'Exit Compare Move'),
+            title: localize2('vs/editor/browser/widget/diffEditor/commands', 'exitCompareMove', 'Exit Compare Move'),
             icon: Codicon.close,
             precondition: EditorContextKeys.comparingMovedCode,
             f1: false,
@@ -114,7 +114,7 @@ export class CollapseAllUnchangedRegions extends EditorAction2 {
     constructor() {
         super({
             id: 'diffEditor.collapseAllUnchangedRegions',
-            title: localize2('collapseAllUnchangedRegions', 'Collapse All Unchanged Regions'),
+            title: localize2('vs/editor/browser/widget/diffEditor/commands', 'collapseAllUnchangedRegions', 'Collapse All Unchanged Regions'),
             icon: Codicon.fold,
             precondition: ContextKeyExpr.has('isInDiffEditor'),
             f1: true,
@@ -132,7 +132,7 @@ export class ShowAllUnchangedRegions extends EditorAction2 {
     constructor() {
         super({
             id: 'diffEditor.showAllUnchangedRegions',
-            title: localize2('showAllUnchangedRegions', 'Show All Unchanged Regions'),
+            title: localize2('vs/editor/browser/widget/diffEditor/commands', 'showAllUnchangedRegions', 'Show All Unchanged Regions'),
             icon: Codicon.unfold,
             precondition: ContextKeyExpr.has('isInDiffEditor'),
             f1: true,
@@ -150,7 +150,7 @@ export class RevertHunkOrSelection extends Action2 {
     constructor() {
         super({
             id: 'diffEditor.revert',
-            title: localize2('revert', 'Revert'),
+            title: localize2('vs/editor/browser/widget/diffEditor/commands', 'revert', 'Revert'),
             f1: false,
             category: diffEditorCategory,
         });
@@ -163,13 +163,13 @@ export class RevertHunkOrSelection extends Action2 {
         return undefined;
     }
 }
-const accessibleDiffViewerCategory = localize2('accessibleDiffViewer', "Accessible Diff Viewer");
+const accessibleDiffViewerCategory = localize2('vs/editor/browser/widget/diffEditor/commands', 'accessibleDiffViewer', "Accessible Diff Viewer");
 export class AccessibleDiffViewerNext extends Action2 {
     static { this.id = 'editor.action.accessibleDiffViewer.next'; }
     constructor() {
         super({
             id: AccessibleDiffViewerNext.id,
-            title: localize2('editor.action.accessibleDiffViewer.next', 'Go to Next Difference'),
+            title: localize2('vs/editor/browser/widget/diffEditor/commands', 'editor.action.accessibleDiffViewer.next', 'Go to Next Difference'),
             category: accessibleDiffViewerCategory,
             precondition: ContextKeyExpr.has('isInDiffEditor'),
             keybinding: {
@@ -189,7 +189,7 @@ export class AccessibleDiffViewerPrev extends Action2 {
     constructor() {
         super({
             id: AccessibleDiffViewerPrev.id,
-            title: localize2('editor.action.accessibleDiffViewer.prev', 'Go to Previous Difference'),
+            title: localize2('vs/editor/browser/widget/diffEditor/commands', 'editor.action.accessibleDiffViewer.prev', 'Go to Previous Difference'),
             category: accessibleDiffViewerCategory,
             precondition: ContextKeyExpr.has('isInDiffEditor'),
             keybinding: {
diff --git a/esm/vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer.js b/esm/vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer.js
index f40c38cd4d478d45fd87f9e631741ef1d3643707..5a7a628401eae8d6c973f5555d164919fc7e43fb 100644
--- a/esm/vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer.js
+++ b/esm/vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer.js
@@ -38,9 +38,9 @@ import { AccessibilitySignal, IAccessibilitySignalService } from '../../../../..
 import { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';
 import { registerIcon } from '../../../../../platform/theme/common/iconRegistry.js';
 import './accessibleDiffViewer.css';
-const accessibleDiffViewerInsertIcon = registerIcon('diff-review-insert', Codicon.add, localize('accessibleDiffViewerInsertIcon', 'Icon for \'Insert\' in accessible diff viewer.'));
-const accessibleDiffViewerRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, localize('accessibleDiffViewerRemoveIcon', 'Icon for \'Remove\' in accessible diff viewer.'));
-const accessibleDiffViewerCloseIcon = registerIcon('diff-review-close', Codicon.close, localize('accessibleDiffViewerCloseIcon', 'Icon for \'Close\' in accessible diff viewer.'));
+const accessibleDiffViewerInsertIcon = registerIcon('diff-review-insert', Codicon.add, localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'accessibleDiffViewerInsertIcon', 'Icon for \'Insert\' in accessible diff viewer.'));
+const accessibleDiffViewerRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'accessibleDiffViewerRemoveIcon', 'Icon for \'Remove\' in accessible diff viewer.'));
+const accessibleDiffViewerCloseIcon = registerIcon('diff-review-close', Codicon.close, localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'accessibleDiffViewerCloseIcon', 'Icon for \'Close\' in accessible diff viewer.'));
 let AccessibleDiffViewer = class AccessibleDiffViewer extends Disposable {
     static { this._ttPolicy = createTrustedTypesPolicy('diffReview', { createHTML: value => value }); }
     constructor(_parentNode, _visible, _setVisible, _canClose, _width, _height, _diffs, _models, _instantiationService) {
@@ -296,7 +296,7 @@ let View = class View extends Disposable {
             /** @description update actions */
             this._actionBar.clear();
             if (this._model.canClose.read(reader)) {
-                this._actionBar.push(new Action('diffreview.close', localize('label.close', "Close"), 'close-diff-review ' + ThemeIcon.asClassName(accessibleDiffViewerCloseIcon), true, async () => _model.close()), { label: false, icon: true });
+                this._actionBar.push(new Action('diffreview.close', localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'label.close', "Close"), 'close-diff-review ' + ThemeIcon.asClassName(accessibleDiffViewerCloseIcon), true, async () => _model.close()), { label: false, icon: true });
             }
         }));
         this._content = document.createElement('div');
@@ -351,7 +351,7 @@ let View = class View extends Disposable {
         const container = document.createElement('div');
         container.className = 'diff-review-table';
         container.setAttribute('role', 'list');
-        container.setAttribute('aria-label', localize('ariaLabel', 'Accessible Diff Viewer. Use arrow up and down to navigate.'));
+        container.setAttribute('aria-label', localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'ariaLabel', 'Accessible Diff Viewer. Use arrow up and down to navigate.'));
         applyFontInfo(container, modifiedOptions.get(50 /* EditorOption.fontInfo */));
         reset(this._content, container);
         const originalModel = this._models.getOriginalModel();
@@ -375,12 +375,12 @@ let View = class View extends Disposable {
                 const r = group.range;
                 const diffIndex = this._model.currentGroupIndex.get();
                 const diffsLength = this._model.groups.get().length;
-                const getAriaLines = (lines) => lines === 0 ? localize('no_lines_changed', "no lines changed")
-                    : lines === 1 ? localize('one_line_changed', "1 line changed")
-                        : localize('more_lines_changed', "{0} lines changed", lines);
+                const getAriaLines = (lines) => lines === 0 ? localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'no_lines_changed', "no lines changed")
+                    : lines === 1 ? localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'one_line_changed', "1 line changed")
+                        : localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'more_lines_changed', "{0} lines changed", lines);
                 const originalChangedLinesCntAria = getAriaLines(r.original.length);
                 const modifiedChangedLinesCntAria = getAriaLines(r.modified.length);
-                header.setAttribute('aria-label', localize({
+                header.setAttribute('aria-label', localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', {
                     key: 'header',
                     comment: [
                         'This is the ARIA label for a git diff header.',
@@ -500,23 +500,23 @@ let View = class View extends Disposable {
             lineContent = originalModel.getLineContent(item.originalLineNumber);
         }
         if (lineContent.length === 0) {
-            lineContent = localize('blankLine', "blank");
+            lineContent = localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'blankLine', "blank");
         }
         let ariaLabel = '';
         switch (item.type) {
             case LineType.Unchanged:
                 if (item.originalLineNumber === item.modifiedLineNumber) {
-                    ariaLabel = localize({ key: 'unchangedLine', comment: ['The placeholders are contents of the line and should not be translated.'] }, "{0} unchanged line {1}", lineContent, item.originalLineNumber);
+                    ariaLabel = localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', { key: 'unchangedLine', comment: ['The placeholders are contents of the line and should not be translated.'] }, "{0} unchanged line {1}", lineContent, item.originalLineNumber);
                 }
                 else {
-                    ariaLabel = localize('equalLine', "{0} original line {1} modified line {2}", lineContent, item.originalLineNumber, item.modifiedLineNumber);
+                    ariaLabel = localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'equalLine', "{0} original line {1} modified line {2}", lineContent, item.originalLineNumber, item.modifiedLineNumber);
                 }
                 break;
             case LineType.Added:
-                ariaLabel = localize('insertLine', "+ {0} modified line {1}", lineContent, item.modifiedLineNumber);
+                ariaLabel = localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'insertLine', "+ {0} modified line {1}", lineContent, item.modifiedLineNumber);
                 break;
             case LineType.Deleted:
-                ariaLabel = localize('deleteLine', "- {0} original line {1}", lineContent, item.originalLineNumber);
+                ariaLabel = localize('vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer', 'deleteLine', "- {0} original line {1}", lineContent, item.originalLineNumber);
                 break;
         }
         row.setAttribute('aria-label', ariaLabel);
diff --git a/esm/vs/editor/browser/widget/diffEditor/components/diffEditorEditors.js b/esm/vs/editor/browser/widget/diffEditor/components/diffEditorEditors.js
index 5cf17f8c8565259f89c5bf1aece91c721dd67fd4..4bd3a720c05e6be88d52336daa93564b9115687a 100644
--- a/esm/vs/editor/browser/widget/diffEditor/components/diffEditorEditors.js
+++ b/esm/vs/editor/browser/widget/diffEditor/components/diffEditorEditors.js
@@ -152,7 +152,7 @@ let DiffEditorEditors = class DiffEditorEditors extends Disposable {
         if (!ariaLabel) {
             ariaLabel = '';
         }
-        const ariaNavigationTip = localize('diff-aria-navigation-tip', ' use {0} to open the accessibility help.', this._keybindingService.lookupKeybinding('editor.action.accessibilityHelp')?.getAriaLabel());
+        const ariaNavigationTip = localize('vs/editor/browser/widget/diffEditor/components/diffEditorEditors', 'diff-aria-navigation-tip', ' use {0} to open the accessibility help.', this._keybindingService.lookupKeybinding('editor.action.accessibilityHelp')?.getAriaLabel());
         if (this._options.accessibilityVerbose.get()) {
             return ariaLabel + ariaNavigationTip;
         }
diff --git a/esm/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin.js b/esm/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin.js
index c2f3b77791796dcacd8c25613479cc804ed5fa27..9ee71265e50c345e77f95759dc74fa595a4b01a0 100644
--- a/esm/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin.js
+++ b/esm/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin.js
@@ -54,18 +54,18 @@ export class InlineDiffDeletedCodeMargin extends Disposable {
                     // default action
                     actions.push(new Action('diff.clipboard.copyDeletedContent', isDeletion
                         ? (_diff.original.length > 1
-                            ? localize('diff.clipboard.copyDeletedLinesContent.label', "Copy deleted lines")
-                            : localize('diff.clipboard.copyDeletedLinesContent.single.label', "Copy deleted line"))
+                            ? localize('vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin', 'diff.clipboard.copyDeletedLinesContent.label', "Copy deleted lines")
+                            : localize('vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin', 'diff.clipboard.copyDeletedLinesContent.single.label', "Copy deleted line"))
                         : (_diff.original.length > 1
-                            ? localize('diff.clipboard.copyChangedLinesContent.label', "Copy changed lines")
-                            : localize('diff.clipboard.copyChangedLinesContent.single.label', "Copy changed line")), undefined, true, async () => {
+                            ? localize('vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin', 'diff.clipboard.copyChangedLinesContent.label', "Copy changed lines")
+                            : localize('vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin', 'diff.clipboard.copyChangedLinesContent.single.label', "Copy changed line")), undefined, true, async () => {
                         const originalText = this._originalTextModel.getValueInRange(_diff.original.toExclusiveRange());
                         await this._clipboardService.writeText(originalText);
                     }));
                     if (_diff.original.length > 1) {
                         actions.push(new Action('diff.clipboard.copyDeletedLineContent', isDeletion
-                            ? localize('diff.clipboard.copyDeletedLineContent.label', "Copy deleted line ({0})", _diff.original.startLineNumber + currentLineNumberOffset)
-                            : localize('diff.clipboard.copyChangedLineContent.label', "Copy changed line ({0})", _diff.original.startLineNumber + currentLineNumberOffset), undefined, true, async () => {
+                            ? localize('vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin', 'diff.clipboard.copyDeletedLineContent.label', "Copy deleted line ({0})", _diff.original.startLineNumber + currentLineNumberOffset)
+                            : localize('vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin', 'diff.clipboard.copyChangedLineContent.label', "Copy changed line ({0})", _diff.original.startLineNumber + currentLineNumberOffset), undefined, true, async () => {
                             let lineContent = this._originalTextModel.getLineContent(_diff.original.startLineNumber + currentLineNumberOffset);
                             if (lineContent === '') {
                                 // empty line -> new line
@@ -77,7 +77,7 @@ export class InlineDiffDeletedCodeMargin extends Disposable {
                     }
                     const readOnly = _modifiedEditor.getOption(92 /* EditorOption.readOnly */);
                     if (!readOnly) {
-                        actions.push(new Action('diff.inline.revertChange', localize('diff.inline.revertChange.label', "Revert this change"), undefined, true, async () => {
+                        actions.push(new Action('diff.inline.revertChange', localize('vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin', 'diff.inline.revertChange.label', "Revert this change"), undefined, true, async () => {
                             this._editor.revert(this._diff);
                         }));
                     }
diff --git a/esm/vs/editor/browser/widget/diffEditor/diffEditor.contribution.js b/esm/vs/editor/browser/widget/diffEditor/diffEditor.contribution.js
index 3fb56470e1888813cc0c63226a023063fa6e2299..463bbaf2a17b2d8aea35f7323fc36cb17b19d2b6 100644
--- a/esm/vs/editor/browser/widget/diffEditor/diffEditor.contribution.js
+++ b/esm/vs/editor/browser/widget/diffEditor/diffEditor.contribution.js
@@ -16,7 +16,7 @@ registerAction2(ToggleUseInlineViewWhenSpaceIsLimited);
 MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
     command: {
         id: new ToggleUseInlineViewWhenSpaceIsLimited().desc.id,
-        title: localize('useInlineViewWhenSpaceIsLimited', "Use Inline View When Space Is Limited"),
+        title: localize('vs/editor/browser/widget/diffEditor/diffEditor.contribution', 'useInlineViewWhenSpaceIsLimited', "Use Inline View When Space Is Limited"),
         toggled: ContextKeyExpr.has('config.diffEditor.useInlineViewWhenSpaceIsLimited'),
         precondition: ContextKeyExpr.has('isInDiffEditor'),
     },
@@ -27,7 +27,7 @@ MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
 MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
     command: {
         id: new ToggleShowMovedCodeBlocks().desc.id,
-        title: localize('showMoves', "Show Moved Code Blocks"),
+        title: localize('vs/editor/browser/widget/diffEditor/diffEditor.contribution', 'showMoves', "Show Moved Code Blocks"),
         icon: Codicon.move,
         toggled: ContextKeyEqualsExpr.create('config.diffEditor.experimental.showMoves', true),
         precondition: ContextKeyExpr.has('isInDiffEditor'),
@@ -44,7 +44,7 @@ for (const ctx of [
     MenuRegistry.appendMenuItem(MenuId.DiffEditorHunkToolbar, {
         command: {
             id: new RevertHunkOrSelection().desc.id,
-            title: localize('revertHunk', "Revert Block"),
+            title: localize('vs/editor/browser/widget/diffEditor/diffEditor.contribution', 'revertHunk', "Revert Block"),
             icon: ctx.icon,
         },
         when: ContextKeyExpr.and(EditorContextKeys.diffEditorModifiedWritable, ctx.key),
@@ -54,7 +54,7 @@ for (const ctx of [
     MenuRegistry.appendMenuItem(MenuId.DiffEditorSelectionToolbar, {
         command: {
             id: new RevertHunkOrSelection().desc.id,
-            title: localize('revertSelection', "Revert Selection"),
+            title: localize('vs/editor/browser/widget/diffEditor/diffEditor.contribution', 'revertSelection', "Revert Selection"),
             icon: ctx.icon,
         },
         when: ContextKeyExpr.and(EditorContextKeys.diffEditorModifiedWritable, ctx.key),
@@ -69,7 +69,7 @@ registerAction2(ShowAllUnchangedRegions);
 MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
     command: {
         id: AccessibleDiffViewerNext.id,
-        title: localize('Open Accessible Diff Viewer', "Open Accessible Diff Viewer"),
+        title: localize('vs/editor/browser/widget/diffEditor/diffEditor.contribution', 'Open Accessible Diff Viewer', "Open Accessible Diff Viewer"),
         precondition: ContextKeyExpr.has('isInDiffEditor'),
     },
     order: 10,
diff --git a/esm/vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature.js b/esm/vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature.js
index a4d09b6b5f744fec75142e5f96c7c13caba646bf..33dfdbf3b4f501581b9ddd8529b7ea5896a2cd32 100644
--- a/esm/vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature.js
+++ b/esm/vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature.js
@@ -146,7 +146,7 @@ let HideUnchangedRegionsFeature = class HideUnchangedRegionsFeature extends Disp
         const unchangedLinesDecorationShow = {
             description: 'Fold Unchanged',
             glyphMarginHoverMessage: new MarkdownString(undefined, { isTrusted: true, supportThemeIcons: true })
-                .appendMarkdown(localize('foldUnchanged', 'Fold Unchanged Region')),
+                .appendMarkdown(localize('vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature', 'foldUnchanged', 'Fold Unchanged Region')),
             glyphMarginClassName: 'fold-unchanged ' + ThemeIcon.asClassName(Codicon.fold),
             zIndex: 10001,
         };
@@ -253,7 +253,7 @@ class CompactCollapsedCodeOverlayWidget extends ViewZoneOverlayWidget {
             /** @description update labels */
             if (!this._hide) {
                 const lineCount = this._unchangedRegion.getHiddenModifiedRange(reader).length;
-                const linesHiddenText = localize('hiddenLines', '{0} hidden lines', lineCount);
+                const linesHiddenText = localize('vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature', 'hiddenLines', '{0} hidden lines', lineCount);
                 this._nodes.text.innerText = linesHiddenText;
             }
         }));
@@ -271,12 +271,12 @@ class CollapsedCodeOverlayWidget extends ViewZoneOverlayWidget {
         this._revealModifiedHiddenLine = _revealModifiedHiddenLine;
         this._options = _options;
         this._nodes = h('div.diff-hidden-lines', [
-            h('div.top@top', { title: localize('diff.hiddenLines.top', 'Click or drag to show more above') }),
+            h('div.top@top', { title: localize('vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature', 'diff.hiddenLines.top', 'Click or drag to show more above') }),
             h('div.center@content', { style: { display: 'flex' } }, [
-                h('div@first', { style: { display: 'flex', justifyContent: 'center', alignItems: 'center', flexShrink: '0' } }, [$('a', { title: localize('showUnchangedRegion', 'Show Unchanged Region'), role: 'button', onclick: () => { this._unchangedRegion.showAll(undefined); } }, ...renderLabelWithIcons('$(unfold)'))]),
+                h('div@first', { style: { display: 'flex', justifyContent: 'center', alignItems: 'center', flexShrink: '0' } }, [$('a', { title: localize('vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature', 'showUnchangedRegion', 'Show Unchanged Region'), role: 'button', onclick: () => { this._unchangedRegion.showAll(undefined); } }, ...renderLabelWithIcons('$(unfold)'))]),
                 h('div@others', { style: { display: 'flex', justifyContent: 'center', alignItems: 'center' } }),
             ]),
-            h('div.bottom@bottom', { title: localize('diff.bottom', 'Click or drag to show more below'), role: 'button' }),
+            h('div.bottom@bottom', { title: localize('vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature', 'diff.bottom', 'Click or drag to show more below'), role: 'button' }),
         ]);
         root.root.appendChild(this._nodes.root);
         if (!this._hide) {
@@ -388,8 +388,8 @@ class CollapsedCodeOverlayWidget extends ViewZoneOverlayWidget {
             const children = [];
             if (!this._hide) {
                 const lineCount = _unchangedRegion.getHiddenModifiedRange(reader).length;
-                const linesHiddenText = localize('hiddenLines', '{0} hidden lines', lineCount);
-                const span = $('span', { title: localize('diff.hiddenLines.expandAll', 'Double click to unfold') }, linesHiddenText);
+                const linesHiddenText = localize('vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature', 'hiddenLines', '{0} hidden lines', lineCount);
+                const span = $('span', { title: localize('vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature', 'diff.hiddenLines.expandAll', 'Double click to unfold') }, linesHiddenText);
                 span.addEventListener('dblclick', e => {
                     if (e.button !== 0) {
                         return;
diff --git a/esm/vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature.js b/esm/vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature.js
index e6b79c7f7194c0882aefd1c9da5d23183e02c06a..62ceebdfdae0b6e8bdd46ba892ace69db9758847 100644
--- a/esm/vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature.js
+++ b/esm/vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature.js
@@ -242,10 +242,10 @@ class MovedBlockOverlayWidget extends ViewZoneOverlayWidget {
         }));
         let text;
         if (_move.changes.length > 0) {
-            text = this._kind === 'original' ? localize('codeMovedToWithChanges', 'Code moved with changes to line {0}-{1}', this._move.lineRangeMapping.modified.startLineNumber, this._move.lineRangeMapping.modified.endLineNumberExclusive - 1) : localize('codeMovedFromWithChanges', 'Code moved with changes from line {0}-{1}', this._move.lineRangeMapping.original.startLineNumber, this._move.lineRangeMapping.original.endLineNumberExclusive - 1);
+            text = this._kind === 'original' ? localize('vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature', 'codeMovedToWithChanges', 'Code moved with changes to line {0}-{1}', this._move.lineRangeMapping.modified.startLineNumber, this._move.lineRangeMapping.modified.endLineNumberExclusive - 1) : localize('vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature', 'codeMovedFromWithChanges', 'Code moved with changes from line {0}-{1}', this._move.lineRangeMapping.original.startLineNumber, this._move.lineRangeMapping.original.endLineNumberExclusive - 1);
         }
         else {
-            text = this._kind === 'original' ? localize('codeMovedTo', 'Code moved to line {0}-{1}', this._move.lineRangeMapping.modified.startLineNumber, this._move.lineRangeMapping.modified.endLineNumberExclusive - 1) : localize('codeMovedFrom', 'Code moved from line {0}-{1}', this._move.lineRangeMapping.original.startLineNumber, this._move.lineRangeMapping.original.endLineNumberExclusive - 1);
+            text = this._kind === 'original' ? localize('vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature', 'codeMovedTo', 'Code moved to line {0}-{1}', this._move.lineRangeMapping.modified.startLineNumber, this._move.lineRangeMapping.modified.endLineNumberExclusive - 1) : localize('vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature', 'codeMovedFrom', 'Code moved from line {0}-{1}', this._move.lineRangeMapping.original.startLineNumber, this._move.lineRangeMapping.original.endLineNumberExclusive - 1);
         }
         const actionBar = this._register(new ActionBar(this._nodes.actionBar, {
             highlightToggledItems: true,
diff --git a/esm/vs/editor/browser/widget/diffEditor/features/revertButtonsFeature.js b/esm/vs/editor/browser/widget/diffEditor/features/revertButtonsFeature.js
index a6a3b395e3c87495b18993744308ebe37a29f2f4..f0ada1aa34a23fcaff9ad254396a4567ad3c32b8 100644
--- a/esm/vs/editor/browser/widget/diffEditor/features/revertButtonsFeature.js
+++ b/esm/vs/editor/browser/widget/diffEditor/features/revertButtonsFeature.js
@@ -95,8 +95,8 @@ export class RevertButton extends Disposable {
         this._id = `revertButton${RevertButton.counter++}`;
         this._domNode = h('div.revertButton', {
             title: this._revertSelection
-                ? localize('revertSelectedChanges', 'Revert Selected Changes')
-                : localize('revertChange', 'Revert Change')
+                ? localize('vs/editor/browser/widget/diffEditor/features/revertButtonsFeature', 'revertSelectedChanges', 'Revert Selected Changes')
+                : localize('vs/editor/browser/widget/diffEditor/features/revertButtonsFeature', 'revertChange', 'Revert Change')
         }, [renderIcon(Codicon.arrowRight)]).root;
         this._register(addDisposableListener(this._domNode, EventType.MOUSE_DOWN, e => {
             // don't prevent context menu from showing up
diff --git a/esm/vs/editor/browser/widget/diffEditor/registrations.contribution.js b/esm/vs/editor/browser/widget/diffEditor/registrations.contribution.js
index c5ab40dcdec10371f23deb727bce7ca66fce618a..7bdc2ce7133859271c3c1c1cae7ee909deb09b36 100644
--- a/esm/vs/editor/browser/widget/diffEditor/registrations.contribution.js
+++ b/esm/vs/editor/browser/widget/diffEditor/registrations.contribution.js
@@ -8,11 +8,11 @@ import { ModelDecorationOptions } from '../../../common/model/textModel.js';
 import { localize } from '../../../../nls.js';
 import { registerColor } from '../../../../platform/theme/common/colorRegistry.js';
 import { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';
-export const diffMoveBorder = registerColor('diffEditor.move.border', '#8b8b8b9c', localize('diffEditor.move.border', 'The border color for text that got moved in the diff editor.'));
-export const diffMoveBorderActive = registerColor('diffEditor.moveActive.border', '#FFA500', localize('diffEditor.moveActive.border', 'The active border color for text that got moved in the diff editor.'));
-export const diffEditorUnchangedRegionShadow = registerColor('diffEditor.unchangedRegionShadow', { dark: '#000000', light: '#737373BF', hcDark: '#000000', hcLight: '#737373BF', }, localize('diffEditor.unchangedRegionShadow', 'The color of the shadow around unchanged region widgets.'));
-export const diffInsertIcon = registerIcon('diff-insert', Codicon.add, localize('diffInsertIcon', 'Line decoration for inserts in the diff editor.'));
-export const diffRemoveIcon = registerIcon('diff-remove', Codicon.remove, localize('diffRemoveIcon', 'Line decoration for removals in the diff editor.'));
+export const diffMoveBorder = registerColor('diffEditor.move.border', '#8b8b8b9c', localize('vs/editor/browser/widget/diffEditor/registrations.contribution', 'diffEditor.move.border', 'The border color for text that got moved in the diff editor.'));
+export const diffMoveBorderActive = registerColor('diffEditor.moveActive.border', '#FFA500', localize('vs/editor/browser/widget/diffEditor/registrations.contribution', 'diffEditor.moveActive.border', 'The active border color for text that got moved in the diff editor.'));
+export const diffEditorUnchangedRegionShadow = registerColor('diffEditor.unchangedRegionShadow', { dark: '#000000', light: '#737373BF', hcDark: '#000000', hcLight: '#737373BF', }, localize('vs/editor/browser/widget/diffEditor/registrations.contribution', 'diffEditor.unchangedRegionShadow', 'The color of the shadow around unchanged region widgets.'));
+export const diffInsertIcon = registerIcon('diff-insert', Codicon.add, localize('vs/editor/browser/widget/diffEditor/registrations.contribution', 'diffInsertIcon', 'Line decoration for inserts in the diff editor.'));
+export const diffRemoveIcon = registerIcon('diff-remove', Codicon.remove, localize('vs/editor/browser/widget/diffEditor/registrations.contribution', 'diffRemoveIcon', 'Line decoration for removals in the diff editor.'));
 export const diffLineAddDecorationBackgroundWithIndicator = ModelDecorationOptions.register({
     className: 'line-insert',
     description: 'line-insert',
diff --git a/esm/vs/editor/browser/widget/multiDiffEditor/colors.js b/esm/vs/editor/browser/widget/multiDiffEditor/colors.js
index 80df208c2d79e53d46ed5762364d9e9bf191497e..de844ef5301cb93527279f87104c9f8b65544812 100644
--- a/esm/vs/editor/browser/widget/multiDiffEditor/colors.js
+++ b/esm/vs/editor/browser/widget/multiDiffEditor/colors.js
@@ -4,6 +4,6 @@
  *--------------------------------------------------------------------------------------------*/
 import { localize } from '../../../../nls.js';
 import { registerColor, editorBackground } from '../../../../platform/theme/common/colorRegistry.js';
-export const multiDiffEditorHeaderBackground = registerColor('multiDiffEditor.headerBackground', { dark: '#262626', light: 'tab.inactiveBackground', hcDark: 'tab.inactiveBackground', hcLight: 'tab.inactiveBackground', }, localize('multiDiffEditor.headerBackground', 'The background color of the diff editor\'s header'));
-export const multiDiffEditorBackground = registerColor('multiDiffEditor.background', editorBackground, localize('multiDiffEditor.background', 'The background color of the multi file diff editor'));
-export const multiDiffEditorBorder = registerColor('multiDiffEditor.border', { dark: 'sideBarSectionHeader.border', light: '#cccccc', hcDark: 'sideBarSectionHeader.border', hcLight: '#cccccc', }, localize('multiDiffEditor.border', 'The border color of the multi file diff editor'));
+export const multiDiffEditorHeaderBackground = registerColor('multiDiffEditor.headerBackground', { dark: '#262626', light: 'tab.inactiveBackground', hcDark: 'tab.inactiveBackground', hcLight: 'tab.inactiveBackground', }, localize('vs/editor/browser/widget/multiDiffEditor/colors', 'multiDiffEditor.headerBackground', 'The background color of the diff editor\'s header'));
+export const multiDiffEditorBackground = registerColor('multiDiffEditor.background', editorBackground, localize('vs/editor/browser/widget/multiDiffEditor/colors', 'multiDiffEditor.background', 'The background color of the multi file diff editor'));
+export const multiDiffEditorBorder = registerColor('multiDiffEditor.border', { dark: 'sideBarSectionHeader.border', light: '#cccccc', hcDark: 'sideBarSectionHeader.border', hcLight: '#cccccc', }, localize('vs/editor/browser/widget/multiDiffEditor/colors', 'multiDiffEditor.border', 'The border color of the multi file diff editor'));
diff --git a/esm/vs/editor/browser/widget/multiDiffEditor/multiDiffEditorWidgetImpl.js b/esm/vs/editor/browser/widget/multiDiffEditor/multiDiffEditorWidgetImpl.js
index d50e160f83f6900c1b611045303a16f0542a110b..8fec78ca31ca293a6e6536815c9d7dfe3dc6c943 100644
--- a/esm/vs/editor/browser/widget/multiDiffEditor/multiDiffEditorWidgetImpl.js
+++ b/esm/vs/editor/browser/widget/multiDiffEditor/multiDiffEditorWidgetImpl.js
@@ -60,7 +60,7 @@ let MultiDiffEditorWidgetImpl = class MultiDiffEditorWidgetImpl extends Disposab
         }, this._scrollable));
         this._elements = h('div.monaco-component.multiDiffEditor', {}, [
             h('div', {}, [this._scrollableElement.getDomNode()]),
-            h('div.placeholder@placeholder', {}, [h('div', [localize('noChangedFiles', 'No Changed Files')])]),
+            h('div.placeholder@placeholder', {}, [h('div', [localize('vs/editor/browser/widget/multiDiffEditor/multiDiffEditorWidgetImpl', 'noChangedFiles', 'No Changed Files')])]),
         ]);
         this._sizeObserver = this._register(new ObservableElementSizeObserver(this._element, undefined));
         this._objectPool = this._register(new ObjectPool((data) => {
diff --git a/esm/vs/editor/common/config/editorConfigurationSchema.js b/esm/vs/editor/common/config/editorConfigurationSchema.js
index bf59d7011f2444ac6230b52e9688470b1425ad6f..25ef24116ed220cb7d54f4ad3e1e7e7d2ff6097e 100644
--- a/esm/vs/editor/common/config/editorConfigurationSchema.js
+++ b/esm/vs/editor/common/config/editorConfigurationSchema.js
@@ -12,7 +12,7 @@ export const editorConfigurationBaseNode = Object.freeze({
     id: 'editor',
     order: 5,
     type: 'object',
-    title: nls.localize('editorConfigurationTitle', "Editor"),
+    title: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'editorConfigurationTitle', "Editor"),
     scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,
 });
 const editorConfiguration = {
@@ -22,7 +22,7 @@ const editorConfiguration = {
             type: 'number',
             default: EDITOR_MODEL_DEFAULTS.tabSize,
             minimum: 1,
-            markdownDescription: nls.localize('tabSize', "The number of spaces a tab is equal to. This setting is overridden based on the file contents when {0} is on.", '`#editor.detectIndentation#`')
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'tabSize', "The number of spaces a tab is equal to. This setting is overridden based on the file contents when {0} is on.", '`#editor.detectIndentation#`')
         },
         'editor.indentSize': {
             'anyOf': [
@@ -36,96 +36,96 @@ const editorConfiguration = {
                 }
             ],
             default: 'tabSize',
-            markdownDescription: nls.localize('indentSize', "The number of spaces used for indentation or `\"tabSize\"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.")
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'indentSize', "The number of spaces used for indentation or `\"tabSize\"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.")
         },
         'editor.insertSpaces': {
             type: 'boolean',
             default: EDITOR_MODEL_DEFAULTS.insertSpaces,
-            markdownDescription: nls.localize('insertSpaces', "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when {0} is on.", '`#editor.detectIndentation#`')
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'insertSpaces', "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when {0} is on.", '`#editor.detectIndentation#`')
         },
         'editor.detectIndentation': {
             type: 'boolean',
             default: EDITOR_MODEL_DEFAULTS.detectIndentation,
-            markdownDescription: nls.localize('detectIndentation', "Controls whether {0} and {1} will be automatically detected when a file is opened based on the file contents.", '`#editor.tabSize#`', '`#editor.insertSpaces#`')
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'detectIndentation', "Controls whether {0} and {1} will be automatically detected when a file is opened based on the file contents.", '`#editor.tabSize#`', '`#editor.insertSpaces#`')
         },
         'editor.trimAutoWhitespace': {
             type: 'boolean',
             default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,
-            description: nls.localize('trimAutoWhitespace', "Remove trailing auto inserted whitespace.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'trimAutoWhitespace', "Remove trailing auto inserted whitespace.")
         },
         'editor.largeFileOptimizations': {
             type: 'boolean',
             default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,
-            description: nls.localize('largeFileOptimizations', "Special handling for large files to disable certain memory intensive features.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'largeFileOptimizations', "Special handling for large files to disable certain memory intensive features.")
         },
         'editor.wordBasedSuggestions': {
             enum: ['off', 'currentDocument', 'matchingDocuments', 'allDocuments'],
             default: 'matchingDocuments',
             enumDescriptions: [
-                nls.localize('wordBasedSuggestions.off', 'Turn off Word Based Suggestions.'),
-                nls.localize('wordBasedSuggestions.currentDocument', 'Only suggest words from the active document.'),
-                nls.localize('wordBasedSuggestions.matchingDocuments', 'Suggest words from all open documents of the same language.'),
-                nls.localize('wordBasedSuggestions.allDocuments', 'Suggest words from all open documents.')
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'wordBasedSuggestions.off', 'Turn off Word Based Suggestions.'),
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'wordBasedSuggestions.currentDocument', 'Only suggest words from the active document.'),
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'wordBasedSuggestions.matchingDocuments', 'Suggest words from all open documents of the same language.'),
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'wordBasedSuggestions.allDocuments', 'Suggest words from all open documents.')
             ],
-            description: nls.localize('wordBasedSuggestions', "Controls whether completions should be computed based on words in the document and from which documents they are computed.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'wordBasedSuggestions', "Controls whether completions should be computed based on words in the document and from which documents they are computed.")
         },
         'editor.semanticHighlighting.enabled': {
             enum: [true, false, 'configuredByTheme'],
             enumDescriptions: [
-                nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'),
-                nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'),
-                nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\'s `semanticHighlighting` setting.')
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'),
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'),
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\'s `semanticHighlighting` setting.')
             ],
             default: 'configuredByTheme',
-            description: nls.localize('semanticHighlighting.enabled', "Controls whether the semanticHighlighting is shown for the languages that support it.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'semanticHighlighting.enabled', "Controls whether the semanticHighlighting is shown for the languages that support it.")
         },
         'editor.stablePeek': {
             type: 'boolean',
             default: false,
-            markdownDescription: nls.localize('stablePeek', "Keep peek editors open even when double-clicking their content or when hitting `Escape`.")
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'stablePeek', "Keep peek editors open even when double-clicking their content or when hitting `Escape`.")
         },
         'editor.maxTokenizationLineLength': {
             type: 'integer',
             default: 20_000,
-            description: nls.localize('maxTokenizationLineLength', "Lines above this length will not be tokenized for performance reasons")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'maxTokenizationLineLength', "Lines above this length will not be tokenized for performance reasons")
         },
         'editor.experimental.asyncTokenization': {
             type: 'boolean',
             default: true,
-            description: nls.localize('editor.experimental.asyncTokenization', "Controls whether the tokenization should happen asynchronously on a web worker."),
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'editor.experimental.asyncTokenization', "Controls whether the tokenization should happen asynchronously on a web worker."),
             tags: ['experimental'],
         },
         'editor.experimental.asyncTokenizationLogging': {
             type: 'boolean',
             default: false,
-            description: nls.localize('editor.experimental.asyncTokenizationLogging', "Controls whether async tokenization should be logged. For debugging only."),
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'editor.experimental.asyncTokenizationLogging', "Controls whether async tokenization should be logged. For debugging only."),
         },
         'editor.experimental.asyncTokenizationVerification': {
             type: 'boolean',
             default: false,
-            description: nls.localize('editor.experimental.asyncTokenizationVerification', "Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only."),
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'editor.experimental.asyncTokenizationVerification', "Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only."),
             tags: ['experimental'],
         },
         'editor.experimental.treeSitterTelemetry': {
             type: 'boolean',
             default: false,
-            markdownDescription: nls.localize('editor.experimental.treeSitterTelemetry', "Controls whether tree sitter parsing should be turned on and telemetry collected. Setting `editor.experimental.preferTreeSitter` for specific languages will take precedence."),
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'editor.experimental.treeSitterTelemetry', "Controls whether tree sitter parsing should be turned on and telemetry collected. Setting `editor.experimental.preferTreeSitter` for specific languages will take precedence."),
             tags: ['experimental']
         },
         'editor.language.brackets': {
             type: ['array', 'null'],
             default: null, // We want to distinguish the empty array from not configured.
-            description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),
             items: {
                 type: 'array',
                 items: [
                     {
                         type: 'string',
-                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')
+                        description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'schema.openBracket', 'The opening bracket character or string sequence.')
                     },
                     {
                         type: 'string',
-                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')
+                        description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'schema.closeBracket', 'The closing bracket character or string sequence.')
                     }
                 ]
             }
@@ -133,17 +133,17 @@ const editorConfiguration = {
         'editor.language.colorizedBracketPairs': {
             type: ['array', 'null'],
             default: null, // We want to distinguish the empty array from not configured.
-            description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),
             items: {
                 type: 'array',
                 items: [
                     {
                         type: 'string',
-                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')
+                        description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'schema.openBracket', 'The opening bracket character or string sequence.')
                     },
                     {
                         type: 'string',
-                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')
+                        description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'schema.closeBracket', 'The closing bracket character or string sequence.')
                     }
                 ]
             }
@@ -151,61 +151,61 @@ const editorConfiguration = {
         'diffEditor.maxComputationTime': {
             type: 'number',
             default: diffEditorDefaultOptions.maxComputationTime,
-            description: nls.localize('maxComputationTime', "Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'maxComputationTime', "Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.")
         },
         'diffEditor.maxFileSize': {
             type: 'number',
             default: diffEditorDefaultOptions.maxFileSize,
-            description: nls.localize('maxFileSize', "Maximum file size in MB for which to compute diffs. Use 0 for no limit.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'maxFileSize', "Maximum file size in MB for which to compute diffs. Use 0 for no limit.")
         },
         'diffEditor.renderSideBySide': {
             type: 'boolean',
             default: diffEditorDefaultOptions.renderSideBySide,
-            description: nls.localize('sideBySide', "Controls whether the diff editor shows the diff side by side or inline.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'sideBySide', "Controls whether the diff editor shows the diff side by side or inline.")
         },
         'diffEditor.renderSideBySideInlineBreakpoint': {
             type: 'number',
             default: diffEditorDefaultOptions.renderSideBySideInlineBreakpoint,
-            description: nls.localize('renderSideBySideInlineBreakpoint', "If the diff editor width is smaller than this value, the inline view is used.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'renderSideBySideInlineBreakpoint', "If the diff editor width is smaller than this value, the inline view is used.")
         },
         'diffEditor.useInlineViewWhenSpaceIsLimited': {
             type: 'boolean',
             default: diffEditorDefaultOptions.useInlineViewWhenSpaceIsLimited,
-            description: nls.localize('useInlineViewWhenSpaceIsLimited', "If enabled and the editor width is too small, the inline view is used.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'useInlineViewWhenSpaceIsLimited', "If enabled and the editor width is too small, the inline view is used.")
         },
         'diffEditor.renderMarginRevertIcon': {
             type: 'boolean',
             default: diffEditorDefaultOptions.renderMarginRevertIcon,
-            description: nls.localize('renderMarginRevertIcon', "When enabled, the diff editor shows arrows in its glyph margin to revert changes.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'renderMarginRevertIcon', "When enabled, the diff editor shows arrows in its glyph margin to revert changes.")
         },
         'diffEditor.renderGutterMenu': {
             type: 'boolean',
             default: diffEditorDefaultOptions.renderGutterMenu,
-            description: nls.localize('renderGutterMenu', "When enabled, the diff editor shows a special gutter for revert and stage actions.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'renderGutterMenu', "When enabled, the diff editor shows a special gutter for revert and stage actions.")
         },
         'diffEditor.ignoreTrimWhitespace': {
             type: 'boolean',
             default: diffEditorDefaultOptions.ignoreTrimWhitespace,
-            description: nls.localize('ignoreTrimWhitespace', "When enabled, the diff editor ignores changes in leading or trailing whitespace.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'ignoreTrimWhitespace', "When enabled, the diff editor ignores changes in leading or trailing whitespace.")
         },
         'diffEditor.renderIndicators': {
             type: 'boolean',
             default: diffEditorDefaultOptions.renderIndicators,
-            description: nls.localize('renderIndicators', "Controls whether the diff editor shows +/- indicators for added/removed changes.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'renderIndicators', "Controls whether the diff editor shows +/- indicators for added/removed changes.")
         },
         'diffEditor.codeLens': {
             type: 'boolean',
             default: diffEditorDefaultOptions.diffCodeLens,
-            description: nls.localize('codeLens', "Controls whether the editor shows CodeLens.")
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'codeLens', "Controls whether the editor shows CodeLens.")
         },
         'diffEditor.wordWrap': {
             type: 'string',
             enum: ['off', 'on', 'inherit'],
             default: diffEditorDefaultOptions.diffWordWrap,
             markdownEnumDescriptions: [
-                nls.localize('wordWrap.off', "Lines will never wrap."),
-                nls.localize('wordWrap.on', "Lines will wrap at the viewport width."),
-                nls.localize('wordWrap.inherit', "Lines will wrap according to the {0} setting.", '`#editor.wordWrap#`'),
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'wordWrap.off', "Lines will never wrap."),
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'wordWrap.on', "Lines will wrap at the viewport width."),
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'wordWrap.inherit', "Lines will wrap according to the {0} setting.", '`#editor.wordWrap#`'),
             ]
         },
         'diffEditor.diffAlgorithm': {
@@ -213,48 +213,48 @@ const editorConfiguration = {
             enum: ['legacy', 'advanced'],
             default: diffEditorDefaultOptions.diffAlgorithm,
             markdownEnumDescriptions: [
-                nls.localize('diffAlgorithm.legacy', "Uses the legacy diffing algorithm."),
-                nls.localize('diffAlgorithm.advanced', "Uses the advanced diffing algorithm."),
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'diffAlgorithm.legacy', "Uses the legacy diffing algorithm."),
+                nls.localize('vs/editor/common/config/editorConfigurationSchema', 'diffAlgorithm.advanced', "Uses the advanced diffing algorithm."),
             ],
             tags: ['experimental'],
         },
         'diffEditor.hideUnchangedRegions.enabled': {
             type: 'boolean',
             default: diffEditorDefaultOptions.hideUnchangedRegions.enabled,
-            markdownDescription: nls.localize('hideUnchangedRegions.enabled', "Controls whether the diff editor shows unchanged regions."),
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'hideUnchangedRegions.enabled', "Controls whether the diff editor shows unchanged regions."),
         },
         'diffEditor.hideUnchangedRegions.revealLineCount': {
             type: 'integer',
             default: diffEditorDefaultOptions.hideUnchangedRegions.revealLineCount,
-            markdownDescription: nls.localize('hideUnchangedRegions.revealLineCount', "Controls how many lines are used for unchanged regions."),
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'hideUnchangedRegions.revealLineCount', "Controls how many lines are used for unchanged regions."),
             minimum: 1,
         },
         'diffEditor.hideUnchangedRegions.minimumLineCount': {
             type: 'integer',
             default: diffEditorDefaultOptions.hideUnchangedRegions.minimumLineCount,
-            markdownDescription: nls.localize('hideUnchangedRegions.minimumLineCount', "Controls how many lines are used as a minimum for unchanged regions."),
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'hideUnchangedRegions.minimumLineCount', "Controls how many lines are used as a minimum for unchanged regions."),
             minimum: 1,
         },
         'diffEditor.hideUnchangedRegions.contextLineCount': {
             type: 'integer',
             default: diffEditorDefaultOptions.hideUnchangedRegions.contextLineCount,
-            markdownDescription: nls.localize('hideUnchangedRegions.contextLineCount', "Controls how many lines are used as context when comparing unchanged regions."),
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'hideUnchangedRegions.contextLineCount', "Controls how many lines are used as context when comparing unchanged regions."),
             minimum: 1,
         },
         'diffEditor.experimental.showMoves': {
             type: 'boolean',
             default: diffEditorDefaultOptions.experimental.showMoves,
-            markdownDescription: nls.localize('showMoves', "Controls whether the diff editor should show detected code moves.")
+            markdownDescription: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'showMoves', "Controls whether the diff editor should show detected code moves.")
         },
         'diffEditor.experimental.showEmptyDecorations': {
             type: 'boolean',
             default: diffEditorDefaultOptions.experimental.showEmptyDecorations,
-            description: nls.localize('showEmptyDecorations', "Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted."),
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'showEmptyDecorations', "Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted."),
         },
         'diffEditor.experimental.useTrueInlineView': {
             type: 'boolean',
             default: diffEditorDefaultOptions.experimental.useTrueInlineView,
-            description: nls.localize('useTrueInlineView', "If enabled and the editor uses the inline view, word changes are rendered inline."),
+            description: nls.localize('vs/editor/common/config/editorConfigurationSchema', 'useTrueInlineView', "If enabled and the editor uses the inline view, word changes are rendered inline."),
         },
     }
 };
diff --git a/esm/vs/editor/common/config/editorOptions.js b/esm/vs/editor/common/config/editorOptions.js
index 78999bfe4736309e093f02476624b05b2cef74e9..da8fd8af196f578f2a56becc7b4b16a9243aa37e 100644
--- a/esm/vs/editor/common/config/editorOptions.js
+++ b/esm/vs/editor/common/config/editorOptions.js
@@ -306,13 +306,13 @@ class EditorAccessibilitySupport extends BaseEditorOption {
             type: 'string',
             enum: ['auto', 'on', 'off'],
             enumDescriptions: [
-                nls.localize('accessibilitySupport.auto', "Use platform APIs to detect when a Screen Reader is attached."),
-                nls.localize('accessibilitySupport.on', "Optimize for usage with a Screen Reader."),
-                nls.localize('accessibilitySupport.off', "Assume a screen reader is not attached."),
+                nls.localize('vs/editor/common/config/editorOptions', 'accessibilitySupport.auto', "Use platform APIs to detect when a Screen Reader is attached."),
+                nls.localize('vs/editor/common/config/editorOptions', 'accessibilitySupport.on', "Optimize for usage with a Screen Reader."),
+                nls.localize('vs/editor/common/config/editorOptions', 'accessibilitySupport.off', "Assume a screen reader is not attached."),
             ],
             default: 'auto',
             tags: ['accessibility'],
-            description: nls.localize('accessibilitySupport', "Controls if the UI should run in a mode where it is optimized for screen readers.")
+            description: nls.localize('vs/editor/common/config/editorOptions', 'accessibilitySupport', "Controls if the UI should run in a mode where it is optimized for screen readers.")
         });
     }
     validate(input) {
@@ -341,12 +341,12 @@ class EditorComments extends BaseEditorOption {
             'editor.comments.insertSpace': {
                 type: 'boolean',
                 default: defaults.insertSpace,
-                description: nls.localize('comments.insertSpace', "Controls whether a space character is inserted when commenting.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'comments.insertSpace', "Controls whether a space character is inserted when commenting.")
             },
             'editor.comments.ignoreEmptyLines': {
                 type: 'boolean',
                 default: defaults.ignoreEmptyLines,
-                description: nls.localize('comments.ignoreEmptyLines', 'Controls if empty lines should be ignored with toggle, add or remove actions for line comments.')
+                description: nls.localize('vs/editor/common/config/editorOptions', 'comments.ignoreEmptyLines', 'Controls if empty lines should be ignored with toggle, add or remove actions for line comments.')
             },
         });
     }
@@ -445,7 +445,7 @@ class EditorClassName extends ComputedEditorOption {
 //#region emptySelectionClipboard
 class EditorEmptySelectionClipboard extends EditorBooleanOption {
     constructor() {
-        super(37 /* EditorOption.emptySelectionClipboard */, 'emptySelectionClipboard', true, { description: nls.localize('emptySelectionClipboard', "Controls whether copying without a selection copies the current line.") });
+        super(37 /* EditorOption.emptySelectionClipboard */, 'emptySelectionClipboard', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'emptySelectionClipboard', "Controls whether copying without a selection copies the current line.") });
     }
     compute(env, options, value) {
         return value && env.emptySelectionClipboard;
@@ -465,45 +465,45 @@ class EditorFind extends BaseEditorOption {
             'editor.find.cursorMoveOnType': {
                 type: 'boolean',
                 default: defaults.cursorMoveOnType,
-                description: nls.localize('find.cursorMoveOnType', "Controls whether the cursor should jump to find matches while typing.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'find.cursorMoveOnType', "Controls whether the cursor should jump to find matches while typing.")
             },
             'editor.find.seedSearchStringFromSelection': {
                 type: 'string',
                 enum: ['never', 'always', 'selection'],
                 default: defaults.seedSearchStringFromSelection,
                 enumDescriptions: [
-                    nls.localize('editor.find.seedSearchStringFromSelection.never', 'Never seed search string from the editor selection.'),
-                    nls.localize('editor.find.seedSearchStringFromSelection.always', 'Always seed search string from the editor selection, including word at cursor position.'),
-                    nls.localize('editor.find.seedSearchStringFromSelection.selection', 'Only seed search string from the editor selection.')
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.find.seedSearchStringFromSelection.never', 'Never seed search string from the editor selection.'),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.find.seedSearchStringFromSelection.always', 'Always seed search string from the editor selection, including word at cursor position.'),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.find.seedSearchStringFromSelection.selection', 'Only seed search string from the editor selection.')
                 ],
-                description: nls.localize('find.seedSearchStringFromSelection', "Controls whether the search string in the Find Widget is seeded from the editor selection.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'find.seedSearchStringFromSelection', "Controls whether the search string in the Find Widget is seeded from the editor selection.")
             },
             'editor.find.autoFindInSelection': {
                 type: 'string',
                 enum: ['never', 'always', 'multiline'],
                 default: defaults.autoFindInSelection,
                 enumDescriptions: [
-                    nls.localize('editor.find.autoFindInSelection.never', 'Never turn on Find in Selection automatically (default).'),
-                    nls.localize('editor.find.autoFindInSelection.always', 'Always turn on Find in Selection automatically.'),
-                    nls.localize('editor.find.autoFindInSelection.multiline', 'Turn on Find in Selection automatically when multiple lines of content are selected.')
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.find.autoFindInSelection.never', 'Never turn on Find in Selection automatically (default).'),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.find.autoFindInSelection.always', 'Always turn on Find in Selection automatically.'),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.find.autoFindInSelection.multiline', 'Turn on Find in Selection automatically when multiple lines of content are selected.')
                 ],
-                description: nls.localize('find.autoFindInSelection', "Controls the condition for turning on Find in Selection automatically.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'find.autoFindInSelection', "Controls the condition for turning on Find in Selection automatically.")
             },
             'editor.find.globalFindClipboard': {
                 type: 'boolean',
                 default: defaults.globalFindClipboard,
-                description: nls.localize('find.globalFindClipboard', "Controls whether the Find Widget should read or modify the shared find clipboard on macOS."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'find.globalFindClipboard', "Controls whether the Find Widget should read or modify the shared find clipboard on macOS."),
                 included: platform.isMacintosh
             },
             'editor.find.addExtraSpaceOnTop': {
                 type: 'boolean',
                 default: defaults.addExtraSpaceOnTop,
-                description: nls.localize('find.addExtraSpaceOnTop', "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'find.addExtraSpaceOnTop', "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.")
             },
             'editor.find.loop': {
                 type: 'boolean',
                 default: defaults.loop,
-                description: nls.localize('find.loop', "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'find.loop', "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.")
             },
         });
     }
@@ -539,14 +539,14 @@ export class EditorFontLigatures extends BaseEditorOption {
             anyOf: [
                 {
                     type: 'boolean',
-                    description: nls.localize('fontLigatures', "Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property."),
+                    description: nls.localize('vs/editor/common/config/editorOptions', 'fontLigatures', "Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property."),
                 },
                 {
                     type: 'string',
-                    description: nls.localize('fontFeatureSettings', "Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.")
+                    description: nls.localize('vs/editor/common/config/editorOptions', 'fontFeatureSettings', "Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.")
                 }
             ],
-            description: nls.localize('fontLigaturesGeneral', "Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property."),
+            description: nls.localize('vs/editor/common/config/editorOptions', 'fontLigaturesGeneral', "Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property."),
             default: false
         });
     }
@@ -584,14 +584,14 @@ export class EditorFontVariations extends BaseEditorOption {
             anyOf: [
                 {
                     type: 'boolean',
-                    description: nls.localize('fontVariations', "Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the 'font-variation-settings' CSS property."),
+                    description: nls.localize('vs/editor/common/config/editorOptions', 'fontVariations', "Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the 'font-variation-settings' CSS property."),
                 },
                 {
                     type: 'string',
-                    description: nls.localize('fontVariationSettings', "Explicit 'font-variation-settings' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings.")
+                    description: nls.localize('vs/editor/common/config/editorOptions', 'fontVariationSettings', "Explicit 'font-variation-settings' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings.")
                 }
             ],
-            description: nls.localize('fontVariationsGeneral', "Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property."),
+            description: nls.localize('vs/editor/common/config/editorOptions', 'fontVariationsGeneral', "Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property."),
             default: false
         });
     }
@@ -638,7 +638,7 @@ class EditorFontSize extends SimpleEditorOption {
             minimum: 6,
             maximum: 100,
             default: EDITOR_FONT_DEFAULTS.fontSize,
-            description: nls.localize('fontSize', "Controls the font size in pixels.")
+            description: nls.localize('vs/editor/common/config/editorOptions', 'fontSize', "Controls the font size in pixels.")
         });
     }
     validate(input) {
@@ -667,7 +667,7 @@ class EditorFontWeight extends BaseEditorOption {
                     type: 'number',
                     minimum: EditorFontWeight.MINIMUM_VALUE,
                     maximum: EditorFontWeight.MAXIMUM_VALUE,
-                    errorMessage: nls.localize('fontWeightErrorMessage', "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed.")
+                    errorMessage: nls.localize('vs/editor/common/config/editorOptions', 'fontWeightErrorMessage', "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed.")
                 },
                 {
                     type: 'string',
@@ -678,7 +678,7 @@ class EditorFontWeight extends BaseEditorOption {
                 }
             ],
             default: EDITOR_FONT_DEFAULTS.fontWeight,
-            description: nls.localize('fontWeight', "Controls the font weight. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000.")
+            description: nls.localize('vs/editor/common/config/editorOptions', 'fontWeight', "Controls the font weight. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000.")
         });
     }
     validate(input) {
@@ -710,65 +710,65 @@ class EditorGoToLocation extends BaseEditorOption {
             enum: ['peek', 'gotoAndPeek', 'goto'],
             default: defaults.multiple,
             enumDescriptions: [
-                nls.localize('editor.gotoLocation.multiple.peek', 'Show Peek view of the results (default)'),
-                nls.localize('editor.gotoLocation.multiple.gotoAndPeek', 'Go to the primary result and show a Peek view'),
-                nls.localize('editor.gotoLocation.multiple.goto', 'Go to the primary result and enable Peek-less navigation to others')
+                nls.localize('vs/editor/common/config/editorOptions', 'editor.gotoLocation.multiple.peek', 'Show Peek view of the results (default)'),
+                nls.localize('vs/editor/common/config/editorOptions', 'editor.gotoLocation.multiple.gotoAndPeek', 'Go to the primary result and show a Peek view'),
+                nls.localize('vs/editor/common/config/editorOptions', 'editor.gotoLocation.multiple.goto', 'Go to the primary result and enable Peek-less navigation to others')
             ]
         };
         const alternativeCommandOptions = ['', 'editor.action.referenceSearch.trigger', 'editor.action.goToReferences', 'editor.action.peekImplementation', 'editor.action.goToImplementation', 'editor.action.peekTypeDefinition', 'editor.action.goToTypeDefinition', 'editor.action.peekDeclaration', 'editor.action.revealDeclaration', 'editor.action.peekDefinition', 'editor.action.revealDefinitionAside', 'editor.action.revealDefinition'];
         super(58 /* EditorOption.gotoLocation */, 'gotoLocation', defaults, {
             'editor.gotoLocation.multiple': {
-                deprecationMessage: nls.localize('editor.gotoLocation.multiple.deprecated', "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead."),
+                deprecationMessage: nls.localize('vs/editor/common/config/editorOptions', 'editor.gotoLocation.multiple.deprecated', "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead."),
             },
             'editor.gotoLocation.multipleDefinitions': {
-                description: nls.localize('editor.editor.gotoLocation.multipleDefinitions', "Controls the behavior the 'Go to Definition'-command when multiple target locations exist."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.editor.gotoLocation.multipleDefinitions', "Controls the behavior the 'Go to Definition'-command when multiple target locations exist."),
                 ...jsonSubset,
             },
             'editor.gotoLocation.multipleTypeDefinitions': {
-                description: nls.localize('editor.editor.gotoLocation.multipleTypeDefinitions', "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.editor.gotoLocation.multipleTypeDefinitions', "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist."),
                 ...jsonSubset,
             },
             'editor.gotoLocation.multipleDeclarations': {
-                description: nls.localize('editor.editor.gotoLocation.multipleDeclarations', "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.editor.gotoLocation.multipleDeclarations', "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist."),
                 ...jsonSubset,
             },
             'editor.gotoLocation.multipleImplementations': {
-                description: nls.localize('editor.editor.gotoLocation.multipleImplemenattions', "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.editor.gotoLocation.multipleImplemenattions', "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist."),
                 ...jsonSubset,
             },
             'editor.gotoLocation.multipleReferences': {
-                description: nls.localize('editor.editor.gotoLocation.multipleReferences', "Controls the behavior the 'Go to References'-command when multiple target locations exist."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.editor.gotoLocation.multipleReferences', "Controls the behavior the 'Go to References'-command when multiple target locations exist."),
                 ...jsonSubset,
             },
             'editor.gotoLocation.alternativeDefinitionCommand': {
                 type: 'string',
                 default: defaults.alternativeDefinitionCommand,
                 enum: alternativeCommandOptions,
-                description: nls.localize('alternativeDefinitionCommand', "Alternative command id that is being executed when the result of 'Go to Definition' is the current location.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'alternativeDefinitionCommand', "Alternative command id that is being executed when the result of 'Go to Definition' is the current location.")
             },
             'editor.gotoLocation.alternativeTypeDefinitionCommand': {
                 type: 'string',
                 default: defaults.alternativeTypeDefinitionCommand,
                 enum: alternativeCommandOptions,
-                description: nls.localize('alternativeTypeDefinitionCommand', "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'alternativeTypeDefinitionCommand', "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.")
             },
             'editor.gotoLocation.alternativeDeclarationCommand': {
                 type: 'string',
                 default: defaults.alternativeDeclarationCommand,
                 enum: alternativeCommandOptions,
-                description: nls.localize('alternativeDeclarationCommand', "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'alternativeDeclarationCommand', "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.")
             },
             'editor.gotoLocation.alternativeImplementationCommand': {
                 type: 'string',
                 default: defaults.alternativeImplementationCommand,
                 enum: alternativeCommandOptions,
-                description: nls.localize('alternativeImplementationCommand', "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'alternativeImplementationCommand', "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.")
             },
             'editor.gotoLocation.alternativeReferenceCommand': {
                 type: 'string',
                 default: defaults.alternativeReferenceCommand,
                 enum: alternativeCommandOptions,
-                description: nls.localize('alternativeReferenceCommand', "Alternative command id that is being executed when the result of 'Go to Reference' is the current location.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'alternativeReferenceCommand', "Alternative command id that is being executed when the result of 'Go to Reference' is the current location.")
             },
         });
     }
@@ -807,30 +807,30 @@ class EditorHover extends BaseEditorOption {
             'editor.hover.enabled': {
                 type: 'boolean',
                 default: defaults.enabled,
-                description: nls.localize('hover.enabled', "Controls whether the hover is shown.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'hover.enabled', "Controls whether the hover is shown.")
             },
             'editor.hover.delay': {
                 type: 'number',
                 default: defaults.delay,
                 minimum: 0,
                 maximum: 10000,
-                description: nls.localize('hover.delay', "Controls the delay in milliseconds after which the hover is shown.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'hover.delay', "Controls the delay in milliseconds after which the hover is shown.")
             },
             'editor.hover.sticky': {
                 type: 'boolean',
                 default: defaults.sticky,
-                description: nls.localize('hover.sticky', "Controls whether the hover should remain visible when mouse is moved over it.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'hover.sticky', "Controls whether the hover should remain visible when mouse is moved over it.")
             },
             'editor.hover.hidingDelay': {
                 type: 'integer',
                 minimum: 0,
                 default: defaults.hidingDelay,
-                description: nls.localize('hover.hidingDelay', "Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'hover.hidingDelay', "Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled.")
             },
             'editor.hover.above': {
                 type: 'boolean',
                 default: defaults.above,
-                description: nls.localize('hover.above', "Prefer showing hovers above the line, if there's space.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'hover.above', "Prefer showing hovers above the line, if there's space.")
             },
         });
     }
@@ -1170,13 +1170,13 @@ class WrappingStrategy extends BaseEditorOption {
         super(140 /* EditorOption.wrappingStrategy */, 'wrappingStrategy', 'simple', {
             'editor.wrappingStrategy': {
                 enumDescriptions: [
-                    nls.localize('wrappingStrategy.simple', "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width."),
-                    nls.localize('wrappingStrategy.advanced', "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.")
+                    nls.localize('vs/editor/common/config/editorOptions', 'wrappingStrategy.simple', "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'wrappingStrategy.advanced', "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.")
                 ],
                 type: 'string',
                 enum: ['simple', 'advanced'],
                 default: 'simple',
-                description: nls.localize('wrappingStrategy', "Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'wrappingStrategy', "Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.")
             }
         });
     }
@@ -1211,11 +1211,11 @@ class EditorLightbulb extends BaseEditorOption {
                 enum: [ShowLightbulbIconMode.Off, ShowLightbulbIconMode.OnCode, ShowLightbulbIconMode.On],
                 default: defaults.enabled,
                 enumDescriptions: [
-                    nls.localize('editor.lightbulb.enabled.off', 'Disable the code action menu.'),
-                    nls.localize('editor.lightbulb.enabled.onCode', 'Show the code action menu when the cursor is on lines with code.'),
-                    nls.localize('editor.lightbulb.enabled.on', 'Show the code action menu when the cursor is on lines with code or on empty lines.'),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.lightbulb.enabled.off', 'Disable the code action menu.'),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.lightbulb.enabled.onCode', 'Show the code action menu when the cursor is on lines with code.'),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.lightbulb.enabled.on', 'Show the code action menu when the cursor is on lines with code or on empty lines.'),
                 ],
-                description: nls.localize('enabled', "Enables the Code Action lightbulb in the editor.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'enabled', "Enables the Code Action lightbulb in the editor.")
             }
         });
     }
@@ -1236,7 +1236,7 @@ class EditorStickyScroll extends BaseEditorOption {
             'editor.stickyScroll.enabled': {
                 type: 'boolean',
                 default: defaults.enabled,
-                description: nls.localize('editor.stickyScroll.enabled', "Shows the nested current scopes during the scroll at the top of the editor."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.stickyScroll.enabled', "Shows the nested current scopes during the scroll at the top of the editor."),
                 tags: ['experimental']
             },
             'editor.stickyScroll.maxLineCount': {
@@ -1244,18 +1244,18 @@ class EditorStickyScroll extends BaseEditorOption {
                 default: defaults.maxLineCount,
                 minimum: 1,
                 maximum: 20,
-                description: nls.localize('editor.stickyScroll.maxLineCount', "Defines the maximum number of sticky lines to show.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.stickyScroll.maxLineCount', "Defines the maximum number of sticky lines to show.")
             },
             'editor.stickyScroll.defaultModel': {
                 type: 'string',
                 enum: ['outlineModel', 'foldingProviderModel', 'indentationModel'],
                 default: defaults.defaultModel,
-                description: nls.localize('editor.stickyScroll.defaultModel', "Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.stickyScroll.defaultModel', "Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.")
             },
             'editor.stickyScroll.scrollWithEditor': {
                 type: 'boolean',
                 default: defaults.scrollWithEditor,
-                description: nls.localize('editor.stickyScroll.scrollWithEditor', "Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.stickyScroll.scrollWithEditor', "Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar.")
             },
         });
     }
@@ -1279,29 +1279,29 @@ class EditorInlayHints extends BaseEditorOption {
             'editor.inlayHints.enabled': {
                 type: 'string',
                 default: defaults.enabled,
-                description: nls.localize('inlayHints.enable', "Enables the inlay hints in the editor."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'inlayHints.enable', "Enables the inlay hints in the editor."),
                 enum: ['on', 'onUnlessPressed', 'offUnlessPressed', 'off'],
                 markdownEnumDescriptions: [
-                    nls.localize('editor.inlayHints.on', "Inlay hints are enabled"),
-                    nls.localize('editor.inlayHints.onUnlessPressed', "Inlay hints are showing by default and hide when holding {0}", platform.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`),
-                    nls.localize('editor.inlayHints.offUnlessPressed', "Inlay hints are hidden by default and show when holding {0}", platform.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`),
-                    nls.localize('editor.inlayHints.off', "Inlay hints are disabled"),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.inlayHints.on', "Inlay hints are enabled"),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.inlayHints.onUnlessPressed', "Inlay hints are showing by default and hide when holding {0}", platform.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.inlayHints.offUnlessPressed', "Inlay hints are hidden by default and show when holding {0}", platform.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.inlayHints.off', "Inlay hints are disabled"),
                 ],
             },
             'editor.inlayHints.fontSize': {
                 type: 'number',
                 default: defaults.fontSize,
-                markdownDescription: nls.localize('inlayHints.fontSize', "Controls font size of inlay hints in the editor. As default the {0} is used when the configured value is less than {1} or greater than the editor font size.", '`#editor.fontSize#`', '`5`')
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'inlayHints.fontSize', "Controls font size of inlay hints in the editor. As default the {0} is used when the configured value is less than {1} or greater than the editor font size.", '`#editor.fontSize#`', '`5`')
             },
             'editor.inlayHints.fontFamily': {
                 type: 'string',
                 default: defaults.fontFamily,
-                markdownDescription: nls.localize('inlayHints.fontFamily', "Controls font family of inlay hints in the editor. When set to empty, the {0} is used.", '`#editor.fontFamily#`')
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'inlayHints.fontFamily', "Controls font family of inlay hints in the editor. When set to empty, the {0} is used.", '`#editor.fontFamily#`')
             },
             'editor.inlayHints.padding': {
                 type: 'boolean',
                 default: defaults.padding,
-                description: nls.localize('inlayHints.padding', "Enables the padding around the inlay hints in the editor.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'inlayHints.padding', "Enables the padding around the inlay hints in the editor.")
             }
         });
     }
@@ -1350,7 +1350,7 @@ class EditorLineDecorationsWidth extends BaseEditorOption {
 //#region lineHeight
 class EditorLineHeight extends EditorFloatOption {
     constructor() {
-        super(67 /* EditorOption.lineHeight */, 'lineHeight', EDITOR_FONT_DEFAULTS.lineHeight, x => EditorFloatOption.clamp(x, 0, 150), { markdownDescription: nls.localize('lineHeight', "Controls the line height. \n - Use 0 to automatically compute the line height from the font size.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values.") });
+        super(67 /* EditorOption.lineHeight */, 'lineHeight', EDITOR_FONT_DEFAULTS.lineHeight, x => EditorFloatOption.clamp(x, 0, 150), { markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'lineHeight', "Controls the line height. \n - Use 0 to automatically compute the line height from the font size.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values.") });
     }
     compute(env, options, value) {
         // The lineHeight is computed from the fontSize if it is 0.
@@ -1379,35 +1379,35 @@ class EditorMinimap extends BaseEditorOption {
             'editor.minimap.enabled': {
                 type: 'boolean',
                 default: defaults.enabled,
-                description: nls.localize('minimap.enabled', "Controls whether the minimap is shown.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.enabled', "Controls whether the minimap is shown.")
             },
             'editor.minimap.autohide': {
                 type: 'boolean',
                 default: defaults.autohide,
-                description: nls.localize('minimap.autohide', "Controls whether the minimap is hidden automatically.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.autohide', "Controls whether the minimap is hidden automatically.")
             },
             'editor.minimap.size': {
                 type: 'string',
                 enum: ['proportional', 'fill', 'fit'],
                 enumDescriptions: [
-                    nls.localize('minimap.size.proportional', "The minimap has the same size as the editor contents (and might scroll)."),
-                    nls.localize('minimap.size.fill', "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling)."),
-                    nls.localize('minimap.size.fit', "The minimap will shrink as necessary to never be larger than the editor (no scrolling)."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'minimap.size.proportional', "The minimap has the same size as the editor contents (and might scroll)."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'minimap.size.fill', "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling)."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'minimap.size.fit', "The minimap will shrink as necessary to never be larger than the editor (no scrolling)."),
                 ],
                 default: defaults.size,
-                description: nls.localize('minimap.size', "Controls the size of the minimap.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.size', "Controls the size of the minimap.")
             },
             'editor.minimap.side': {
                 type: 'string',
                 enum: ['left', 'right'],
                 default: defaults.side,
-                description: nls.localize('minimap.side', "Controls the side where to render the minimap.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.side', "Controls the side where to render the minimap.")
             },
             'editor.minimap.showSlider': {
                 type: 'string',
                 enum: ['always', 'mouseover'],
                 default: defaults.showSlider,
-                description: nls.localize('minimap.showSlider', "Controls when the minimap slider is shown.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.showSlider', "Controls when the minimap slider is shown.")
             },
             'editor.minimap.scale': {
                 type: 'number',
@@ -1415,37 +1415,37 @@ class EditorMinimap extends BaseEditorOption {
                 minimum: 1,
                 maximum: 3,
                 enum: [1, 2, 3],
-                description: nls.localize('minimap.scale', "Scale of content drawn in the minimap: 1, 2 or 3.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.scale', "Scale of content drawn in the minimap: 1, 2 or 3.")
             },
             'editor.minimap.renderCharacters': {
                 type: 'boolean',
                 default: defaults.renderCharacters,
-                description: nls.localize('minimap.renderCharacters', "Render the actual characters on a line as opposed to color blocks.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.renderCharacters', "Render the actual characters on a line as opposed to color blocks.")
             },
             'editor.minimap.maxColumn': {
                 type: 'number',
                 default: defaults.maxColumn,
-                description: nls.localize('minimap.maxColumn', "Limit the width of the minimap to render at most a certain number of columns.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.maxColumn', "Limit the width of the minimap to render at most a certain number of columns.")
             },
             'editor.minimap.showRegionSectionHeaders': {
                 type: 'boolean',
                 default: defaults.showRegionSectionHeaders,
-                description: nls.localize('minimap.showRegionSectionHeaders', "Controls whether named regions are shown as section headers in the minimap.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.showRegionSectionHeaders', "Controls whether named regions are shown as section headers in the minimap.")
             },
             'editor.minimap.showMarkSectionHeaders': {
                 type: 'boolean',
                 default: defaults.showMarkSectionHeaders,
-                description: nls.localize('minimap.showMarkSectionHeaders', "Controls whether MARK: comments are shown as section headers in the minimap.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.showMarkSectionHeaders', "Controls whether MARK: comments are shown as section headers in the minimap.")
             },
             'editor.minimap.sectionHeaderFontSize': {
                 type: 'number',
                 default: defaults.sectionHeaderFontSize,
-                description: nls.localize('minimap.sectionHeaderFontSize', "Controls the font size of section headers in the minimap.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.sectionHeaderFontSize', "Controls the font size of section headers in the minimap.")
             },
             'editor.minimap.sectionHeaderLetterSpacing': {
                 type: 'number',
                 default: defaults.sectionHeaderLetterSpacing,
-                description: nls.localize('minimap.sectionHeaderLetterSpacing', "Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'minimap.sectionHeaderLetterSpacing', "Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes.")
             }
         });
     }
@@ -1486,14 +1486,14 @@ class EditorPadding extends BaseEditorOption {
                 default: 0,
                 minimum: 0,
                 maximum: 1000,
-                description: nls.localize('padding.top', "Controls the amount of space between the top edge of the editor and the first line.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'padding.top', "Controls the amount of space between the top edge of the editor and the first line.")
             },
             'editor.padding.bottom': {
                 type: 'number',
                 default: 0,
                 minimum: 0,
                 maximum: 1000,
-                description: nls.localize('padding.bottom', "Controls the amount of space between the bottom edge of the editor and the last line.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'padding.bottom', "Controls the amount of space between the bottom edge of the editor and the last line.")
             }
         });
     }
@@ -1518,12 +1518,12 @@ class EditorParameterHints extends BaseEditorOption {
             'editor.parameterHints.enabled': {
                 type: 'boolean',
                 default: defaults.enabled,
-                description: nls.localize('parameterHints.enabled', "Enables a pop-up that shows parameter documentation and type information as you type.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'parameterHints.enabled', "Enables a pop-up that shows parameter documentation and type information as you type.")
             },
             'editor.parameterHints.cycle': {
                 type: 'boolean',
                 default: defaults.cycle,
-                description: nls.localize('parameterHints.cycle', "Controls whether the parameter hints menu cycles or closes when reaching the end of the list.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'parameterHints.cycle', "Controls whether the parameter hints menu cycles or closes when reaching the end of the list.")
             },
         });
     }
@@ -1576,7 +1576,7 @@ class EditorQuickSuggestions extends BaseEditorOption {
             {
                 type: 'string',
                 enum: ['on', 'inline', 'off'],
-                enumDescriptions: [nls.localize('on', "Quick suggestions show inside the suggest widget"), nls.localize('inline', "Quick suggestions show as ghost text"), nls.localize('off', "Quick suggestions are disabled")]
+                enumDescriptions: [nls.localize('vs/editor/common/config/editorOptions', 'on', "Quick suggestions show inside the suggest widget"), nls.localize('vs/editor/common/config/editorOptions', 'inline', "Quick suggestions show as ghost text"), nls.localize('vs/editor/common/config/editorOptions', 'off', "Quick suggestions are disabled")]
             }
         ];
         super(90 /* EditorOption.quickSuggestions */, 'quickSuggestions', defaults, {
@@ -1586,21 +1586,21 @@ class EditorQuickSuggestions extends BaseEditorOption {
                 strings: {
                     anyOf: types,
                     default: defaults.strings,
-                    description: nls.localize('quickSuggestions.strings', "Enable quick suggestions inside strings.")
+                    description: nls.localize('vs/editor/common/config/editorOptions', 'quickSuggestions.strings', "Enable quick suggestions inside strings.")
                 },
                 comments: {
                     anyOf: types,
                     default: defaults.comments,
-                    description: nls.localize('quickSuggestions.comments', "Enable quick suggestions inside comments.")
+                    description: nls.localize('vs/editor/common/config/editorOptions', 'quickSuggestions.comments', "Enable quick suggestions inside comments.")
                 },
                 other: {
                     anyOf: types,
                     default: defaults.other,
-                    description: nls.localize('quickSuggestions.other', "Enable quick suggestions outside of strings and comments.")
+                    description: nls.localize('vs/editor/common/config/editorOptions', 'quickSuggestions.other', "Enable quick suggestions outside of strings and comments.")
                 },
             },
             default: defaults,
-            markdownDescription: nls.localize('quickSuggestions', "Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the {0}-setting which controls if suggestions are triggered by special characters.", '`#editor.suggestOnTriggerCharacters#`')
+            markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'quickSuggestions', "Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the {0}-setting which controls if suggestions are triggered by special characters.", '`#editor.suggestOnTriggerCharacters#`')
         });
         this.defaultValue = defaults;
     }
@@ -1650,13 +1650,13 @@ class EditorRenderLineNumbersOption extends BaseEditorOption {
             type: 'string',
             enum: ['off', 'on', 'relative', 'interval'],
             enumDescriptions: [
-                nls.localize('lineNumbers.off', "Line numbers are not rendered."),
-                nls.localize('lineNumbers.on', "Line numbers are rendered as absolute number."),
-                nls.localize('lineNumbers.relative', "Line numbers are rendered as distance in lines to cursor position."),
-                nls.localize('lineNumbers.interval', "Line numbers are rendered every 10 lines.")
+                nls.localize('vs/editor/common/config/editorOptions', 'lineNumbers.off', "Line numbers are not rendered."),
+                nls.localize('vs/editor/common/config/editorOptions', 'lineNumbers.on', "Line numbers are rendered as absolute number."),
+                nls.localize('vs/editor/common/config/editorOptions', 'lineNumbers.relative', "Line numbers are rendered as distance in lines to cursor position."),
+                nls.localize('vs/editor/common/config/editorOptions', 'lineNumbers.interval', "Line numbers are rendered every 10 lines.")
             ],
             default: 'on',
-            description: nls.localize('lineNumbers', "Controls the display of line numbers.")
+            description: nls.localize('vs/editor/common/config/editorOptions', 'lineNumbers', "Controls the display of line numbers.")
         });
     }
     validate(lineNumbers) {
@@ -1701,7 +1701,7 @@ export function filterValidationDecorations(options) {
 class EditorRulers extends BaseEditorOption {
     constructor() {
         const defaults = [];
-        const columnSchema = { type: 'number', description: nls.localize('rulers.size', "Number of monospace characters at which this editor ruler will render.") };
+        const columnSchema = { type: 'number', description: nls.localize('vs/editor/common/config/editorOptions', 'rulers.size', "Number of monospace characters at which this editor ruler will render.") };
         super(103 /* EditorOption.rulers */, 'rulers', defaults, {
             type: 'array',
             items: {
@@ -1715,7 +1715,7 @@ class EditorRulers extends BaseEditorOption {
                             column: columnSchema,
                             color: {
                                 type: 'string',
-                                description: nls.localize('rulers.color', "Color of this editor ruler."),
+                                description: nls.localize('vs/editor/common/config/editorOptions', 'rulers.color', "Color of this editor ruler."),
                                 format: 'color-hex'
                             }
                         }
@@ -1723,7 +1723,7 @@ class EditorRulers extends BaseEditorOption {
                 ]
             },
             default: defaults,
-            description: nls.localize('rulers', "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.")
+            description: nls.localize('vs/editor/common/config/editorOptions', 'rulers', "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.")
         });
     }
     validate(input) {
@@ -1800,43 +1800,43 @@ class EditorScrollbar extends BaseEditorOption {
                 type: 'string',
                 enum: ['auto', 'visible', 'hidden'],
                 enumDescriptions: [
-                    nls.localize('scrollbar.vertical.auto', "The vertical scrollbar will be visible only when necessary."),
-                    nls.localize('scrollbar.vertical.visible', "The vertical scrollbar will always be visible."),
-                    nls.localize('scrollbar.vertical.fit', "The vertical scrollbar will always be hidden."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.vertical.auto', "The vertical scrollbar will be visible only when necessary."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.vertical.visible', "The vertical scrollbar will always be visible."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.vertical.fit', "The vertical scrollbar will always be hidden."),
                 ],
                 default: 'auto',
-                description: nls.localize('scrollbar.vertical', "Controls the visibility of the vertical scrollbar.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.vertical', "Controls the visibility of the vertical scrollbar.")
             },
             'editor.scrollbar.horizontal': {
                 type: 'string',
                 enum: ['auto', 'visible', 'hidden'],
                 enumDescriptions: [
-                    nls.localize('scrollbar.horizontal.auto', "The horizontal scrollbar will be visible only when necessary."),
-                    nls.localize('scrollbar.horizontal.visible', "The horizontal scrollbar will always be visible."),
-                    nls.localize('scrollbar.horizontal.fit', "The horizontal scrollbar will always be hidden."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.horizontal.auto', "The horizontal scrollbar will be visible only when necessary."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.horizontal.visible', "The horizontal scrollbar will always be visible."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.horizontal.fit', "The horizontal scrollbar will always be hidden."),
                 ],
                 default: 'auto',
-                description: nls.localize('scrollbar.horizontal', "Controls the visibility of the horizontal scrollbar.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.horizontal', "Controls the visibility of the horizontal scrollbar.")
             },
             'editor.scrollbar.verticalScrollbarSize': {
                 type: 'number',
                 default: defaults.verticalScrollbarSize,
-                description: nls.localize('scrollbar.verticalScrollbarSize', "The width of the vertical scrollbar.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.verticalScrollbarSize', "The width of the vertical scrollbar.")
             },
             'editor.scrollbar.horizontalScrollbarSize': {
                 type: 'number',
                 default: defaults.horizontalScrollbarSize,
-                description: nls.localize('scrollbar.horizontalScrollbarSize', "The height of the horizontal scrollbar.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.horizontalScrollbarSize', "The height of the horizontal scrollbar.")
             },
             'editor.scrollbar.scrollByPage': {
                 type: 'boolean',
                 default: defaults.scrollByPage,
-                description: nls.localize('scrollbar.scrollByPage', "Controls whether clicks scroll by page or jump to click position.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.scrollByPage', "Controls whether clicks scroll by page or jump to click position.")
             },
             'editor.scrollbar.ignoreHorizontalScrollbarInContentHeight': {
                 type: 'boolean',
                 default: defaults.ignoreHorizontalScrollbarInContentHeight,
-                description: nls.localize('scrollbar.ignoreHorizontalScrollbarInContentHeight', "When set, the horizontal scrollbar will not increase the size of the editor's content.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'scrollbar.ignoreHorizontalScrollbarInContentHeight', "When set, the horizontal scrollbar will not increase the size of the editor's content.")
             }
         });
     }
@@ -1898,39 +1898,39 @@ class UnicodeHighlight extends BaseEditorOption {
                 type: ['boolean', 'string'],
                 enum: [true, false, inUntrustedWorkspace],
                 default: defaults.nonBasicASCII,
-                description: nls.localize('unicodeHighlight.nonBasicASCII', "Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'unicodeHighlight.nonBasicASCII', "Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.")
             },
             [unicodeHighlightConfigKeys.invisibleCharacters]: {
                 restricted: true,
                 type: 'boolean',
                 default: defaults.invisibleCharacters,
-                description: nls.localize('unicodeHighlight.invisibleCharacters', "Controls whether characters that just reserve space or have no width at all are highlighted.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'unicodeHighlight.invisibleCharacters', "Controls whether characters that just reserve space or have no width at all are highlighted.")
             },
             [unicodeHighlightConfigKeys.ambiguousCharacters]: {
                 restricted: true,
                 type: 'boolean',
                 default: defaults.ambiguousCharacters,
-                description: nls.localize('unicodeHighlight.ambiguousCharacters', "Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'unicodeHighlight.ambiguousCharacters', "Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.")
             },
             [unicodeHighlightConfigKeys.includeComments]: {
                 restricted: true,
                 type: ['boolean', 'string'],
                 enum: [true, false, inUntrustedWorkspace],
                 default: defaults.includeComments,
-                description: nls.localize('unicodeHighlight.includeComments', "Controls whether characters in comments should also be subject to Unicode highlighting.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'unicodeHighlight.includeComments', "Controls whether characters in comments should also be subject to Unicode highlighting.")
             },
             [unicodeHighlightConfigKeys.includeStrings]: {
                 restricted: true,
                 type: ['boolean', 'string'],
                 enum: [true, false, inUntrustedWorkspace],
                 default: defaults.includeStrings,
-                description: nls.localize('unicodeHighlight.includeStrings', "Controls whether characters in strings should also be subject to Unicode highlighting.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'unicodeHighlight.includeStrings', "Controls whether characters in strings should also be subject to Unicode highlighting.")
             },
             [unicodeHighlightConfigKeys.allowedCharacters]: {
                 restricted: true,
                 type: 'object',
                 default: defaults.allowedCharacters,
-                description: nls.localize('unicodeHighlight.allowedCharacters', "Defines allowed characters that are not being highlighted."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'unicodeHighlight.allowedCharacters', "Defines allowed characters that are not being highlighted."),
                 additionalProperties: {
                     type: 'boolean'
                 }
@@ -1942,7 +1942,7 @@ class UnicodeHighlight extends BaseEditorOption {
                     type: 'boolean'
                 },
                 default: defaults.allowedLocales,
-                description: nls.localize('unicodeHighlight.allowedLocales', "Unicode characters that are common in allowed locales are not being highlighted.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'unicodeHighlight.allowedLocales', "Unicode characters that are common in allowed locales are not being highlighted.")
             },
         });
     }
@@ -2013,28 +2013,28 @@ class InlineEditorSuggest extends BaseEditorOption {
             'editor.inlineSuggest.enabled': {
                 type: 'boolean',
                 default: defaults.enabled,
-                description: nls.localize('inlineSuggest.enabled', "Controls whether to automatically show inline suggestions in the editor.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'inlineSuggest.enabled', "Controls whether to automatically show inline suggestions in the editor.")
             },
             'editor.inlineSuggest.showToolbar': {
                 type: 'string',
                 default: defaults.showToolbar,
                 enum: ['always', 'onHover', 'never'],
                 enumDescriptions: [
-                    nls.localize('inlineSuggest.showToolbar.always', "Show the inline suggestion toolbar whenever an inline suggestion is shown."),
-                    nls.localize('inlineSuggest.showToolbar.onHover', "Show the inline suggestion toolbar when hovering over an inline suggestion."),
-                    nls.localize('inlineSuggest.showToolbar.never', "Never show the inline suggestion toolbar."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'inlineSuggest.showToolbar.always', "Show the inline suggestion toolbar whenever an inline suggestion is shown."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'inlineSuggest.showToolbar.onHover', "Show the inline suggestion toolbar when hovering over an inline suggestion."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'inlineSuggest.showToolbar.never', "Never show the inline suggestion toolbar."),
                 ],
-                description: nls.localize('inlineSuggest.showToolbar', "Controls when to show the inline suggestion toolbar."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'inlineSuggest.showToolbar', "Controls when to show the inline suggestion toolbar."),
             },
             'editor.inlineSuggest.suppressSuggestions': {
                 type: 'boolean',
                 default: defaults.suppressSuggestions,
-                description: nls.localize('inlineSuggest.suppressSuggestions', "Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'inlineSuggest.suppressSuggestions', "Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.")
             },
             'editor.inlineSuggest.fontFamily': {
                 type: 'string',
                 default: defaults.fontFamily,
-                description: nls.localize('inlineSuggest.fontFamily', "Controls the font family of the inline suggestions.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'inlineSuggest.fontFamily', "Controls the font family of the inline suggestions.")
             },
         });
     }
@@ -2065,23 +2065,23 @@ class InlineEditorEdit extends BaseEditorOption {
             'editor.experimentalInlineEdit.enabled': {
                 type: 'boolean',
                 default: defaults.enabled,
-                description: nls.localize('inlineEdit.enabled', "Controls whether to show inline edits in the editor.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'inlineEdit.enabled', "Controls whether to show inline edits in the editor.")
             },
             'editor.experimentalInlineEdit.showToolbar': {
                 type: 'string',
                 default: defaults.showToolbar,
                 enum: ['always', 'onHover', 'never'],
                 enumDescriptions: [
-                    nls.localize('inlineEdit.showToolbar.always', "Show the inline edit toolbar whenever an inline suggestion is shown."),
-                    nls.localize('inlineEdit.showToolbar.onHover', "Show the inline edit toolbar when hovering over an inline suggestion."),
-                    nls.localize('inlineEdit.showToolbar.never', "Never show the inline edit toolbar."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'inlineEdit.showToolbar.always', "Show the inline edit toolbar whenever an inline suggestion is shown."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'inlineEdit.showToolbar.onHover', "Show the inline edit toolbar when hovering over an inline suggestion."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'inlineEdit.showToolbar.never', "Never show the inline edit toolbar."),
                 ],
-                description: nls.localize('inlineEdit.showToolbar', "Controls when to show the inline edit toolbar."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'inlineEdit.showToolbar', "Controls when to show the inline edit toolbar."),
             },
             'editor.experimentalInlineEdit.fontFamily': {
                 type: 'string',
                 default: defaults.fontFamily,
-                description: nls.localize('inlineEdit.fontFamily', "Controls the font family of the inline edit.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'inlineEdit.fontFamily', "Controls the font family of the inline edit.")
             },
         });
     }
@@ -2111,12 +2111,12 @@ class BracketPairColorization extends BaseEditorOption {
             'editor.bracketPairColorization.enabled': {
                 type: 'boolean',
                 default: defaults.enabled,
-                markdownDescription: nls.localize('bracketPairColorization.enabled', "Controls whether bracket pair colorization is enabled or not. Use {0} to override the bracket highlight colors.", '`#workbench.colorCustomizations#`')
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'bracketPairColorization.enabled', "Controls whether bracket pair colorization is enabled or not. Use {0} to override the bracket highlight colors.", '`#workbench.colorCustomizations#`')
             },
             'editor.bracketPairColorization.independentColorPoolPerBracketType': {
                 type: 'boolean',
                 default: defaults.independentColorPoolPerBracketType,
-                description: nls.localize('bracketPairColorization.independentColorPoolPerBracketType', "Controls whether each bracket type has its own independent color pool.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'bracketPairColorization.independentColorPoolPerBracketType', "Controls whether each bracket type has its own independent color pool.")
             },
         });
     }
@@ -2148,44 +2148,44 @@ class GuideOptions extends BaseEditorOption {
                 type: ['boolean', 'string'],
                 enum: [true, 'active', false],
                 enumDescriptions: [
-                    nls.localize('editor.guides.bracketPairs.true', "Enables bracket pair guides."),
-                    nls.localize('editor.guides.bracketPairs.active', "Enables bracket pair guides only for the active bracket pair."),
-                    nls.localize('editor.guides.bracketPairs.false', "Disables bracket pair guides."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.bracketPairs.true', "Enables bracket pair guides."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.bracketPairs.active', "Enables bracket pair guides only for the active bracket pair."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.bracketPairs.false', "Disables bracket pair guides."),
                 ],
                 default: defaults.bracketPairs,
-                description: nls.localize('editor.guides.bracketPairs', "Controls whether bracket pair guides are enabled or not.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.bracketPairs', "Controls whether bracket pair guides are enabled or not.")
             },
             'editor.guides.bracketPairsHorizontal': {
                 type: ['boolean', 'string'],
                 enum: [true, 'active', false],
                 enumDescriptions: [
-                    nls.localize('editor.guides.bracketPairsHorizontal.true', "Enables horizontal guides as addition to vertical bracket pair guides."),
-                    nls.localize('editor.guides.bracketPairsHorizontal.active', "Enables horizontal guides only for the active bracket pair."),
-                    nls.localize('editor.guides.bracketPairsHorizontal.false', "Disables horizontal bracket pair guides."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.bracketPairsHorizontal.true', "Enables horizontal guides as addition to vertical bracket pair guides."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.bracketPairsHorizontal.active', "Enables horizontal guides only for the active bracket pair."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.bracketPairsHorizontal.false', "Disables horizontal bracket pair guides."),
                 ],
                 default: defaults.bracketPairsHorizontal,
-                description: nls.localize('editor.guides.bracketPairsHorizontal', "Controls whether horizontal bracket pair guides are enabled or not.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.bracketPairsHorizontal', "Controls whether horizontal bracket pair guides are enabled or not.")
             },
             'editor.guides.highlightActiveBracketPair': {
                 type: 'boolean',
                 default: defaults.highlightActiveBracketPair,
-                description: nls.localize('editor.guides.highlightActiveBracketPair', "Controls whether the editor should highlight the active bracket pair.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.highlightActiveBracketPair', "Controls whether the editor should highlight the active bracket pair.")
             },
             'editor.guides.indentation': {
                 type: 'boolean',
                 default: defaults.indentation,
-                description: nls.localize('editor.guides.indentation', "Controls whether the editor should render indent guides.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.indentation', "Controls whether the editor should render indent guides.")
             },
             'editor.guides.highlightActiveIndentation': {
                 type: ['boolean', 'string'],
                 enum: [true, 'always', false],
                 enumDescriptions: [
-                    nls.localize('editor.guides.highlightActiveIndentation.true', "Highlights the active indent guide."),
-                    nls.localize('editor.guides.highlightActiveIndentation.always', "Highlights the active indent guide even if bracket guides are highlighted."),
-                    nls.localize('editor.guides.highlightActiveIndentation.false', "Do not highlight the active indent guide."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.highlightActiveIndentation.true', "Highlights the active indent guide."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.highlightActiveIndentation.always', "Highlights the active indent guide even if bracket guides are highlighted."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.highlightActiveIndentation.false', "Do not highlight the active indent guide."),
                 ],
                 default: defaults.highlightActiveIndentation,
-                description: nls.localize('editor.guides.highlightActiveIndentation', "Controls whether the editor should highlight the active indent guide.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'editor.guides.highlightActiveIndentation', "Controls whether the editor should highlight the active indent guide.")
             }
         });
     }
@@ -2259,221 +2259,221 @@ class EditorSuggest extends BaseEditorOption {
                 type: 'string',
                 enum: ['insert', 'replace'],
                 enumDescriptions: [
-                    nls.localize('suggest.insertMode.insert', "Insert suggestion without overwriting text right of the cursor."),
-                    nls.localize('suggest.insertMode.replace', "Insert suggestion and overwrite text right of the cursor."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'suggest.insertMode.insert', "Insert suggestion without overwriting text right of the cursor."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'suggest.insertMode.replace', "Insert suggestion and overwrite text right of the cursor."),
                 ],
                 default: defaults.insertMode,
-                description: nls.localize('suggest.insertMode', "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'suggest.insertMode', "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.")
             },
             'editor.suggest.filterGraceful': {
                 type: 'boolean',
                 default: defaults.filterGraceful,
-                description: nls.localize('suggest.filterGraceful', "Controls whether filtering and sorting suggestions accounts for small typos.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'suggest.filterGraceful', "Controls whether filtering and sorting suggestions accounts for small typos.")
             },
             'editor.suggest.localityBonus': {
                 type: 'boolean',
                 default: defaults.localityBonus,
-                description: nls.localize('suggest.localityBonus', "Controls whether sorting favors words that appear close to the cursor.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'suggest.localityBonus', "Controls whether sorting favors words that appear close to the cursor.")
             },
             'editor.suggest.shareSuggestSelections': {
                 type: 'boolean',
                 default: defaults.shareSuggestSelections,
-                markdownDescription: nls.localize('suggest.shareSuggestSelections', "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'suggest.shareSuggestSelections', "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).")
             },
             'editor.suggest.selectionMode': {
                 type: 'string',
                 enum: ['always', 'never', 'whenTriggerCharacter', 'whenQuickSuggestion'],
                 enumDescriptions: [
-                    nls.localize('suggest.insertMode.always', "Always select a suggestion when automatically triggering IntelliSense."),
-                    nls.localize('suggest.insertMode.never', "Never select a suggestion when automatically triggering IntelliSense."),
-                    nls.localize('suggest.insertMode.whenTriggerCharacter', "Select a suggestion only when triggering IntelliSense from a trigger character."),
-                    nls.localize('suggest.insertMode.whenQuickSuggestion', "Select a suggestion only when triggering IntelliSense as you type."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'suggest.insertMode.always', "Always select a suggestion when automatically triggering IntelliSense."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'suggest.insertMode.never', "Never select a suggestion when automatically triggering IntelliSense."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'suggest.insertMode.whenTriggerCharacter', "Select a suggestion only when triggering IntelliSense from a trigger character."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'suggest.insertMode.whenQuickSuggestion', "Select a suggestion only when triggering IntelliSense as you type."),
                 ],
                 default: defaults.selectionMode,
-                markdownDescription: nls.localize('suggest.selectionMode', "Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions ({0} and {1}) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.", '`#editor.quickSuggestions#`', '`#editor.suggestOnTriggerCharacters#`')
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'suggest.selectionMode', "Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions ({0} and {1}) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.", '`#editor.quickSuggestions#`', '`#editor.suggestOnTriggerCharacters#`')
             },
             'editor.suggest.snippetsPreventQuickSuggestions': {
                 type: 'boolean',
                 default: defaults.snippetsPreventQuickSuggestions,
-                description: nls.localize('suggest.snippetsPreventQuickSuggestions', "Controls whether an active snippet prevents quick suggestions.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'suggest.snippetsPreventQuickSuggestions', "Controls whether an active snippet prevents quick suggestions.")
             },
             'editor.suggest.showIcons': {
                 type: 'boolean',
                 default: defaults.showIcons,
-                description: nls.localize('suggest.showIcons', "Controls whether to show or hide icons in suggestions.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'suggest.showIcons', "Controls whether to show or hide icons in suggestions.")
             },
             'editor.suggest.showStatusBar': {
                 type: 'boolean',
                 default: defaults.showStatusBar,
-                description: nls.localize('suggest.showStatusBar', "Controls the visibility of the status bar at the bottom of the suggest widget.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'suggest.showStatusBar', "Controls the visibility of the status bar at the bottom of the suggest widget.")
             },
             'editor.suggest.preview': {
                 type: 'boolean',
                 default: defaults.preview,
-                description: nls.localize('suggest.preview', "Controls whether to preview the suggestion outcome in the editor.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'suggest.preview', "Controls whether to preview the suggestion outcome in the editor.")
             },
             'editor.suggest.showInlineDetails': {
                 type: 'boolean',
                 default: defaults.showInlineDetails,
-                description: nls.localize('suggest.showInlineDetails', "Controls whether suggest details show inline with the label or only in the details widget.")
+                description: nls.localize('vs/editor/common/config/editorOptions', 'suggest.showInlineDetails', "Controls whether suggest details show inline with the label or only in the details widget.")
             },
             'editor.suggest.maxVisibleSuggestions': {
                 type: 'number',
-                deprecationMessage: nls.localize('suggest.maxVisibleSuggestions.dep', "This setting is deprecated. The suggest widget can now be resized."),
+                deprecationMessage: nls.localize('vs/editor/common/config/editorOptions', 'suggest.maxVisibleSuggestions.dep', "This setting is deprecated. The suggest widget can now be resized."),
             },
             'editor.suggest.filteredTypes': {
                 type: 'object',
-                deprecationMessage: nls.localize('deprecated', "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.")
+                deprecationMessage: nls.localize('vs/editor/common/config/editorOptions', 'deprecated', "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.")
             },
             'editor.suggest.showMethods': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showMethods', "When enabled IntelliSense shows `method`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showMethods', "When enabled IntelliSense shows `method`-suggestions.")
             },
             'editor.suggest.showFunctions': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showFunctions', "When enabled IntelliSense shows `function`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showFunctions', "When enabled IntelliSense shows `function`-suggestions.")
             },
             'editor.suggest.showConstructors': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showConstructors', "When enabled IntelliSense shows `constructor`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showConstructors', "When enabled IntelliSense shows `constructor`-suggestions.")
             },
             'editor.suggest.showDeprecated': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showDeprecated', "When enabled IntelliSense shows `deprecated`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showDeprecated', "When enabled IntelliSense shows `deprecated`-suggestions.")
             },
             'editor.suggest.matchOnWordStartOnly': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.matchOnWordStartOnly', "When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.matchOnWordStartOnly', "When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.")
             },
             'editor.suggest.showFields': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showFields', "When enabled IntelliSense shows `field`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showFields', "When enabled IntelliSense shows `field`-suggestions.")
             },
             'editor.suggest.showVariables': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showVariables', "When enabled IntelliSense shows `variable`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showVariables', "When enabled IntelliSense shows `variable`-suggestions.")
             },
             'editor.suggest.showClasses': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showClasss', "When enabled IntelliSense shows `class`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showClasss', "When enabled IntelliSense shows `class`-suggestions.")
             },
             'editor.suggest.showStructs': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showStructs', "When enabled IntelliSense shows `struct`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showStructs', "When enabled IntelliSense shows `struct`-suggestions.")
             },
             'editor.suggest.showInterfaces': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showInterfaces', "When enabled IntelliSense shows `interface`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showInterfaces', "When enabled IntelliSense shows `interface`-suggestions.")
             },
             'editor.suggest.showModules': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showModules', "When enabled IntelliSense shows `module`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showModules', "When enabled IntelliSense shows `module`-suggestions.")
             },
             'editor.suggest.showProperties': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showPropertys', "When enabled IntelliSense shows `property`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showPropertys', "When enabled IntelliSense shows `property`-suggestions.")
             },
             'editor.suggest.showEvents': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showEvents', "When enabled IntelliSense shows `event`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showEvents', "When enabled IntelliSense shows `event`-suggestions.")
             },
             'editor.suggest.showOperators': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showOperators', "When enabled IntelliSense shows `operator`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showOperators', "When enabled IntelliSense shows `operator`-suggestions.")
             },
             'editor.suggest.showUnits': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showUnits', "When enabled IntelliSense shows `unit`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showUnits', "When enabled IntelliSense shows `unit`-suggestions.")
             },
             'editor.suggest.showValues': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showValues', "When enabled IntelliSense shows `value`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showValues', "When enabled IntelliSense shows `value`-suggestions.")
             },
             'editor.suggest.showConstants': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showConstants', "When enabled IntelliSense shows `constant`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showConstants', "When enabled IntelliSense shows `constant`-suggestions.")
             },
             'editor.suggest.showEnums': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showEnums', "When enabled IntelliSense shows `enum`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showEnums', "When enabled IntelliSense shows `enum`-suggestions.")
             },
             'editor.suggest.showEnumMembers': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showEnumMembers', "When enabled IntelliSense shows `enumMember`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showEnumMembers', "When enabled IntelliSense shows `enumMember`-suggestions.")
             },
             'editor.suggest.showKeywords': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showKeywords', "When enabled IntelliSense shows `keyword`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showKeywords', "When enabled IntelliSense shows `keyword`-suggestions.")
             },
             'editor.suggest.showWords': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showTexts', "When enabled IntelliSense shows `text`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showTexts', "When enabled IntelliSense shows `text`-suggestions.")
             },
             'editor.suggest.showColors': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showColors', "When enabled IntelliSense shows `color`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showColors', "When enabled IntelliSense shows `color`-suggestions.")
             },
             'editor.suggest.showFiles': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showFiles', "When enabled IntelliSense shows `file`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showFiles', "When enabled IntelliSense shows `file`-suggestions.")
             },
             'editor.suggest.showReferences': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showReferences', "When enabled IntelliSense shows `reference`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showReferences', "When enabled IntelliSense shows `reference`-suggestions.")
             },
             'editor.suggest.showCustomcolors': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showCustomcolors', "When enabled IntelliSense shows `customcolor`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showCustomcolors', "When enabled IntelliSense shows `customcolor`-suggestions.")
             },
             'editor.suggest.showFolders': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showFolders', "When enabled IntelliSense shows `folder`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showFolders', "When enabled IntelliSense shows `folder`-suggestions.")
             },
             'editor.suggest.showTypeParameters': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showTypeParameters', "When enabled IntelliSense shows `typeParameter`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showTypeParameters', "When enabled IntelliSense shows `typeParameter`-suggestions.")
             },
             'editor.suggest.showSnippets': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showSnippets', "When enabled IntelliSense shows `snippet`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showSnippets', "When enabled IntelliSense shows `snippet`-suggestions.")
             },
             'editor.suggest.showUsers': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showUsers', "When enabled IntelliSense shows `user`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showUsers', "When enabled IntelliSense shows `user`-suggestions.")
             },
             'editor.suggest.showIssues': {
                 type: 'boolean',
                 default: true,
-                markdownDescription: nls.localize('editor.suggest.showIssues', "When enabled IntelliSense shows `issues`-suggestions.")
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'editor.suggest.showIssues', "When enabled IntelliSense shows `issues`-suggestions.")
             }
         });
     }
@@ -2533,12 +2533,12 @@ class SmartSelect extends BaseEditorOption {
             selectSubwords: true,
         }, {
             'editor.smartSelect.selectLeadingAndTrailingWhitespace': {
-                description: nls.localize('selectLeadingAndTrailingWhitespace', "Whether leading and trailing whitespace should always be selected."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'selectLeadingAndTrailingWhitespace', "Whether leading and trailing whitespace should always be selected."),
                 default: true,
                 type: 'boolean'
             },
             'editor.smartSelect.selectSubwords': {
-                description: nls.localize('selectSubwords', "Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'selectSubwords', "Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected."),
                 default: true,
                 type: 'boolean'
             }
@@ -2567,10 +2567,10 @@ class WordSegmenterLocales extends BaseEditorOption {
         super(131 /* EditorOption.wordSegmenterLocales */, 'wordSegmenterLocales', defaults, {
             anyOf: [
                 {
-                    description: nls.localize('wordSegmenterLocales', "Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.)."),
+                    description: nls.localize('vs/editor/common/config/editorOptions', 'wordSegmenterLocales', "Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.)."),
                     type: 'string',
                 }, {
-                    description: nls.localize('wordSegmenterLocales', "Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.)."),
+                    description: nls.localize('vs/editor/common/config/editorOptions', 'wordSegmenterLocales', "Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.)."),
                     type: 'array',
                     items: {
                         type: 'string'
@@ -2609,12 +2609,12 @@ class WrappingIndentOption extends BaseEditorOption {
                 type: 'string',
                 enum: ['none', 'same', 'indent', 'deepIndent'],
                 enumDescriptions: [
-                    nls.localize('wrappingIndent.none', "No indentation. Wrapped lines begin at column 1."),
-                    nls.localize('wrappingIndent.same', "Wrapped lines get the same indentation as the parent."),
-                    nls.localize('wrappingIndent.indent', "Wrapped lines get +1 indentation toward the parent."),
-                    nls.localize('wrappingIndent.deepIndent', "Wrapped lines get +2 indentation toward the parent."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'wrappingIndent.none', "No indentation. Wrapped lines begin at column 1."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'wrappingIndent.same', "Wrapped lines get the same indentation as the parent."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'wrappingIndent.indent', "Wrapped lines get +1 indentation toward the parent."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'wrappingIndent.deepIndent', "Wrapped lines get +2 indentation toward the parent."),
                 ],
-                description: nls.localize('wrappingIndent', "Controls the indentation of wrapped lines."),
+                description: nls.localize('vs/editor/common/config/editorOptions', 'wrappingIndent', "Controls the indentation of wrapped lines."),
                 default: 'same'
             }
         });
@@ -2659,18 +2659,18 @@ class EditorDropIntoEditor extends BaseEditorOption {
             'editor.dropIntoEditor.enabled': {
                 type: 'boolean',
                 default: defaults.enabled,
-                markdownDescription: nls.localize('dropIntoEditor.enabled', "Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor)."),
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'dropIntoEditor.enabled', "Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor)."),
             },
             'editor.dropIntoEditor.showDropSelector': {
                 type: 'string',
-                markdownDescription: nls.localize('dropIntoEditor.showDropSelector', "Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped."),
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'dropIntoEditor.showDropSelector', "Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped."),
                 enum: [
                     'afterDrop',
                     'never'
                 ],
                 enumDescriptions: [
-                    nls.localize('dropIntoEditor.showDropSelector.afterDrop', "Show the drop selector widget after a file is dropped into the editor."),
-                    nls.localize('dropIntoEditor.showDropSelector.never', "Never show the drop selector widget. Instead the default drop provider is always used."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'dropIntoEditor.showDropSelector.afterDrop', "Show the drop selector widget after a file is dropped into the editor."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'dropIntoEditor.showDropSelector.never', "Never show the drop selector widget. Instead the default drop provider is always used."),
                 ],
                 default: 'afterDrop',
             },
@@ -2694,18 +2694,18 @@ class EditorPasteAs extends BaseEditorOption {
             'editor.pasteAs.enabled': {
                 type: 'boolean',
                 default: defaults.enabled,
-                markdownDescription: nls.localize('pasteAs.enabled', "Controls whether you can paste content in different ways."),
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'pasteAs.enabled', "Controls whether you can paste content in different ways."),
             },
             'editor.pasteAs.showPasteSelector': {
                 type: 'string',
-                markdownDescription: nls.localize('pasteAs.showPasteSelector', "Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted."),
+                markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'pasteAs.showPasteSelector', "Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted."),
                 enum: [
                     'afterPaste',
                     'never'
                 ],
                 enumDescriptions: [
-                    nls.localize('pasteAs.showPasteSelector.afterPaste', "Show the paste selector widget after content is pasted into the editor."),
-                    nls.localize('pasteAs.showPasteSelector.never', "Never show the paste selector widget. Instead the default pasting behavior is always used."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'pasteAs.showPasteSelector.afterPaste', "Show the paste selector widget after content is pasted into the editor."),
+                    nls.localize('vs/editor/common/config/editorOptions', 'pasteAs.showPasteSelector.never', "Never show the paste selector widget. Instead the default pasting behavior is always used."),
                 ],
                 default: 'afterPaste',
             },
@@ -2745,205 +2745,205 @@ function register(option) {
     return option;
 }
 export const EditorOptions = {
-    acceptSuggestionOnCommitCharacter: register(new EditorBooleanOption(0 /* EditorOption.acceptSuggestionOnCommitCharacter */, 'acceptSuggestionOnCommitCharacter', true, { markdownDescription: nls.localize('acceptSuggestionOnCommitCharacter', "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.") })),
+    acceptSuggestionOnCommitCharacter: register(new EditorBooleanOption(0 /* EditorOption.acceptSuggestionOnCommitCharacter */, 'acceptSuggestionOnCommitCharacter', true, { markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'acceptSuggestionOnCommitCharacter', "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.") })),
     acceptSuggestionOnEnter: register(new EditorStringEnumOption(1 /* EditorOption.acceptSuggestionOnEnter */, 'acceptSuggestionOnEnter', 'on', ['on', 'smart', 'off'], {
         markdownEnumDescriptions: [
             '',
-            nls.localize('acceptSuggestionOnEnterSmart', "Only accept a suggestion with `Enter` when it makes a textual change."),
+            nls.localize('vs/editor/common/config/editorOptions', 'acceptSuggestionOnEnterSmart', "Only accept a suggestion with `Enter` when it makes a textual change."),
             ''
         ],
-        markdownDescription: nls.localize('acceptSuggestionOnEnter', "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.")
+        markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'acceptSuggestionOnEnter', "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.")
     })),
     accessibilitySupport: register(new EditorAccessibilitySupport()),
     accessibilityPageSize: register(new EditorIntOption(3 /* EditorOption.accessibilityPageSize */, 'accessibilityPageSize', 10, 1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, {
-        description: nls.localize('accessibilityPageSize', "Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default."),
+        description: nls.localize('vs/editor/common/config/editorOptions', 'accessibilityPageSize', "Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default."),
         tags: ['accessibility']
     })),
-    ariaLabel: register(new EditorStringOption(4 /* EditorOption.ariaLabel */, 'ariaLabel', nls.localize('editorViewAccessibleLabel', "Editor content"))),
+    ariaLabel: register(new EditorStringOption(4 /* EditorOption.ariaLabel */, 'ariaLabel', nls.localize('vs/editor/common/config/editorOptions', 'editorViewAccessibleLabel', "Editor content"))),
     ariaRequired: register(new EditorBooleanOption(5 /* EditorOption.ariaRequired */, 'ariaRequired', false, undefined)),
     screenReaderAnnounceInlineSuggestion: register(new EditorBooleanOption(8 /* EditorOption.screenReaderAnnounceInlineSuggestion */, 'screenReaderAnnounceInlineSuggestion', true, {
-        description: nls.localize('screenReaderAnnounceInlineSuggestion', "Control whether inline suggestions are announced by a screen reader."),
+        description: nls.localize('vs/editor/common/config/editorOptions', 'screenReaderAnnounceInlineSuggestion', "Control whether inline suggestions are announced by a screen reader."),
         tags: ['accessibility']
     })),
     autoClosingBrackets: register(new EditorStringEnumOption(6 /* EditorOption.autoClosingBrackets */, 'autoClosingBrackets', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {
         enumDescriptions: [
             '',
-            nls.localize('editor.autoClosingBrackets.languageDefined', "Use language configurations to determine when to autoclose brackets."),
-            nls.localize('editor.autoClosingBrackets.beforeWhitespace', "Autoclose brackets only when the cursor is to the left of whitespace."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoClosingBrackets.languageDefined', "Use language configurations to determine when to autoclose brackets."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoClosingBrackets.beforeWhitespace', "Autoclose brackets only when the cursor is to the left of whitespace."),
             '',
         ],
-        description: nls.localize('autoClosingBrackets', "Controls whether the editor should automatically close brackets after the user adds an opening bracket.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'autoClosingBrackets', "Controls whether the editor should automatically close brackets after the user adds an opening bracket.")
     })),
     autoClosingComments: register(new EditorStringEnumOption(7 /* EditorOption.autoClosingComments */, 'autoClosingComments', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {
         enumDescriptions: [
             '',
-            nls.localize('editor.autoClosingComments.languageDefined', "Use language configurations to determine when to autoclose comments."),
-            nls.localize('editor.autoClosingComments.beforeWhitespace', "Autoclose comments only when the cursor is to the left of whitespace."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoClosingComments.languageDefined', "Use language configurations to determine when to autoclose comments."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoClosingComments.beforeWhitespace', "Autoclose comments only when the cursor is to the left of whitespace."),
             '',
         ],
-        description: nls.localize('autoClosingComments', "Controls whether the editor should automatically close comments after the user adds an opening comment.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'autoClosingComments', "Controls whether the editor should automatically close comments after the user adds an opening comment.")
     })),
     autoClosingDelete: register(new EditorStringEnumOption(9 /* EditorOption.autoClosingDelete */, 'autoClosingDelete', 'auto', ['always', 'auto', 'never'], {
         enumDescriptions: [
             '',
-            nls.localize('editor.autoClosingDelete.auto', "Remove adjacent closing quotes or brackets only if they were automatically inserted."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoClosingDelete.auto', "Remove adjacent closing quotes or brackets only if they were automatically inserted."),
             '',
         ],
-        description: nls.localize('autoClosingDelete', "Controls whether the editor should remove adjacent closing quotes or brackets when deleting.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'autoClosingDelete', "Controls whether the editor should remove adjacent closing quotes or brackets when deleting.")
     })),
     autoClosingOvertype: register(new EditorStringEnumOption(10 /* EditorOption.autoClosingOvertype */, 'autoClosingOvertype', 'auto', ['always', 'auto', 'never'], {
         enumDescriptions: [
             '',
-            nls.localize('editor.autoClosingOvertype.auto', "Type over closing quotes or brackets only if they were automatically inserted."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoClosingOvertype.auto', "Type over closing quotes or brackets only if they were automatically inserted."),
             '',
         ],
-        description: nls.localize('autoClosingOvertype', "Controls whether the editor should type over closing quotes or brackets.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'autoClosingOvertype', "Controls whether the editor should type over closing quotes or brackets.")
     })),
     autoClosingQuotes: register(new EditorStringEnumOption(11 /* EditorOption.autoClosingQuotes */, 'autoClosingQuotes', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {
         enumDescriptions: [
             '',
-            nls.localize('editor.autoClosingQuotes.languageDefined', "Use language configurations to determine when to autoclose quotes."),
-            nls.localize('editor.autoClosingQuotes.beforeWhitespace', "Autoclose quotes only when the cursor is to the left of whitespace."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoClosingQuotes.languageDefined', "Use language configurations to determine when to autoclose quotes."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoClosingQuotes.beforeWhitespace', "Autoclose quotes only when the cursor is to the left of whitespace."),
             '',
         ],
-        description: nls.localize('autoClosingQuotes', "Controls whether the editor should automatically close quotes after the user adds an opening quote.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'autoClosingQuotes', "Controls whether the editor should automatically close quotes after the user adds an opening quote.")
     })),
     autoIndent: register(new EditorEnumOption(12 /* EditorOption.autoIndent */, 'autoIndent', 4 /* EditorAutoIndentStrategy.Full */, 'full', ['none', 'keep', 'brackets', 'advanced', 'full'], _autoIndentFromString, {
         enumDescriptions: [
-            nls.localize('editor.autoIndent.none', "The editor will not insert indentation automatically."),
-            nls.localize('editor.autoIndent.keep', "The editor will keep the current line's indentation."),
-            nls.localize('editor.autoIndent.brackets', "The editor will keep the current line's indentation and honor language defined brackets."),
-            nls.localize('editor.autoIndent.advanced', "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages."),
-            nls.localize('editor.autoIndent.full', "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoIndent.none', "The editor will not insert indentation automatically."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoIndent.keep', "The editor will keep the current line's indentation."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoIndent.brackets', "The editor will keep the current line's indentation and honor language defined brackets."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoIndent.advanced', "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoIndent.full', "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages."),
         ],
-        description: nls.localize('autoIndent', "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'autoIndent', "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.")
     })),
     automaticLayout: register(new EditorBooleanOption(13 /* EditorOption.automaticLayout */, 'automaticLayout', false)),
     autoSurround: register(new EditorStringEnumOption(14 /* EditorOption.autoSurround */, 'autoSurround', 'languageDefined', ['languageDefined', 'quotes', 'brackets', 'never'], {
         enumDescriptions: [
-            nls.localize('editor.autoSurround.languageDefined', "Use language configurations to determine when to automatically surround selections."),
-            nls.localize('editor.autoSurround.quotes', "Surround with quotes but not brackets."),
-            nls.localize('editor.autoSurround.brackets', "Surround with brackets but not quotes."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoSurround.languageDefined', "Use language configurations to determine when to automatically surround selections."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoSurround.quotes', "Surround with quotes but not brackets."),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.autoSurround.brackets', "Surround with brackets but not quotes."),
             ''
         ],
-        description: nls.localize('autoSurround', "Controls whether the editor should automatically surround selections when typing quotes or brackets.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'autoSurround', "Controls whether the editor should automatically surround selections when typing quotes or brackets.")
     })),
     bracketPairColorization: register(new BracketPairColorization()),
     bracketPairGuides: register(new GuideOptions()),
-    stickyTabStops: register(new EditorBooleanOption(117 /* EditorOption.stickyTabStops */, 'stickyTabStops', false, { description: nls.localize('stickyTabStops', "Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.") })),
-    codeLens: register(new EditorBooleanOption(17 /* EditorOption.codeLens */, 'codeLens', true, { description: nls.localize('codeLens', "Controls whether the editor shows CodeLens.") })),
-    codeLensFontFamily: register(new EditorStringOption(18 /* EditorOption.codeLensFontFamily */, 'codeLensFontFamily', '', { description: nls.localize('codeLensFontFamily', "Controls the font family for CodeLens.") })),
+    stickyTabStops: register(new EditorBooleanOption(117 /* EditorOption.stickyTabStops */, 'stickyTabStops', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'stickyTabStops', "Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.") })),
+    codeLens: register(new EditorBooleanOption(17 /* EditorOption.codeLens */, 'codeLens', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'codeLens', "Controls whether the editor shows CodeLens.") })),
+    codeLensFontFamily: register(new EditorStringOption(18 /* EditorOption.codeLensFontFamily */, 'codeLensFontFamily', '', { description: nls.localize('vs/editor/common/config/editorOptions', 'codeLensFontFamily', "Controls the font family for CodeLens.") })),
     codeLensFontSize: register(new EditorIntOption(19 /* EditorOption.codeLensFontSize */, 'codeLensFontSize', 0, 0, 100, {
         type: 'number',
         default: 0,
         minimum: 0,
         maximum: 100,
-        markdownDescription: nls.localize('codeLensFontSize', "Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used.")
+        markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'codeLensFontSize', "Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used.")
     })),
-    colorDecorators: register(new EditorBooleanOption(20 /* EditorOption.colorDecorators */, 'colorDecorators', true, { description: nls.localize('colorDecorators', "Controls whether the editor should render the inline color decorators and color picker.") })),
+    colorDecorators: register(new EditorBooleanOption(20 /* EditorOption.colorDecorators */, 'colorDecorators', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'colorDecorators', "Controls whether the editor should render the inline color decorators and color picker.") })),
     colorDecoratorActivatedOn: register(new EditorStringEnumOption(149 /* EditorOption.colorDecoratorsActivatedOn */, 'colorDecoratorsActivatedOn', 'clickAndHover', ['clickAndHover', 'hover', 'click'], {
         enumDescriptions: [
-            nls.localize('editor.colorDecoratorActivatedOn.clickAndHover', "Make the color picker appear both on click and hover of the color decorator"),
-            nls.localize('editor.colorDecoratorActivatedOn.hover', "Make the color picker appear on hover of the color decorator"),
-            nls.localize('editor.colorDecoratorActivatedOn.click', "Make the color picker appear on click of the color decorator")
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.colorDecoratorActivatedOn.clickAndHover', "Make the color picker appear both on click and hover of the color decorator"),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.colorDecoratorActivatedOn.hover', "Make the color picker appear on hover of the color decorator"),
+            nls.localize('vs/editor/common/config/editorOptions', 'editor.colorDecoratorActivatedOn.click', "Make the color picker appear on click of the color decorator")
         ],
-        description: nls.localize('colorDecoratorActivatedOn', "Controls the condition to make a color picker appear from a color decorator")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'colorDecoratorActivatedOn', "Controls the condition to make a color picker appear from a color decorator")
     })),
     colorDecoratorsLimit: register(new EditorIntOption(21 /* EditorOption.colorDecoratorsLimit */, 'colorDecoratorsLimit', 500, 1, 1000000, {
-        markdownDescription: nls.localize('colorDecoratorsLimit', "Controls the max number of color decorators that can be rendered in an editor at once.")
+        markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'colorDecoratorsLimit', "Controls the max number of color decorators that can be rendered in an editor at once.")
     })),
-    columnSelection: register(new EditorBooleanOption(22 /* EditorOption.columnSelection */, 'columnSelection', false, { description: nls.localize('columnSelection', "Enable that the selection with the mouse and keys is doing column selection.") })),
+    columnSelection: register(new EditorBooleanOption(22 /* EditorOption.columnSelection */, 'columnSelection', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'columnSelection', "Enable that the selection with the mouse and keys is doing column selection.") })),
     comments: register(new EditorComments()),
     contextmenu: register(new EditorBooleanOption(24 /* EditorOption.contextmenu */, 'contextmenu', true)),
-    copyWithSyntaxHighlighting: register(new EditorBooleanOption(25 /* EditorOption.copyWithSyntaxHighlighting */, 'copyWithSyntaxHighlighting', true, { description: nls.localize('copyWithSyntaxHighlighting', "Controls whether syntax highlighting should be copied into the clipboard.") })),
-    cursorBlinking: register(new EditorEnumOption(26 /* EditorOption.cursorBlinking */, 'cursorBlinking', 1 /* TextEditorCursorBlinkingStyle.Blink */, 'blink', ['blink', 'smooth', 'phase', 'expand', 'solid'], _cursorBlinkingStyleFromString, { description: nls.localize('cursorBlinking', "Control the cursor animation style.") })),
+    copyWithSyntaxHighlighting: register(new EditorBooleanOption(25 /* EditorOption.copyWithSyntaxHighlighting */, 'copyWithSyntaxHighlighting', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'copyWithSyntaxHighlighting', "Controls whether syntax highlighting should be copied into the clipboard.") })),
+    cursorBlinking: register(new EditorEnumOption(26 /* EditorOption.cursorBlinking */, 'cursorBlinking', 1 /* TextEditorCursorBlinkingStyle.Blink */, 'blink', ['blink', 'smooth', 'phase', 'expand', 'solid'], _cursorBlinkingStyleFromString, { description: nls.localize('vs/editor/common/config/editorOptions', 'cursorBlinking', "Control the cursor animation style.") })),
     cursorSmoothCaretAnimation: register(new EditorStringEnumOption(27 /* EditorOption.cursorSmoothCaretAnimation */, 'cursorSmoothCaretAnimation', 'off', ['off', 'explicit', 'on'], {
         enumDescriptions: [
-            nls.localize('cursorSmoothCaretAnimation.off', "Smooth caret animation is disabled."),
-            nls.localize('cursorSmoothCaretAnimation.explicit', "Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture."),
-            nls.localize('cursorSmoothCaretAnimation.on', "Smooth caret animation is always enabled.")
+            nls.localize('vs/editor/common/config/editorOptions', 'cursorSmoothCaretAnimation.off', "Smooth caret animation is disabled."),
+            nls.localize('vs/editor/common/config/editorOptions', 'cursorSmoothCaretAnimation.explicit', "Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture."),
+            nls.localize('vs/editor/common/config/editorOptions', 'cursorSmoothCaretAnimation.on', "Smooth caret animation is always enabled.")
         ],
-        description: nls.localize('cursorSmoothCaretAnimation', "Controls whether the smooth caret animation should be enabled.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'cursorSmoothCaretAnimation', "Controls whether the smooth caret animation should be enabled.")
     })),
-    cursorStyle: register(new EditorEnumOption(28 /* EditorOption.cursorStyle */, 'cursorStyle', TextEditorCursorStyle.Line, 'line', ['line', 'block', 'underline', 'line-thin', 'block-outline', 'underline-thin'], _cursorStyleFromString, { description: nls.localize('cursorStyle', "Controls the cursor style.") })),
-    cursorSurroundingLines: register(new EditorIntOption(29 /* EditorOption.cursorSurroundingLines */, 'cursorSurroundingLines', 0, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('cursorSurroundingLines', "Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.") })),
+    cursorStyle: register(new EditorEnumOption(28 /* EditorOption.cursorStyle */, 'cursorStyle', TextEditorCursorStyle.Line, 'line', ['line', 'block', 'underline', 'line-thin', 'block-outline', 'underline-thin'], _cursorStyleFromString, { description: nls.localize('vs/editor/common/config/editorOptions', 'cursorStyle', "Controls the cursor style.") })),
+    cursorSurroundingLines: register(new EditorIntOption(29 /* EditorOption.cursorSurroundingLines */, 'cursorSurroundingLines', 0, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('vs/editor/common/config/editorOptions', 'cursorSurroundingLines', "Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.") })),
     cursorSurroundingLinesStyle: register(new EditorStringEnumOption(30 /* EditorOption.cursorSurroundingLinesStyle */, 'cursorSurroundingLinesStyle', 'default', ['default', 'all'], {
         enumDescriptions: [
-            nls.localize('cursorSurroundingLinesStyle.default', "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API."),
-            nls.localize('cursorSurroundingLinesStyle.all', "`cursorSurroundingLines` is enforced always.")
+            nls.localize('vs/editor/common/config/editorOptions', 'cursorSurroundingLinesStyle.default', "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API."),
+            nls.localize('vs/editor/common/config/editorOptions', 'cursorSurroundingLinesStyle.all', "`cursorSurroundingLines` is enforced always.")
         ],
-        markdownDescription: nls.localize('cursorSurroundingLinesStyle', "Controls when `#editor.cursorSurroundingLines#` should be enforced.")
+        markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'cursorSurroundingLinesStyle', "Controls when `#editor.cursorSurroundingLines#` should be enforced.")
     })),
-    cursorWidth: register(new EditorIntOption(31 /* EditorOption.cursorWidth */, 'cursorWidth', 0, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { markdownDescription: nls.localize('cursorWidth', "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.") })),
+    cursorWidth: register(new EditorIntOption(31 /* EditorOption.cursorWidth */, 'cursorWidth', 0, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'cursorWidth', "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.") })),
     disableLayerHinting: register(new EditorBooleanOption(32 /* EditorOption.disableLayerHinting */, 'disableLayerHinting', false)),
     disableMonospaceOptimizations: register(new EditorBooleanOption(33 /* EditorOption.disableMonospaceOptimizations */, 'disableMonospaceOptimizations', false)),
     domReadOnly: register(new EditorBooleanOption(34 /* EditorOption.domReadOnly */, 'domReadOnly', false)),
-    dragAndDrop: register(new EditorBooleanOption(35 /* EditorOption.dragAndDrop */, 'dragAndDrop', true, { description: nls.localize('dragAndDrop', "Controls whether the editor should allow moving selections via drag and drop.") })),
+    dragAndDrop: register(new EditorBooleanOption(35 /* EditorOption.dragAndDrop */, 'dragAndDrop', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'dragAndDrop', "Controls whether the editor should allow moving selections via drag and drop.") })),
     emptySelectionClipboard: register(new EditorEmptySelectionClipboard()),
     dropIntoEditor: register(new EditorDropIntoEditor()),
     stickyScroll: register(new EditorStickyScroll()),
     experimentalWhitespaceRendering: register(new EditorStringEnumOption(38 /* EditorOption.experimentalWhitespaceRendering */, 'experimentalWhitespaceRendering', 'svg', ['svg', 'font', 'off'], {
         enumDescriptions: [
-            nls.localize('experimentalWhitespaceRendering.svg', "Use a new rendering method with svgs."),
-            nls.localize('experimentalWhitespaceRendering.font', "Use a new rendering method with font characters."),
-            nls.localize('experimentalWhitespaceRendering.off', "Use the stable rendering method."),
+            nls.localize('vs/editor/common/config/editorOptions', 'experimentalWhitespaceRendering.svg', "Use a new rendering method with svgs."),
+            nls.localize('vs/editor/common/config/editorOptions', 'experimentalWhitespaceRendering.font', "Use a new rendering method with font characters."),
+            nls.localize('vs/editor/common/config/editorOptions', 'experimentalWhitespaceRendering.off', "Use the stable rendering method."),
         ],
-        description: nls.localize('experimentalWhitespaceRendering', "Controls whether whitespace is rendered with a new, experimental method.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'experimentalWhitespaceRendering', "Controls whether whitespace is rendered with a new, experimental method.")
     })),
     extraEditorClassName: register(new EditorStringOption(39 /* EditorOption.extraEditorClassName */, 'extraEditorClassName', '')),
-    fastScrollSensitivity: register(new EditorFloatOption(40 /* EditorOption.fastScrollSensitivity */, 'fastScrollSensitivity', 5, x => (x <= 0 ? 5 : x), { markdownDescription: nls.localize('fastScrollSensitivity', "Scrolling speed multiplier when pressing `Alt`.") })),
+    fastScrollSensitivity: register(new EditorFloatOption(40 /* EditorOption.fastScrollSensitivity */, 'fastScrollSensitivity', 5, x => (x <= 0 ? 5 : x), { markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'fastScrollSensitivity', "Scrolling speed multiplier when pressing `Alt`.") })),
     find: register(new EditorFind()),
     fixedOverflowWidgets: register(new EditorBooleanOption(42 /* EditorOption.fixedOverflowWidgets */, 'fixedOverflowWidgets', false)),
-    folding: register(new EditorBooleanOption(43 /* EditorOption.folding */, 'folding', true, { description: nls.localize('folding', "Controls whether the editor has code folding enabled.") })),
+    folding: register(new EditorBooleanOption(43 /* EditorOption.folding */, 'folding', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'folding', "Controls whether the editor has code folding enabled.") })),
     foldingStrategy: register(new EditorStringEnumOption(44 /* EditorOption.foldingStrategy */, 'foldingStrategy', 'auto', ['auto', 'indentation'], {
         enumDescriptions: [
-            nls.localize('foldingStrategy.auto', "Use a language-specific folding strategy if available, else the indentation-based one."),
-            nls.localize('foldingStrategy.indentation', "Use the indentation-based folding strategy."),
+            nls.localize('vs/editor/common/config/editorOptions', 'foldingStrategy.auto', "Use a language-specific folding strategy if available, else the indentation-based one."),
+            nls.localize('vs/editor/common/config/editorOptions', 'foldingStrategy.indentation', "Use the indentation-based folding strategy."),
         ],
-        description: nls.localize('foldingStrategy', "Controls the strategy for computing folding ranges.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'foldingStrategy', "Controls the strategy for computing folding ranges.")
     })),
-    foldingHighlight: register(new EditorBooleanOption(45 /* EditorOption.foldingHighlight */, 'foldingHighlight', true, { description: nls.localize('foldingHighlight', "Controls whether the editor should highlight folded ranges.") })),
-    foldingImportsByDefault: register(new EditorBooleanOption(46 /* EditorOption.foldingImportsByDefault */, 'foldingImportsByDefault', false, { description: nls.localize('foldingImportsByDefault', "Controls whether the editor automatically collapses import ranges.") })),
+    foldingHighlight: register(new EditorBooleanOption(45 /* EditorOption.foldingHighlight */, 'foldingHighlight', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'foldingHighlight', "Controls whether the editor should highlight folded ranges.") })),
+    foldingImportsByDefault: register(new EditorBooleanOption(46 /* EditorOption.foldingImportsByDefault */, 'foldingImportsByDefault', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'foldingImportsByDefault', "Controls whether the editor automatically collapses import ranges.") })),
     foldingMaximumRegions: register(new EditorIntOption(47 /* EditorOption.foldingMaximumRegions */, 'foldingMaximumRegions', 5000, 10, 65000, // limit must be less than foldingRanges MAX_FOLDING_REGIONS
-    { description: nls.localize('foldingMaximumRegions', "The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.") })),
-    unfoldOnClickAfterEndOfLine: register(new EditorBooleanOption(48 /* EditorOption.unfoldOnClickAfterEndOfLine */, 'unfoldOnClickAfterEndOfLine', false, { description: nls.localize('unfoldOnClickAfterEndOfLine', "Controls whether clicking on the empty content after a folded line will unfold the line.") })),
-    fontFamily: register(new EditorStringOption(49 /* EditorOption.fontFamily */, 'fontFamily', EDITOR_FONT_DEFAULTS.fontFamily, { description: nls.localize('fontFamily', "Controls the font family.") })),
+    { description: nls.localize('vs/editor/common/config/editorOptions', 'foldingMaximumRegions', "The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.") })),
+    unfoldOnClickAfterEndOfLine: register(new EditorBooleanOption(48 /* EditorOption.unfoldOnClickAfterEndOfLine */, 'unfoldOnClickAfterEndOfLine', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'unfoldOnClickAfterEndOfLine', "Controls whether clicking on the empty content after a folded line will unfold the line.") })),
+    fontFamily: register(new EditorStringOption(49 /* EditorOption.fontFamily */, 'fontFamily', EDITOR_FONT_DEFAULTS.fontFamily, { description: nls.localize('vs/editor/common/config/editorOptions', 'fontFamily', "Controls the font family.") })),
     fontInfo: register(new EditorFontInfo()),
     fontLigatures2: register(new EditorFontLigatures()),
     fontSize: register(new EditorFontSize()),
     fontWeight: register(new EditorFontWeight()),
     fontVariations: register(new EditorFontVariations()),
-    formatOnPaste: register(new EditorBooleanOption(55 /* EditorOption.formatOnPaste */, 'formatOnPaste', false, { description: nls.localize('formatOnPaste', "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.") })),
-    formatOnType: register(new EditorBooleanOption(56 /* EditorOption.formatOnType */, 'formatOnType', false, { description: nls.localize('formatOnType', "Controls whether the editor should automatically format the line after typing.") })),
-    glyphMargin: register(new EditorBooleanOption(57 /* EditorOption.glyphMargin */, 'glyphMargin', true, { description: nls.localize('glyphMargin', "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.") })),
+    formatOnPaste: register(new EditorBooleanOption(55 /* EditorOption.formatOnPaste */, 'formatOnPaste', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'formatOnPaste', "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.") })),
+    formatOnType: register(new EditorBooleanOption(56 /* EditorOption.formatOnType */, 'formatOnType', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'formatOnType', "Controls whether the editor should automatically format the line after typing.") })),
+    glyphMargin: register(new EditorBooleanOption(57 /* EditorOption.glyphMargin */, 'glyphMargin', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'glyphMargin', "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.") })),
     gotoLocation: register(new EditorGoToLocation()),
-    hideCursorInOverviewRuler: register(new EditorBooleanOption(59 /* EditorOption.hideCursorInOverviewRuler */, 'hideCursorInOverviewRuler', false, { description: nls.localize('hideCursorInOverviewRuler', "Controls whether the cursor should be hidden in the overview ruler.") })),
+    hideCursorInOverviewRuler: register(new EditorBooleanOption(59 /* EditorOption.hideCursorInOverviewRuler */, 'hideCursorInOverviewRuler', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'hideCursorInOverviewRuler', "Controls whether the cursor should be hidden in the overview ruler.") })),
     hover: register(new EditorHover()),
     inDiffEditor: register(new EditorBooleanOption(61 /* EditorOption.inDiffEditor */, 'inDiffEditor', false)),
-    letterSpacing: register(new EditorFloatOption(64 /* EditorOption.letterSpacing */, 'letterSpacing', EDITOR_FONT_DEFAULTS.letterSpacing, x => EditorFloatOption.clamp(x, -5, 20), { description: nls.localize('letterSpacing', "Controls the letter spacing in pixels.") })),
+    letterSpacing: register(new EditorFloatOption(64 /* EditorOption.letterSpacing */, 'letterSpacing', EDITOR_FONT_DEFAULTS.letterSpacing, x => EditorFloatOption.clamp(x, -5, 20), { description: nls.localize('vs/editor/common/config/editorOptions', 'letterSpacing', "Controls the letter spacing in pixels.") })),
     lightbulb: register(new EditorLightbulb()),
     lineDecorationsWidth: register(new EditorLineDecorationsWidth()),
     lineHeight: register(new EditorLineHeight()),
     lineNumbers: register(new EditorRenderLineNumbersOption()),
     lineNumbersMinChars: register(new EditorIntOption(69 /* EditorOption.lineNumbersMinChars */, 'lineNumbersMinChars', 5, 1, 300)),
-    linkedEditing: register(new EditorBooleanOption(70 /* EditorOption.linkedEditing */, 'linkedEditing', false, { description: nls.localize('linkedEditing', "Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.") })),
-    links: register(new EditorBooleanOption(71 /* EditorOption.links */, 'links', true, { description: nls.localize('links', "Controls whether the editor should detect links and make them clickable.") })),
-    matchBrackets: register(new EditorStringEnumOption(72 /* EditorOption.matchBrackets */, 'matchBrackets', 'always', ['always', 'near', 'never'], { description: nls.localize('matchBrackets', "Highlight matching brackets.") })),
+    linkedEditing: register(new EditorBooleanOption(70 /* EditorOption.linkedEditing */, 'linkedEditing', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'linkedEditing', "Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.") })),
+    links: register(new EditorBooleanOption(71 /* EditorOption.links */, 'links', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'links', "Controls whether the editor should detect links and make them clickable.") })),
+    matchBrackets: register(new EditorStringEnumOption(72 /* EditorOption.matchBrackets */, 'matchBrackets', 'always', ['always', 'near', 'never'], { description: nls.localize('vs/editor/common/config/editorOptions', 'matchBrackets', "Highlight matching brackets.") })),
     minimap: register(new EditorMinimap()),
     mouseStyle: register(new EditorStringEnumOption(74 /* EditorOption.mouseStyle */, 'mouseStyle', 'text', ['text', 'default', 'copy'])),
-    mouseWheelScrollSensitivity: register(new EditorFloatOption(75 /* EditorOption.mouseWheelScrollSensitivity */, 'mouseWheelScrollSensitivity', 1, x => (x === 0 ? 1 : x), { markdownDescription: nls.localize('mouseWheelScrollSensitivity', "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.") })),
+    mouseWheelScrollSensitivity: register(new EditorFloatOption(75 /* EditorOption.mouseWheelScrollSensitivity */, 'mouseWheelScrollSensitivity', 1, x => (x === 0 ? 1 : x), { markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'mouseWheelScrollSensitivity', "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.") })),
     mouseWheelZoom: register(new EditorBooleanOption(76 /* EditorOption.mouseWheelZoom */, 'mouseWheelZoom', false, {
         markdownDescription: platform.isMacintosh
-            ? nls.localize('mouseWheelZoom.mac', "Zoom the font of the editor when using mouse wheel and holding `Cmd`.")
-            : nls.localize('mouseWheelZoom', "Zoom the font of the editor when using mouse wheel and holding `Ctrl`.")
+            ? nls.localize('vs/editor/common/config/editorOptions', 'mouseWheelZoom.mac', "Zoom the font of the editor when using mouse wheel and holding `Cmd`.")
+            : nls.localize('vs/editor/common/config/editorOptions', 'mouseWheelZoom', "Zoom the font of the editor when using mouse wheel and holding `Ctrl`.")
     })),
-    multiCursorMergeOverlapping: register(new EditorBooleanOption(77 /* EditorOption.multiCursorMergeOverlapping */, 'multiCursorMergeOverlapping', true, { description: nls.localize('multiCursorMergeOverlapping', "Merge multiple cursors when they are overlapping.") })),
+    multiCursorMergeOverlapping: register(new EditorBooleanOption(77 /* EditorOption.multiCursorMergeOverlapping */, 'multiCursorMergeOverlapping', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'multiCursorMergeOverlapping', "Merge multiple cursors when they are overlapping.") })),
     multiCursorModifier: register(new EditorEnumOption(78 /* EditorOption.multiCursorModifier */, 'multiCursorModifier', 'altKey', 'alt', ['ctrlCmd', 'alt'], _multiCursorModifierFromString, {
         markdownEnumDescriptions: [
-            nls.localize('multiCursorModifier.ctrlCmd', "Maps to `Control` on Windows and Linux and to `Command` on macOS."),
-            nls.localize('multiCursorModifier.alt', "Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
+            nls.localize('vs/editor/common/config/editorOptions', 'multiCursorModifier.ctrlCmd', "Maps to `Control` on Windows and Linux and to `Command` on macOS."),
+            nls.localize('vs/editor/common/config/editorOptions', 'multiCursorModifier.alt', "Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
         ],
-        markdownDescription: nls.localize({
+        markdownDescription: nls.localize('vs/editor/common/config/editorOptions', {
             key: 'multiCursorModifier',
             comment: [
                 '- `ctrlCmd` refers to a value the setting can take and should not be localized.',
@@ -2953,155 +2953,155 @@ export const EditorOptions = {
     })),
     multiCursorPaste: register(new EditorStringEnumOption(79 /* EditorOption.multiCursorPaste */, 'multiCursorPaste', 'spread', ['spread', 'full'], {
         markdownEnumDescriptions: [
-            nls.localize('multiCursorPaste.spread', "Each cursor pastes a single line of the text."),
-            nls.localize('multiCursorPaste.full', "Each cursor pastes the full text.")
+            nls.localize('vs/editor/common/config/editorOptions', 'multiCursorPaste.spread', "Each cursor pastes a single line of the text."),
+            nls.localize('vs/editor/common/config/editorOptions', 'multiCursorPaste.full', "Each cursor pastes the full text.")
         ],
-        markdownDescription: nls.localize('multiCursorPaste', "Controls pasting when the line count of the pasted text matches the cursor count.")
+        markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'multiCursorPaste', "Controls pasting when the line count of the pasted text matches the cursor count.")
     })),
     multiCursorLimit: register(new EditorIntOption(80 /* EditorOption.multiCursorLimit */, 'multiCursorLimit', 10000, 1, 100000, {
-        markdownDescription: nls.localize('multiCursorLimit', "Controls the max number of cursors that can be in an active editor at once.")
+        markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'multiCursorLimit', "Controls the max number of cursors that can be in an active editor at once.")
     })),
     occurrencesHighlight: register(new EditorStringEnumOption(81 /* EditorOption.occurrencesHighlight */, 'occurrencesHighlight', 'singleFile', ['off', 'singleFile', 'multiFile'], {
         markdownEnumDescriptions: [
-            nls.localize('occurrencesHighlight.off', "Does not highlight occurrences."),
-            nls.localize('occurrencesHighlight.singleFile', "Highlights occurrences only in the current file."),
-            nls.localize('occurrencesHighlight.multiFile', "Experimental: Highlights occurrences across all valid open files.")
+            nls.localize('vs/editor/common/config/editorOptions', 'occurrencesHighlight.off', "Does not highlight occurrences."),
+            nls.localize('vs/editor/common/config/editorOptions', 'occurrencesHighlight.singleFile', "Highlights occurrences only in the current file."),
+            nls.localize('vs/editor/common/config/editorOptions', 'occurrencesHighlight.multiFile', "Experimental: Highlights occurrences across all valid open files.")
         ],
-        markdownDescription: nls.localize('occurrencesHighlight', "Controls whether occurrences should be highlighted across open files.")
+        markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'occurrencesHighlight', "Controls whether occurrences should be highlighted across open files.")
     })),
-    overviewRulerBorder: register(new EditorBooleanOption(82 /* EditorOption.overviewRulerBorder */, 'overviewRulerBorder', true, { description: nls.localize('overviewRulerBorder', "Controls whether a border should be drawn around the overview ruler.") })),
+    overviewRulerBorder: register(new EditorBooleanOption(82 /* EditorOption.overviewRulerBorder */, 'overviewRulerBorder', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'overviewRulerBorder', "Controls whether a border should be drawn around the overview ruler.") })),
     overviewRulerLanes: register(new EditorIntOption(83 /* EditorOption.overviewRulerLanes */, 'overviewRulerLanes', 3, 0, 3)),
     padding: register(new EditorPadding()),
     pasteAs: register(new EditorPasteAs()),
     parameterHints: register(new EditorParameterHints()),
     peekWidgetDefaultFocus: register(new EditorStringEnumOption(87 /* EditorOption.peekWidgetDefaultFocus */, 'peekWidgetDefaultFocus', 'tree', ['tree', 'editor'], {
         enumDescriptions: [
-            nls.localize('peekWidgetDefaultFocus.tree', "Focus the tree when opening peek"),
-            nls.localize('peekWidgetDefaultFocus.editor', "Focus the editor when opening peek")
+            nls.localize('vs/editor/common/config/editorOptions', 'peekWidgetDefaultFocus.tree', "Focus the tree when opening peek"),
+            nls.localize('vs/editor/common/config/editorOptions', 'peekWidgetDefaultFocus.editor', "Focus the editor when opening peek")
         ],
-        description: nls.localize('peekWidgetDefaultFocus', "Controls whether to focus the inline editor or the tree in the peek widget.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'peekWidgetDefaultFocus', "Controls whether to focus the inline editor or the tree in the peek widget.")
     })),
     placeholder: register(new PlaceholderOption()),
-    definitionLinkOpensInPeek: register(new EditorBooleanOption(89 /* EditorOption.definitionLinkOpensInPeek */, 'definitionLinkOpensInPeek', false, { description: nls.localize('definitionLinkOpensInPeek', "Controls whether the Go to Definition mouse gesture always opens the peek widget.") })),
+    definitionLinkOpensInPeek: register(new EditorBooleanOption(89 /* EditorOption.definitionLinkOpensInPeek */, 'definitionLinkOpensInPeek', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'definitionLinkOpensInPeek', "Controls whether the Go to Definition mouse gesture always opens the peek widget.") })),
     quickSuggestions: register(new EditorQuickSuggestions()),
-    quickSuggestionsDelay: register(new EditorIntOption(91 /* EditorOption.quickSuggestionsDelay */, 'quickSuggestionsDelay', 10, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('quickSuggestionsDelay', "Controls the delay in milliseconds after which quick suggestions will show up.") })),
+    quickSuggestionsDelay: register(new EditorIntOption(91 /* EditorOption.quickSuggestionsDelay */, 'quickSuggestionsDelay', 10, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('vs/editor/common/config/editorOptions', 'quickSuggestionsDelay', "Controls the delay in milliseconds after which quick suggestions will show up.") })),
     readOnly: register(new EditorBooleanOption(92 /* EditorOption.readOnly */, 'readOnly', false)),
     readOnlyMessage: register(new ReadonlyMessage()),
-    renameOnType: register(new EditorBooleanOption(94 /* EditorOption.renameOnType */, 'renameOnType', false, { description: nls.localize('renameOnType', "Controls whether the editor auto renames on type."), markdownDeprecationMessage: nls.localize('renameOnTypeDeprecate', "Deprecated, use `editor.linkedEditing` instead.") })),
-    renderControlCharacters: register(new EditorBooleanOption(95 /* EditorOption.renderControlCharacters */, 'renderControlCharacters', true, { description: nls.localize('renderControlCharacters', "Controls whether the editor should render control characters."), restricted: true })),
-    renderFinalNewline: register(new EditorStringEnumOption(96 /* EditorOption.renderFinalNewline */, 'renderFinalNewline', (platform.isLinux ? 'dimmed' : 'on'), ['off', 'on', 'dimmed'], { description: nls.localize('renderFinalNewline', "Render last line number when the file ends with a newline.") })),
+    renameOnType: register(new EditorBooleanOption(94 /* EditorOption.renameOnType */, 'renameOnType', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'renameOnType', "Controls whether the editor auto renames on type."), markdownDeprecationMessage: nls.localize('vs/editor/common/config/editorOptions', 'renameOnTypeDeprecate', "Deprecated, use `editor.linkedEditing` instead.") })),
+    renderControlCharacters: register(new EditorBooleanOption(95 /* EditorOption.renderControlCharacters */, 'renderControlCharacters', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'renderControlCharacters', "Controls whether the editor should render control characters."), restricted: true })),
+    renderFinalNewline: register(new EditorStringEnumOption(96 /* EditorOption.renderFinalNewline */, 'renderFinalNewline', (platform.isLinux ? 'dimmed' : 'on'), ['off', 'on', 'dimmed'], { description: nls.localize('vs/editor/common/config/editorOptions', 'renderFinalNewline', "Render last line number when the file ends with a newline.") })),
     renderLineHighlight: register(new EditorStringEnumOption(97 /* EditorOption.renderLineHighlight */, 'renderLineHighlight', 'line', ['none', 'gutter', 'line', 'all'], {
         enumDescriptions: [
             '',
             '',
             '',
-            nls.localize('renderLineHighlight.all', "Highlights both the gutter and the current line."),
+            nls.localize('vs/editor/common/config/editorOptions', 'renderLineHighlight.all', "Highlights both the gutter and the current line."),
         ],
-        description: nls.localize('renderLineHighlight', "Controls how the editor should render the current line highlight.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'renderLineHighlight', "Controls how the editor should render the current line highlight.")
     })),
-    renderLineHighlightOnlyWhenFocus: register(new EditorBooleanOption(98 /* EditorOption.renderLineHighlightOnlyWhenFocus */, 'renderLineHighlightOnlyWhenFocus', false, { description: nls.localize('renderLineHighlightOnlyWhenFocus', "Controls if the editor should render the current line highlight only when the editor is focused.") })),
+    renderLineHighlightOnlyWhenFocus: register(new EditorBooleanOption(98 /* EditorOption.renderLineHighlightOnlyWhenFocus */, 'renderLineHighlightOnlyWhenFocus', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'renderLineHighlightOnlyWhenFocus', "Controls if the editor should render the current line highlight only when the editor is focused.") })),
     renderValidationDecorations: register(new EditorStringEnumOption(99 /* EditorOption.renderValidationDecorations */, 'renderValidationDecorations', 'editable', ['editable', 'on', 'off'])),
     renderWhitespace: register(new EditorStringEnumOption(100 /* EditorOption.renderWhitespace */, 'renderWhitespace', 'selection', ['none', 'boundary', 'selection', 'trailing', 'all'], {
         enumDescriptions: [
             '',
-            nls.localize('renderWhitespace.boundary', "Render whitespace characters except for single spaces between words."),
-            nls.localize('renderWhitespace.selection', "Render whitespace characters only on selected text."),
-            nls.localize('renderWhitespace.trailing', "Render only trailing whitespace characters."),
+            nls.localize('vs/editor/common/config/editorOptions', 'renderWhitespace.boundary', "Render whitespace characters except for single spaces between words."),
+            nls.localize('vs/editor/common/config/editorOptions', 'renderWhitespace.selection', "Render whitespace characters only on selected text."),
+            nls.localize('vs/editor/common/config/editorOptions', 'renderWhitespace.trailing', "Render only trailing whitespace characters."),
             ''
         ],
-        description: nls.localize('renderWhitespace', "Controls how the editor should render whitespace characters.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'renderWhitespace', "Controls how the editor should render whitespace characters.")
     })),
     revealHorizontalRightPadding: register(new EditorIntOption(101 /* EditorOption.revealHorizontalRightPadding */, 'revealHorizontalRightPadding', 15, 0, 1000)),
-    roundedSelection: register(new EditorBooleanOption(102 /* EditorOption.roundedSelection */, 'roundedSelection', true, { description: nls.localize('roundedSelection', "Controls whether selections should have rounded corners.") })),
+    roundedSelection: register(new EditorBooleanOption(102 /* EditorOption.roundedSelection */, 'roundedSelection', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'roundedSelection', "Controls whether selections should have rounded corners.") })),
     rulers: register(new EditorRulers()),
     scrollbar: register(new EditorScrollbar()),
-    scrollBeyondLastColumn: register(new EditorIntOption(105 /* EditorOption.scrollBeyondLastColumn */, 'scrollBeyondLastColumn', 4, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('scrollBeyondLastColumn', "Controls the number of extra characters beyond which the editor will scroll horizontally.") })),
-    scrollBeyondLastLine: register(new EditorBooleanOption(106 /* EditorOption.scrollBeyondLastLine */, 'scrollBeyondLastLine', true, { description: nls.localize('scrollBeyondLastLine', "Controls whether the editor will scroll beyond the last line.") })),
-    scrollPredominantAxis: register(new EditorBooleanOption(107 /* EditorOption.scrollPredominantAxis */, 'scrollPredominantAxis', true, { description: nls.localize('scrollPredominantAxis', "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.") })),
+    scrollBeyondLastColumn: register(new EditorIntOption(105 /* EditorOption.scrollBeyondLastColumn */, 'scrollBeyondLastColumn', 4, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('vs/editor/common/config/editorOptions', 'scrollBeyondLastColumn', "Controls the number of extra characters beyond which the editor will scroll horizontally.") })),
+    scrollBeyondLastLine: register(new EditorBooleanOption(106 /* EditorOption.scrollBeyondLastLine */, 'scrollBeyondLastLine', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'scrollBeyondLastLine', "Controls whether the editor will scroll beyond the last line.") })),
+    scrollPredominantAxis: register(new EditorBooleanOption(107 /* EditorOption.scrollPredominantAxis */, 'scrollPredominantAxis', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'scrollPredominantAxis', "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.") })),
     selectionClipboard: register(new EditorBooleanOption(108 /* EditorOption.selectionClipboard */, 'selectionClipboard', true, {
-        description: nls.localize('selectionClipboard', "Controls whether the Linux primary clipboard should be supported."),
+        description: nls.localize('vs/editor/common/config/editorOptions', 'selectionClipboard', "Controls whether the Linux primary clipboard should be supported."),
         included: platform.isLinux
     })),
-    selectionHighlight: register(new EditorBooleanOption(109 /* EditorOption.selectionHighlight */, 'selectionHighlight', true, { description: nls.localize('selectionHighlight', "Controls whether the editor should highlight matches similar to the selection.") })),
+    selectionHighlight: register(new EditorBooleanOption(109 /* EditorOption.selectionHighlight */, 'selectionHighlight', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'selectionHighlight', "Controls whether the editor should highlight matches similar to the selection.") })),
     selectOnLineNumbers: register(new EditorBooleanOption(110 /* EditorOption.selectOnLineNumbers */, 'selectOnLineNumbers', true)),
     showFoldingControls: register(new EditorStringEnumOption(111 /* EditorOption.showFoldingControls */, 'showFoldingControls', 'mouseover', ['always', 'never', 'mouseover'], {
         enumDescriptions: [
-            nls.localize('showFoldingControls.always', "Always show the folding controls."),
-            nls.localize('showFoldingControls.never', "Never show the folding controls and reduce the gutter size."),
-            nls.localize('showFoldingControls.mouseover', "Only show the folding controls when the mouse is over the gutter."),
+            nls.localize('vs/editor/common/config/editorOptions', 'showFoldingControls.always', "Always show the folding controls."),
+            nls.localize('vs/editor/common/config/editorOptions', 'showFoldingControls.never', "Never show the folding controls and reduce the gutter size."),
+            nls.localize('vs/editor/common/config/editorOptions', 'showFoldingControls.mouseover', "Only show the folding controls when the mouse is over the gutter."),
         ],
-        description: nls.localize('showFoldingControls', "Controls when the folding controls on the gutter are shown.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'showFoldingControls', "Controls when the folding controls on the gutter are shown.")
     })),
-    showUnused: register(new EditorBooleanOption(112 /* EditorOption.showUnused */, 'showUnused', true, { description: nls.localize('showUnused', "Controls fading out of unused code.") })),
-    showDeprecated: register(new EditorBooleanOption(141 /* EditorOption.showDeprecated */, 'showDeprecated', true, { description: nls.localize('showDeprecated', "Controls strikethrough deprecated variables.") })),
+    showUnused: register(new EditorBooleanOption(112 /* EditorOption.showUnused */, 'showUnused', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'showUnused', "Controls fading out of unused code.") })),
+    showDeprecated: register(new EditorBooleanOption(141 /* EditorOption.showDeprecated */, 'showDeprecated', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'showDeprecated', "Controls strikethrough deprecated variables.") })),
     inlayHints: register(new EditorInlayHints()),
     snippetSuggestions: register(new EditorStringEnumOption(113 /* EditorOption.snippetSuggestions */, 'snippetSuggestions', 'inline', ['top', 'bottom', 'inline', 'none'], {
         enumDescriptions: [
-            nls.localize('snippetSuggestions.top', "Show snippet suggestions on top of other suggestions."),
-            nls.localize('snippetSuggestions.bottom', "Show snippet suggestions below other suggestions."),
-            nls.localize('snippetSuggestions.inline', "Show snippets suggestions with other suggestions."),
-            nls.localize('snippetSuggestions.none', "Do not show snippet suggestions."),
+            nls.localize('vs/editor/common/config/editorOptions', 'snippetSuggestions.top', "Show snippet suggestions on top of other suggestions."),
+            nls.localize('vs/editor/common/config/editorOptions', 'snippetSuggestions.bottom', "Show snippet suggestions below other suggestions."),
+            nls.localize('vs/editor/common/config/editorOptions', 'snippetSuggestions.inline', "Show snippets suggestions with other suggestions."),
+            nls.localize('vs/editor/common/config/editorOptions', 'snippetSuggestions.none', "Do not show snippet suggestions."),
         ],
-        description: nls.localize('snippetSuggestions', "Controls whether snippets are shown with other suggestions and how they are sorted.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'snippetSuggestions', "Controls whether snippets are shown with other suggestions and how they are sorted.")
     })),
     smartSelect: register(new SmartSelect()),
-    smoothScrolling: register(new EditorBooleanOption(115 /* EditorOption.smoothScrolling */, 'smoothScrolling', false, { description: nls.localize('smoothScrolling', "Controls whether the editor will scroll using an animation.") })),
+    smoothScrolling: register(new EditorBooleanOption(115 /* EditorOption.smoothScrolling */, 'smoothScrolling', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'smoothScrolling', "Controls whether the editor will scroll using an animation.") })),
     stopRenderingLineAfter: register(new EditorIntOption(118 /* EditorOption.stopRenderingLineAfter */, 'stopRenderingLineAfter', 10000, -1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */)),
     suggest: register(new EditorSuggest()),
     inlineSuggest: register(new InlineEditorSuggest()),
     inlineEdit: register(new InlineEditorEdit()),
-    inlineCompletionsAccessibilityVerbose: register(new EditorBooleanOption(150 /* EditorOption.inlineCompletionsAccessibilityVerbose */, 'inlineCompletionsAccessibilityVerbose', false, { description: nls.localize('inlineCompletionsAccessibilityVerbose', "Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.") })),
-    suggestFontSize: register(new EditorIntOption(120 /* EditorOption.suggestFontSize */, 'suggestFontSize', 0, 0, 1000, { markdownDescription: nls.localize('suggestFontSize', "Font size for the suggest widget. When set to {0}, the value of {1} is used.", '`0`', '`#editor.fontSize#`') })),
-    suggestLineHeight: register(new EditorIntOption(121 /* EditorOption.suggestLineHeight */, 'suggestLineHeight', 0, 0, 1000, { markdownDescription: nls.localize('suggestLineHeight', "Line height for the suggest widget. When set to {0}, the value of {1} is used. The minimum value is 8.", '`0`', '`#editor.lineHeight#`') })),
-    suggestOnTriggerCharacters: register(new EditorBooleanOption(122 /* EditorOption.suggestOnTriggerCharacters */, 'suggestOnTriggerCharacters', true, { description: nls.localize('suggestOnTriggerCharacters', "Controls whether suggestions should automatically show up when typing trigger characters.") })),
+    inlineCompletionsAccessibilityVerbose: register(new EditorBooleanOption(150 /* EditorOption.inlineCompletionsAccessibilityVerbose */, 'inlineCompletionsAccessibilityVerbose', false, { description: nls.localize('vs/editor/common/config/editorOptions', 'inlineCompletionsAccessibilityVerbose', "Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.") })),
+    suggestFontSize: register(new EditorIntOption(120 /* EditorOption.suggestFontSize */, 'suggestFontSize', 0, 0, 1000, { markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'suggestFontSize', "Font size for the suggest widget. When set to {0}, the value of {1} is used.", '`0`', '`#editor.fontSize#`') })),
+    suggestLineHeight: register(new EditorIntOption(121 /* EditorOption.suggestLineHeight */, 'suggestLineHeight', 0, 0, 1000, { markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'suggestLineHeight', "Line height for the suggest widget. When set to {0}, the value of {1} is used. The minimum value is 8.", '`0`', '`#editor.lineHeight#`') })),
+    suggestOnTriggerCharacters: register(new EditorBooleanOption(122 /* EditorOption.suggestOnTriggerCharacters */, 'suggestOnTriggerCharacters', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'suggestOnTriggerCharacters', "Controls whether suggestions should automatically show up when typing trigger characters.") })),
     suggestSelection: register(new EditorStringEnumOption(123 /* EditorOption.suggestSelection */, 'suggestSelection', 'first', ['first', 'recentlyUsed', 'recentlyUsedByPrefix'], {
         markdownEnumDescriptions: [
-            nls.localize('suggestSelection.first', "Always select the first suggestion."),
-            nls.localize('suggestSelection.recentlyUsed', "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently."),
-            nls.localize('suggestSelection.recentlyUsedByPrefix', "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."),
+            nls.localize('vs/editor/common/config/editorOptions', 'suggestSelection.first', "Always select the first suggestion."),
+            nls.localize('vs/editor/common/config/editorOptions', 'suggestSelection.recentlyUsed', "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently."),
+            nls.localize('vs/editor/common/config/editorOptions', 'suggestSelection.recentlyUsedByPrefix', "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."),
         ],
-        description: nls.localize('suggestSelection', "Controls how suggestions are pre-selected when showing the suggest list.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'suggestSelection', "Controls how suggestions are pre-selected when showing the suggest list.")
     })),
     tabCompletion: register(new EditorStringEnumOption(124 /* EditorOption.tabCompletion */, 'tabCompletion', 'off', ['on', 'off', 'onlySnippets'], {
         enumDescriptions: [
-            nls.localize('tabCompletion.on', "Tab complete will insert the best matching suggestion when pressing tab."),
-            nls.localize('tabCompletion.off', "Disable tab completions."),
-            nls.localize('tabCompletion.onlySnippets', "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."),
+            nls.localize('vs/editor/common/config/editorOptions', 'tabCompletion.on', "Tab complete will insert the best matching suggestion when pressing tab."),
+            nls.localize('vs/editor/common/config/editorOptions', 'tabCompletion.off', "Disable tab completions."),
+            nls.localize('vs/editor/common/config/editorOptions', 'tabCompletion.onlySnippets', "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."),
         ],
-        description: nls.localize('tabCompletion', "Enables tab completions.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'tabCompletion', "Enables tab completions.")
     })),
     tabIndex: register(new EditorIntOption(125 /* EditorOption.tabIndex */, 'tabIndex', 0, -1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */)),
     unicodeHighlight: register(new UnicodeHighlight()),
     unusualLineTerminators: register(new EditorStringEnumOption(127 /* EditorOption.unusualLineTerminators */, 'unusualLineTerminators', 'prompt', ['auto', 'off', 'prompt'], {
         enumDescriptions: [
-            nls.localize('unusualLineTerminators.auto', "Unusual line terminators are automatically removed."),
-            nls.localize('unusualLineTerminators.off', "Unusual line terminators are ignored."),
-            nls.localize('unusualLineTerminators.prompt', "Unusual line terminators prompt to be removed."),
+            nls.localize('vs/editor/common/config/editorOptions', 'unusualLineTerminators.auto', "Unusual line terminators are automatically removed."),
+            nls.localize('vs/editor/common/config/editorOptions', 'unusualLineTerminators.off', "Unusual line terminators are ignored."),
+            nls.localize('vs/editor/common/config/editorOptions', 'unusualLineTerminators.prompt', "Unusual line terminators prompt to be removed."),
         ],
-        description: nls.localize('unusualLineTerminators', "Remove unusual line terminators that might cause problems.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'unusualLineTerminators', "Remove unusual line terminators that might cause problems.")
     })),
     useShadowDOM: register(new EditorBooleanOption(128 /* EditorOption.useShadowDOM */, 'useShadowDOM', true)),
-    useTabStops: register(new EditorBooleanOption(129 /* EditorOption.useTabStops */, 'useTabStops', true, { description: nls.localize('useTabStops', "Spaces and tabs are inserted and deleted in alignment with tab stops.") })),
+    useTabStops: register(new EditorBooleanOption(129 /* EditorOption.useTabStops */, 'useTabStops', true, { description: nls.localize('vs/editor/common/config/editorOptions', 'useTabStops', "Spaces and tabs are inserted and deleted in alignment with tab stops.") })),
     wordBreak: register(new EditorStringEnumOption(130 /* EditorOption.wordBreak */, 'wordBreak', 'normal', ['normal', 'keepAll'], {
         markdownEnumDescriptions: [
-            nls.localize('wordBreak.normal', "Use the default line break rule."),
-            nls.localize('wordBreak.keepAll', "Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal."),
+            nls.localize('vs/editor/common/config/editorOptions', 'wordBreak.normal', "Use the default line break rule."),
+            nls.localize('vs/editor/common/config/editorOptions', 'wordBreak.keepAll', "Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal."),
         ],
-        description: nls.localize('wordBreak', "Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.")
+        description: nls.localize('vs/editor/common/config/editorOptions', 'wordBreak', "Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.")
     })),
     wordSegmenterLocales: register(new WordSegmenterLocales()),
-    wordSeparators: register(new EditorStringOption(132 /* EditorOption.wordSeparators */, 'wordSeparators', USUAL_WORD_SEPARATORS, { description: nls.localize('wordSeparators', "Characters that will be used as word separators when doing word related navigations or operations.") })),
+    wordSeparators: register(new EditorStringOption(132 /* EditorOption.wordSeparators */, 'wordSeparators', USUAL_WORD_SEPARATORS, { description: nls.localize('vs/editor/common/config/editorOptions', 'wordSeparators', "Characters that will be used as word separators when doing word related navigations or operations.") })),
     wordWrap: register(new EditorStringEnumOption(133 /* EditorOption.wordWrap */, 'wordWrap', 'off', ['off', 'on', 'wordWrapColumn', 'bounded'], {
         markdownEnumDescriptions: [
-            nls.localize('wordWrap.off', "Lines will never wrap."),
-            nls.localize('wordWrap.on', "Lines will wrap at the viewport width."),
-            nls.localize({
+            nls.localize('vs/editor/common/config/editorOptions', 'wordWrap.off', "Lines will never wrap."),
+            nls.localize('vs/editor/common/config/editorOptions', 'wordWrap.on', "Lines will wrap at the viewport width."),
+            nls.localize('vs/editor/common/config/editorOptions', {
                 key: 'wordWrap.wordWrapColumn',
                 comment: [
                     '- `editor.wordWrapColumn` refers to a different setting and should not be localized.'
                 ]
             }, "Lines will wrap at `#editor.wordWrapColumn#`."),
-            nls.localize({
+            nls.localize('vs/editor/common/config/editorOptions', {
                 key: 'wordWrap.bounded',
                 comment: [
                     '- viewport means the edge of the visible window size.',
@@ -3109,7 +3109,7 @@ export const EditorOptions = {
                 ]
             }, "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`."),
         ],
-        description: nls.localize({
+        description: nls.localize('vs/editor/common/config/editorOptions', {
             key: 'wordWrap',
             comment: [
                 '- \'off\', \'on\', \'wordWrapColumn\' and \'bounded\' refer to values the setting can take and should not be localized.',
@@ -3124,7 +3124,7 @@ export const EditorOptions = {
     // allow-any-unicode-next-line
     '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋')),
     wordWrapColumn: register(new EditorIntOption(136 /* EditorOption.wordWrapColumn */, 'wordWrapColumn', 80, 1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, {
-        markdownDescription: nls.localize({
+        markdownDescription: nls.localize('vs/editor/common/config/editorOptions', {
             key: 'wordWrapColumn',
             comment: [
                 '- `editor.wordWrap` refers to a different setting and should not be localized.',
@@ -3136,9 +3136,9 @@ export const EditorOptions = {
     wordWrapOverride2: register(new EditorStringEnumOption(138 /* EditorOption.wordWrapOverride2 */, 'wordWrapOverride2', 'inherit', ['off', 'on', 'inherit'])),
     // Leave these at the end (because they have dependencies!)
     editorClassName: register(new EditorClassName()),
-    defaultColorDecorators: register(new EditorBooleanOption(148 /* EditorOption.defaultColorDecorators */, 'defaultColorDecorators', false, { markdownDescription: nls.localize('defaultColorDecorators', "Controls whether inline color decorations should be shown using the default document color provider") })),
+    defaultColorDecorators: register(new EditorBooleanOption(148 /* EditorOption.defaultColorDecorators */, 'defaultColorDecorators', false, { markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'defaultColorDecorators', "Controls whether inline color decorations should be shown using the default document color provider") })),
     pixelRatio: register(new EditorPixelRatio()),
-    tabFocusMode: register(new EditorBooleanOption(145 /* EditorOption.tabFocusMode */, 'tabFocusMode', false, { markdownDescription: nls.localize('tabFocusMode', "Controls whether the editor receives tabs or defers them to the workbench for navigation.") })),
+    tabFocusMode: register(new EditorBooleanOption(145 /* EditorOption.tabFocusMode */, 'tabFocusMode', false, { markdownDescription: nls.localize('vs/editor/common/config/editorOptions', 'tabFocusMode', "Controls whether the editor receives tabs or defers them to the workbench for navigation.") })),
     layoutInfo: register(new EditorLayoutInfoComputer()),
     wrappingInfo: register(new EditorWrappingInfoComputer()),
     wrappingIndent: register(new WrappingIndentOption()),
diff --git a/esm/vs/editor/common/core/editorColorRegistry.js b/esm/vs/editor/common/core/editorColorRegistry.js
index a2449b5d603738ec9b919e5a50f22a301e7fbdbc..cdf9dc4ee4383139979afa63c10c57650673eea7 100644
--- a/esm/vs/editor/common/core/editorColorRegistry.js
+++ b/esm/vs/editor/common/core/editorColorRegistry.js
@@ -9,75 +9,75 @@ import { registerThemingParticipant } from '../../../platform/theme/common/theme
 /**
  * Definition of the editor colors
  */
-export const editorLineHighlight = registerColor('editor.lineHighlightBackground', null, nls.localize('lineHighlight', 'Background color for the highlight of line at the cursor position.'));
-export const editorLineHighlightBorder = registerColor('editor.lineHighlightBorder', { dark: '#282828', light: '#eeeeee', hcDark: '#f38518', hcLight: contrastBorder }, nls.localize('lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));
-export const editorRangeHighlight = registerColor('editor.rangeHighlightBackground', { dark: '#ffffff0b', light: '#fdff0033', hcDark: null, hcLight: null }, nls.localize('rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const editorRangeHighlightBorder = registerColor('editor.rangeHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('rangeHighlightBorder', 'Background color of the border around highlighted ranges.'));
-export const editorSymbolHighlight = registerColor('editor.symbolHighlightBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('symbolHighlight', 'Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const editorSymbolHighlightBorder = registerColor('editor.symbolHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('symbolHighlightBorder', 'Background color of the border around highlighted symbols.'));
-export const editorCursorForeground = registerColor('editorCursor.foreground', { dark: '#AEAFAD', light: Color.black, hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('caret', 'Color of the editor cursor.'));
-export const editorCursorBackground = registerColor('editorCursor.background', null, nls.localize('editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));
-export const editorMultiCursorPrimaryForeground = registerColor('editorMultiCursor.primary.foreground', editorCursorForeground, nls.localize('editorMultiCursorPrimaryForeground', 'Color of the primary editor cursor when multiple cursors are present.'));
-export const editorMultiCursorPrimaryBackground = registerColor('editorMultiCursor.primary.background', editorCursorBackground, nls.localize('editorMultiCursorPrimaryBackground', 'The background color of the primary editor cursor when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.'));
-export const editorMultiCursorSecondaryForeground = registerColor('editorMultiCursor.secondary.foreground', editorCursorForeground, nls.localize('editorMultiCursorSecondaryForeground', 'Color of secondary editor cursors when multiple cursors are present.'));
-export const editorMultiCursorSecondaryBackground = registerColor('editorMultiCursor.secondary.background', editorCursorBackground, nls.localize('editorMultiCursorSecondaryBackground', 'The background color of secondary editor cursors when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.'));
-export const editorWhitespaces = registerColor('editorWhitespace.foreground', { dark: '#e3e4e229', light: '#33333333', hcDark: '#e3e4e229', hcLight: '#CCCCCC' }, nls.localize('editorWhitespaces', 'Color of whitespace characters in the editor.'));
-export const editorLineNumbers = registerColor('editorLineNumber.foreground', { dark: '#858585', light: '#237893', hcDark: Color.white, hcLight: '#292929' }, nls.localize('editorLineNumbers', 'Color of editor line numbers.'));
-export const deprecatedEditorIndentGuides = registerColor('editorIndentGuide.background', editorWhitespaces, nls.localize('editorIndentGuides', 'Color of the editor indentation guides.'), false, nls.localize('deprecatedEditorIndentGuides', '\'editorIndentGuide.background\' is deprecated. Use \'editorIndentGuide.background1\' instead.'));
-export const deprecatedEditorActiveIndentGuides = registerColor('editorIndentGuide.activeBackground', editorWhitespaces, nls.localize('editorActiveIndentGuide', 'Color of the active editor indentation guides.'), false, nls.localize('deprecatedEditorActiveIndentGuide', '\'editorIndentGuide.activeBackground\' is deprecated. Use \'editorIndentGuide.activeBackground1\' instead.'));
-export const editorIndentGuide1 = registerColor('editorIndentGuide.background1', deprecatedEditorIndentGuides, nls.localize('editorIndentGuides1', 'Color of the editor indentation guides (1).'));
-export const editorIndentGuide2 = registerColor('editorIndentGuide.background2', '#00000000', nls.localize('editorIndentGuides2', 'Color of the editor indentation guides (2).'));
-export const editorIndentGuide3 = registerColor('editorIndentGuide.background3', '#00000000', nls.localize('editorIndentGuides3', 'Color of the editor indentation guides (3).'));
-export const editorIndentGuide4 = registerColor('editorIndentGuide.background4', '#00000000', nls.localize('editorIndentGuides4', 'Color of the editor indentation guides (4).'));
-export const editorIndentGuide5 = registerColor('editorIndentGuide.background5', '#00000000', nls.localize('editorIndentGuides5', 'Color of the editor indentation guides (5).'));
-export const editorIndentGuide6 = registerColor('editorIndentGuide.background6', '#00000000', nls.localize('editorIndentGuides6', 'Color of the editor indentation guides (6).'));
-export const editorActiveIndentGuide1 = registerColor('editorIndentGuide.activeBackground1', deprecatedEditorActiveIndentGuides, nls.localize('editorActiveIndentGuide1', 'Color of the active editor indentation guides (1).'));
-export const editorActiveIndentGuide2 = registerColor('editorIndentGuide.activeBackground2', '#00000000', nls.localize('editorActiveIndentGuide2', 'Color of the active editor indentation guides (2).'));
-export const editorActiveIndentGuide3 = registerColor('editorIndentGuide.activeBackground3', '#00000000', nls.localize('editorActiveIndentGuide3', 'Color of the active editor indentation guides (3).'));
-export const editorActiveIndentGuide4 = registerColor('editorIndentGuide.activeBackground4', '#00000000', nls.localize('editorActiveIndentGuide4', 'Color of the active editor indentation guides (4).'));
-export const editorActiveIndentGuide5 = registerColor('editorIndentGuide.activeBackground5', '#00000000', nls.localize('editorActiveIndentGuide5', 'Color of the active editor indentation guides (5).'));
-export const editorActiveIndentGuide6 = registerColor('editorIndentGuide.activeBackground6', '#00000000', nls.localize('editorActiveIndentGuide6', 'Color of the active editor indentation guides (6).'));
-const deprecatedEditorActiveLineNumber = registerColor('editorActiveLineNumber.foreground', { dark: '#c6c6c6', light: '#0B216F', hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \'editorLineNumber.activeForeground\' instead.'));
-export const editorActiveLineNumber = registerColor('editorLineNumber.activeForeground', deprecatedEditorActiveLineNumber, nls.localize('editorActiveLineNumber', 'Color of editor active line number'));
-export const editorDimmedLineNumber = registerColor('editorLineNumber.dimmedForeground', null, nls.localize('editorDimmedLineNumber', 'Color of the final editor line when editor.renderFinalNewline is set to dimmed.'));
-export const editorRuler = registerColor('editorRuler.foreground', { dark: '#5A5A5A', light: Color.lightgrey, hcDark: Color.white, hcLight: '#292929' }, nls.localize('editorRuler', 'Color of the editor rulers.'));
-export const editorCodeLensForeground = registerColor('editorCodeLens.foreground', { dark: '#999999', light: '#919191', hcDark: '#999999', hcLight: '#292929' }, nls.localize('editorCodeLensForeground', 'Foreground color of editor CodeLens'));
-export const editorBracketMatchBackground = registerColor('editorBracketMatch.background', { dark: '#0064001a', light: '#0064001a', hcDark: '#0064001a', hcLight: '#0000' }, nls.localize('editorBracketMatchBackground', 'Background color behind matching brackets'));
-export const editorBracketMatchBorder = registerColor('editorBracketMatch.border', { dark: '#888', light: '#B9B9B9', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorBracketMatchBorder', 'Color for matching brackets boxes'));
-export const editorOverviewRulerBorder = registerColor('editorOverviewRuler.border', { dark: '#7f7f7f4d', light: '#7f7f7f4d', hcDark: '#7f7f7f4d', hcLight: '#666666' }, nls.localize('editorOverviewRulerBorder', 'Color of the overview ruler border.'));
-export const editorOverviewRulerBackground = registerColor('editorOverviewRuler.background', null, nls.localize('editorOverviewRulerBackground', 'Background color of the editor overview ruler.'));
-export const editorGutter = registerColor('editorGutter.background', editorBackground, nls.localize('editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));
-export const editorUnnecessaryCodeBorder = registerColor('editorUnnecessaryCode.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: contrastBorder }, nls.localize('unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));
-export const editorUnnecessaryCodeOpacity = registerColor('editorUnnecessaryCode.opacity', { dark: Color.fromHex('#000a'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, "#000000c0" will render the code with 75% opacity. For high contrast themes, use the  \'editorUnnecessaryCode.border\' theme color to underline unnecessary code instead of fading it out.'));
-export const ghostTextBorder = registerColor('editorGhostText.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: Color.fromHex('#292929').transparent(0.8) }, nls.localize('editorGhostTextBorder', 'Border color of ghost text in the editor.'));
-export const ghostTextForeground = registerColor('editorGhostText.foreground', { dark: Color.fromHex('#ffffff56'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('editorGhostTextForeground', 'Foreground color of the ghost text in the editor.'));
-export const ghostTextBackground = registerColor('editorGhostText.background', null, nls.localize('editorGhostTextBackground', 'Background color of the ghost text in the editor.'));
+export const editorLineHighlight = registerColor('editor.lineHighlightBackground', null, nls.localize('vs/editor/common/core/editorColorRegistry', 'lineHighlight', 'Background color for the highlight of line at the cursor position.'));
+export const editorLineHighlightBorder = registerColor('editor.lineHighlightBorder', { dark: '#282828', light: '#eeeeee', hcDark: '#f38518', hcLight: contrastBorder }, nls.localize('vs/editor/common/core/editorColorRegistry', 'lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));
+export const editorRangeHighlight = registerColor('editor.rangeHighlightBackground', { dark: '#ffffff0b', light: '#fdff0033', hcDark: null, hcLight: null }, nls.localize('vs/editor/common/core/editorColorRegistry', 'rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const editorRangeHighlightBorder = registerColor('editor.rangeHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/editor/common/core/editorColorRegistry', 'rangeHighlightBorder', 'Background color of the border around highlighted ranges.'));
+export const editorSymbolHighlight = registerColor('editor.symbolHighlightBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('vs/editor/common/core/editorColorRegistry', 'symbolHighlight', 'Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const editorSymbolHighlightBorder = registerColor('editor.symbolHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/editor/common/core/editorColorRegistry', 'symbolHighlightBorder', 'Background color of the border around highlighted symbols.'));
+export const editorCursorForeground = registerColor('editorCursor.foreground', { dark: '#AEAFAD', light: Color.black, hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'caret', 'Color of the editor cursor.'));
+export const editorCursorBackground = registerColor('editorCursor.background', null, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));
+export const editorMultiCursorPrimaryForeground = registerColor('editorMultiCursor.primary.foreground', editorCursorForeground, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorMultiCursorPrimaryForeground', 'Color of the primary editor cursor when multiple cursors are present.'));
+export const editorMultiCursorPrimaryBackground = registerColor('editorMultiCursor.primary.background', editorCursorBackground, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorMultiCursorPrimaryBackground', 'The background color of the primary editor cursor when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.'));
+export const editorMultiCursorSecondaryForeground = registerColor('editorMultiCursor.secondary.foreground', editorCursorForeground, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorMultiCursorSecondaryForeground', 'Color of secondary editor cursors when multiple cursors are present.'));
+export const editorMultiCursorSecondaryBackground = registerColor('editorMultiCursor.secondary.background', editorCursorBackground, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorMultiCursorSecondaryBackground', 'The background color of secondary editor cursors when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.'));
+export const editorWhitespaces = registerColor('editorWhitespace.foreground', { dark: '#e3e4e229', light: '#33333333', hcDark: '#e3e4e229', hcLight: '#CCCCCC' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorWhitespaces', 'Color of whitespace characters in the editor.'));
+export const editorLineNumbers = registerColor('editorLineNumber.foreground', { dark: '#858585', light: '#237893', hcDark: Color.white, hcLight: '#292929' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorLineNumbers', 'Color of editor line numbers.'));
+export const deprecatedEditorIndentGuides = registerColor('editorIndentGuide.background', editorWhitespaces, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorIndentGuides', 'Color of the editor indentation guides.'), false, nls.localize('vs/editor/common/core/editorColorRegistry', 'deprecatedEditorIndentGuides', '\'editorIndentGuide.background\' is deprecated. Use \'editorIndentGuide.background1\' instead.'));
+export const deprecatedEditorActiveIndentGuides = registerColor('editorIndentGuide.activeBackground', editorWhitespaces, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorActiveIndentGuide', 'Color of the active editor indentation guides.'), false, nls.localize('vs/editor/common/core/editorColorRegistry', 'deprecatedEditorActiveIndentGuide', '\'editorIndentGuide.activeBackground\' is deprecated. Use \'editorIndentGuide.activeBackground1\' instead.'));
+export const editorIndentGuide1 = registerColor('editorIndentGuide.background1', deprecatedEditorIndentGuides, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorIndentGuides1', 'Color of the editor indentation guides (1).'));
+export const editorIndentGuide2 = registerColor('editorIndentGuide.background2', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorIndentGuides2', 'Color of the editor indentation guides (2).'));
+export const editorIndentGuide3 = registerColor('editorIndentGuide.background3', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorIndentGuides3', 'Color of the editor indentation guides (3).'));
+export const editorIndentGuide4 = registerColor('editorIndentGuide.background4', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorIndentGuides4', 'Color of the editor indentation guides (4).'));
+export const editorIndentGuide5 = registerColor('editorIndentGuide.background5', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorIndentGuides5', 'Color of the editor indentation guides (5).'));
+export const editorIndentGuide6 = registerColor('editorIndentGuide.background6', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorIndentGuides6', 'Color of the editor indentation guides (6).'));
+export const editorActiveIndentGuide1 = registerColor('editorIndentGuide.activeBackground1', deprecatedEditorActiveIndentGuides, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorActiveIndentGuide1', 'Color of the active editor indentation guides (1).'));
+export const editorActiveIndentGuide2 = registerColor('editorIndentGuide.activeBackground2', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorActiveIndentGuide2', 'Color of the active editor indentation guides (2).'));
+export const editorActiveIndentGuide3 = registerColor('editorIndentGuide.activeBackground3', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorActiveIndentGuide3', 'Color of the active editor indentation guides (3).'));
+export const editorActiveIndentGuide4 = registerColor('editorIndentGuide.activeBackground4', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorActiveIndentGuide4', 'Color of the active editor indentation guides (4).'));
+export const editorActiveIndentGuide5 = registerColor('editorIndentGuide.activeBackground5', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorActiveIndentGuide5', 'Color of the active editor indentation guides (5).'));
+export const editorActiveIndentGuide6 = registerColor('editorIndentGuide.activeBackground6', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorActiveIndentGuide6', 'Color of the active editor indentation guides (6).'));
+const deprecatedEditorActiveLineNumber = registerColor('editorActiveLineNumber.foreground', { dark: '#c6c6c6', light: '#0B216F', hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('vs/editor/common/core/editorColorRegistry', 'deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \'editorLineNumber.activeForeground\' instead.'));
+export const editorActiveLineNumber = registerColor('editorLineNumber.activeForeground', deprecatedEditorActiveLineNumber, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorActiveLineNumber', 'Color of editor active line number'));
+export const editorDimmedLineNumber = registerColor('editorLineNumber.dimmedForeground', null, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorDimmedLineNumber', 'Color of the final editor line when editor.renderFinalNewline is set to dimmed.'));
+export const editorRuler = registerColor('editorRuler.foreground', { dark: '#5A5A5A', light: Color.lightgrey, hcDark: Color.white, hcLight: '#292929' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorRuler', 'Color of the editor rulers.'));
+export const editorCodeLensForeground = registerColor('editorCodeLens.foreground', { dark: '#999999', light: '#919191', hcDark: '#999999', hcLight: '#292929' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorCodeLensForeground', 'Foreground color of editor CodeLens'));
+export const editorBracketMatchBackground = registerColor('editorBracketMatch.background', { dark: '#0064001a', light: '#0064001a', hcDark: '#0064001a', hcLight: '#0000' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketMatchBackground', 'Background color behind matching brackets'));
+export const editorBracketMatchBorder = registerColor('editorBracketMatch.border', { dark: '#888', light: '#B9B9B9', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketMatchBorder', 'Color for matching brackets boxes'));
+export const editorOverviewRulerBorder = registerColor('editorOverviewRuler.border', { dark: '#7f7f7f4d', light: '#7f7f7f4d', hcDark: '#7f7f7f4d', hcLight: '#666666' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorOverviewRulerBorder', 'Color of the overview ruler border.'));
+export const editorOverviewRulerBackground = registerColor('editorOverviewRuler.background', null, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorOverviewRulerBackground', 'Background color of the editor overview ruler.'));
+export const editorGutter = registerColor('editorGutter.background', editorBackground, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));
+export const editorUnnecessaryCodeBorder = registerColor('editorUnnecessaryCode.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: contrastBorder }, nls.localize('vs/editor/common/core/editorColorRegistry', 'unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));
+export const editorUnnecessaryCodeOpacity = registerColor('editorUnnecessaryCode.opacity', { dark: Color.fromHex('#000a'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('vs/editor/common/core/editorColorRegistry', 'unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, "#000000c0" will render the code with 75% opacity. For high contrast themes, use the  \'editorUnnecessaryCode.border\' theme color to underline unnecessary code instead of fading it out.'));
+export const ghostTextBorder = registerColor('editorGhostText.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: Color.fromHex('#292929').transparent(0.8) }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorGhostTextBorder', 'Border color of ghost text in the editor.'));
+export const ghostTextForeground = registerColor('editorGhostText.foreground', { dark: Color.fromHex('#ffffff56'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorGhostTextForeground', 'Foreground color of the ghost text in the editor.'));
+export const ghostTextBackground = registerColor('editorGhostText.background', null, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorGhostTextBackground', 'Background color of the ghost text in the editor.'));
 const rulerRangeDefault = new Color(new RGBA(0, 122, 204, 0.6));
-export const overviewRulerRangeHighlight = registerColor('editorOverviewRuler.rangeHighlightForeground', rulerRangeDefault, nls.localize('overviewRulerRangeHighlight', 'Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const overviewRulerError = registerColor('editorOverviewRuler.errorForeground', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('overviewRuleError', 'Overview ruler marker color for errors.'));
-export const overviewRulerWarning = registerColor('editorOverviewRuler.warningForeground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Overview ruler marker color for warnings.'));
-export const overviewRulerInfo = registerColor('editorOverviewRuler.infoForeground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('overviewRuleInfo', 'Overview ruler marker color for infos.'));
-export const editorBracketHighlightingForeground1 = registerColor('editorBracketHighlight.foreground1', { dark: '#FFD700', light: '#0431FAFF', hcDark: '#FFD700', hcLight: '#0431FAFF' }, nls.localize('editorBracketHighlightForeground1', 'Foreground color of brackets (1). Requires enabling bracket pair colorization.'));
-export const editorBracketHighlightingForeground2 = registerColor('editorBracketHighlight.foreground2', { dark: '#DA70D6', light: '#319331FF', hcDark: '#DA70D6', hcLight: '#319331FF' }, nls.localize('editorBracketHighlightForeground2', 'Foreground color of brackets (2). Requires enabling bracket pair colorization.'));
-export const editorBracketHighlightingForeground3 = registerColor('editorBracketHighlight.foreground3', { dark: '#179FFF', light: '#7B3814FF', hcDark: '#87CEFA', hcLight: '#7B3814FF' }, nls.localize('editorBracketHighlightForeground3', 'Foreground color of brackets (3). Requires enabling bracket pair colorization.'));
-export const editorBracketHighlightingForeground4 = registerColor('editorBracketHighlight.foreground4', '#00000000', nls.localize('editorBracketHighlightForeground4', 'Foreground color of brackets (4). Requires enabling bracket pair colorization.'));
-export const editorBracketHighlightingForeground5 = registerColor('editorBracketHighlight.foreground5', '#00000000', nls.localize('editorBracketHighlightForeground5', 'Foreground color of brackets (5). Requires enabling bracket pair colorization.'));
-export const editorBracketHighlightingForeground6 = registerColor('editorBracketHighlight.foreground6', '#00000000', nls.localize('editorBracketHighlightForeground6', 'Foreground color of brackets (6). Requires enabling bracket pair colorization.'));
-export const editorBracketHighlightingUnexpectedBracketForeground = registerColor('editorBracketHighlight.unexpectedBracket.foreground', { dark: new Color(new RGBA(255, 18, 18, 0.8)), light: new Color(new RGBA(255, 18, 18, 0.8)), hcDark: 'new Color(new RGBA(255, 50, 50, 1))', hcLight: '#B5200D' }, nls.localize('editorBracketHighlightUnexpectedBracketForeground', 'Foreground color of unexpected brackets.'));
-export const editorBracketPairGuideBackground1 = registerColor('editorBracketPairGuide.background1', '#00000000', nls.localize('editorBracketPairGuide.background1', 'Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideBackground2 = registerColor('editorBracketPairGuide.background2', '#00000000', nls.localize('editorBracketPairGuide.background2', 'Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideBackground3 = registerColor('editorBracketPairGuide.background3', '#00000000', nls.localize('editorBracketPairGuide.background3', 'Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideBackground4 = registerColor('editorBracketPairGuide.background4', '#00000000', nls.localize('editorBracketPairGuide.background4', 'Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideBackground5 = registerColor('editorBracketPairGuide.background5', '#00000000', nls.localize('editorBracketPairGuide.background5', 'Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideBackground6 = registerColor('editorBracketPairGuide.background6', '#00000000', nls.localize('editorBracketPairGuide.background6', 'Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideActiveBackground1 = registerColor('editorBracketPairGuide.activeBackground1', '#00000000', nls.localize('editorBracketPairGuide.activeBackground1', 'Background color of active bracket pair guides (1). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideActiveBackground2 = registerColor('editorBracketPairGuide.activeBackground2', '#00000000', nls.localize('editorBracketPairGuide.activeBackground2', 'Background color of active bracket pair guides (2). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideActiveBackground3 = registerColor('editorBracketPairGuide.activeBackground3', '#00000000', nls.localize('editorBracketPairGuide.activeBackground3', 'Background color of active bracket pair guides (3). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideActiveBackground4 = registerColor('editorBracketPairGuide.activeBackground4', '#00000000', nls.localize('editorBracketPairGuide.activeBackground4', 'Background color of active bracket pair guides (4). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideActiveBackground5 = registerColor('editorBracketPairGuide.activeBackground5', '#00000000', nls.localize('editorBracketPairGuide.activeBackground5', 'Background color of active bracket pair guides (5). Requires enabling bracket pair guides.'));
-export const editorBracketPairGuideActiveBackground6 = registerColor('editorBracketPairGuide.activeBackground6', '#00000000', nls.localize('editorBracketPairGuide.activeBackground6', 'Background color of active bracket pair guides (6). Requires enabling bracket pair guides.'));
-export const editorUnicodeHighlightBorder = registerColor('editorUnicodeHighlight.border', editorWarningForeground, nls.localize('editorUnicodeHighlight.border', 'Border color used to highlight unicode characters.'));
-export const editorUnicodeHighlightBackground = registerColor('editorUnicodeHighlight.background', editorWarningBackground, nls.localize('editorUnicodeHighlight.background', 'Background color used to highlight unicode characters.'));
+export const overviewRulerRangeHighlight = registerColor('editorOverviewRuler.rangeHighlightForeground', rulerRangeDefault, nls.localize('vs/editor/common/core/editorColorRegistry', 'overviewRulerRangeHighlight', 'Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const overviewRulerError = registerColor('editorOverviewRuler.errorForeground', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'overviewRuleError', 'Overview ruler marker color for errors.'));
+export const overviewRulerWarning = registerColor('editorOverviewRuler.warningForeground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('vs/editor/common/core/editorColorRegistry', 'overviewRuleWarning', 'Overview ruler marker color for warnings.'));
+export const overviewRulerInfo = registerColor('editorOverviewRuler.infoForeground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('vs/editor/common/core/editorColorRegistry', 'overviewRuleInfo', 'Overview ruler marker color for infos.'));
+export const editorBracketHighlightingForeground1 = registerColor('editorBracketHighlight.foreground1', { dark: '#FFD700', light: '#0431FAFF', hcDark: '#FFD700', hcLight: '#0431FAFF' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketHighlightForeground1', 'Foreground color of brackets (1). Requires enabling bracket pair colorization.'));
+export const editorBracketHighlightingForeground2 = registerColor('editorBracketHighlight.foreground2', { dark: '#DA70D6', light: '#319331FF', hcDark: '#DA70D6', hcLight: '#319331FF' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketHighlightForeground2', 'Foreground color of brackets (2). Requires enabling bracket pair colorization.'));
+export const editorBracketHighlightingForeground3 = registerColor('editorBracketHighlight.foreground3', { dark: '#179FFF', light: '#7B3814FF', hcDark: '#87CEFA', hcLight: '#7B3814FF' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketHighlightForeground3', 'Foreground color of brackets (3). Requires enabling bracket pair colorization.'));
+export const editorBracketHighlightingForeground4 = registerColor('editorBracketHighlight.foreground4', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketHighlightForeground4', 'Foreground color of brackets (4). Requires enabling bracket pair colorization.'));
+export const editorBracketHighlightingForeground5 = registerColor('editorBracketHighlight.foreground5', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketHighlightForeground5', 'Foreground color of brackets (5). Requires enabling bracket pair colorization.'));
+export const editorBracketHighlightingForeground6 = registerColor('editorBracketHighlight.foreground6', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketHighlightForeground6', 'Foreground color of brackets (6). Requires enabling bracket pair colorization.'));
+export const editorBracketHighlightingUnexpectedBracketForeground = registerColor('editorBracketHighlight.unexpectedBracket.foreground', { dark: new Color(new RGBA(255, 18, 18, 0.8)), light: new Color(new RGBA(255, 18, 18, 0.8)), hcDark: 'new Color(new RGBA(255, 50, 50, 1))', hcLight: '#B5200D' }, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketHighlightUnexpectedBracketForeground', 'Foreground color of unexpected brackets.'));
+export const editorBracketPairGuideBackground1 = registerColor('editorBracketPairGuide.background1', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.background1', 'Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideBackground2 = registerColor('editorBracketPairGuide.background2', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.background2', 'Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideBackground3 = registerColor('editorBracketPairGuide.background3', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.background3', 'Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideBackground4 = registerColor('editorBracketPairGuide.background4', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.background4', 'Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideBackground5 = registerColor('editorBracketPairGuide.background5', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.background5', 'Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideBackground6 = registerColor('editorBracketPairGuide.background6', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.background6', 'Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideActiveBackground1 = registerColor('editorBracketPairGuide.activeBackground1', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.activeBackground1', 'Background color of active bracket pair guides (1). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideActiveBackground2 = registerColor('editorBracketPairGuide.activeBackground2', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.activeBackground2', 'Background color of active bracket pair guides (2). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideActiveBackground3 = registerColor('editorBracketPairGuide.activeBackground3', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.activeBackground3', 'Background color of active bracket pair guides (3). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideActiveBackground4 = registerColor('editorBracketPairGuide.activeBackground4', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.activeBackground4', 'Background color of active bracket pair guides (4). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideActiveBackground5 = registerColor('editorBracketPairGuide.activeBackground5', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.activeBackground5', 'Background color of active bracket pair guides (5). Requires enabling bracket pair guides.'));
+export const editorBracketPairGuideActiveBackground6 = registerColor('editorBracketPairGuide.activeBackground6', '#00000000', nls.localize('vs/editor/common/core/editorColorRegistry', 'editorBracketPairGuide.activeBackground6', 'Background color of active bracket pair guides (6). Requires enabling bracket pair guides.'));
+export const editorUnicodeHighlightBorder = registerColor('editorUnicodeHighlight.border', editorWarningForeground, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorUnicodeHighlight.border', 'Border color used to highlight unicode characters.'));
+export const editorUnicodeHighlightBackground = registerColor('editorUnicodeHighlight.background', editorWarningBackground, nls.localize('vs/editor/common/core/editorColorRegistry', 'editorUnicodeHighlight.background', 'Background color used to highlight unicode characters.'));
 // contains all color rules that used to defined in editor/browser/widget/editor.css
 registerThemingParticipant((theme, collector) => {
     const background = theme.getColor(editorBackground);
diff --git a/esm/vs/editor/common/cursor/cursor.js b/esm/vs/editor/common/cursor/cursor.js
index da851bd6a9b8a5921cea1a8746f0e7f730eb3dd6..8b1278f4cac11f45d1e427d39128d56519189c5b 100644
--- a/esm/vs/editor/common/cursor/cursor.js
+++ b/esm/vs/editor/common/cursor/cursor.js
@@ -779,7 +779,7 @@ export class CommandExecutor {
         }
         catch (e) {
             // TODO@Alex use notification service if this should be user facing
-            // e.friendlyMessage = nls.localize('corrupt.commands', "Unexpected exception while executing command.");
+            // e.friendlyMessage = nls.localize('vs/editor/common/cursor/cursor', 'corrupt.commands', "Unexpected exception while executing command.");
             onUnexpectedError(e);
             return {
                 operations: [],
diff --git a/esm/vs/editor/common/editorContextKeys.js b/esm/vs/editor/common/editorContextKeys.js
index 3423e9d76d8da34fa323dc9e839bf1021f9c8440..ac554bd39f952b0eb3dda4f1678e681835b7fc56 100644
--- a/esm/vs/editor/common/editorContextKeys.js
+++ b/esm/vs/editor/common/editorContextKeys.js
@@ -11,71 +11,71 @@ export var EditorContextKeys;
      * A context key that is set when the editor's text has focus (cursor is blinking).
      * Is false when focus is in simple editor widgets (repl input, scm commit input).
      */
-    EditorContextKeys.editorTextFocus = new RawContextKey('editorTextFocus', false, nls.localize('editorTextFocus', "Whether the editor text has focus (cursor is blinking)"));
+    EditorContextKeys.editorTextFocus = new RawContextKey('editorTextFocus', false, nls.localize('vs/editor/common/editorContextKeys', 'editorTextFocus', "Whether the editor text has focus (cursor is blinking)"));
     /**
      * A context key that is set when the editor's text or an editor's widget has focus.
      */
-    EditorContextKeys.focus = new RawContextKey('editorFocus', false, nls.localize('editorFocus', "Whether the editor or an editor widget has focus (e.g. focus is in the find widget)"));
+    EditorContextKeys.focus = new RawContextKey('editorFocus', false, nls.localize('vs/editor/common/editorContextKeys', 'editorFocus', "Whether the editor or an editor widget has focus (e.g. focus is in the find widget)"));
     /**
      * A context key that is set when any editor input has focus (regular editor, repl input...).
      */
-    EditorContextKeys.textInputFocus = new RawContextKey('textInputFocus', false, nls.localize('textInputFocus', "Whether an editor or a rich text input has focus (cursor is blinking)"));
-    EditorContextKeys.readOnly = new RawContextKey('editorReadonly', false, nls.localize('editorReadonly', "Whether the editor is read-only"));
-    EditorContextKeys.inDiffEditor = new RawContextKey('inDiffEditor', false, nls.localize('inDiffEditor', "Whether the context is a diff editor"));
-    EditorContextKeys.isEmbeddedDiffEditor = new RawContextKey('isEmbeddedDiffEditor', false, nls.localize('isEmbeddedDiffEditor', "Whether the context is an embedded diff editor"));
-    EditorContextKeys.inMultiDiffEditor = new RawContextKey('inMultiDiffEditor', false, nls.localize('inMultiDiffEditor', "Whether the context is a multi diff editor"));
-    EditorContextKeys.multiDiffEditorAllCollapsed = new RawContextKey('multiDiffEditorAllCollapsed', undefined, nls.localize('multiDiffEditorAllCollapsed', "Whether all files in multi diff editor are collapsed"));
-    EditorContextKeys.hasChanges = new RawContextKey('diffEditorHasChanges', false, nls.localize('diffEditorHasChanges', "Whether the diff editor has changes"));
-    EditorContextKeys.comparingMovedCode = new RawContextKey('comparingMovedCode', false, nls.localize('comparingMovedCode', "Whether a moved code block is selected for comparison"));
-    EditorContextKeys.accessibleDiffViewerVisible = new RawContextKey('accessibleDiffViewerVisible', false, nls.localize('accessibleDiffViewerVisible', "Whether the accessible diff viewer is visible"));
-    EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached = new RawContextKey('diffEditorRenderSideBySideInlineBreakpointReached', false, nls.localize('diffEditorRenderSideBySideInlineBreakpointReached', "Whether the diff editor render side by side inline breakpoint is reached"));
-    EditorContextKeys.diffEditorInlineMode = new RawContextKey('diffEditorInlineMode', false, nls.localize('diffEditorInlineMode', "Whether inline mode is active"));
-    EditorContextKeys.diffEditorOriginalWritable = new RawContextKey('diffEditorOriginalWritable', false, nls.localize('diffEditorOriginalWritable', "Whether modified is writable in the diff editor"));
-    EditorContextKeys.diffEditorModifiedWritable = new RawContextKey('diffEditorModifiedWritable', false, nls.localize('diffEditorModifiedWritable', "Whether modified is writable in the diff editor"));
-    EditorContextKeys.diffEditorOriginalUri = new RawContextKey('diffEditorOriginalUri', '', nls.localize('diffEditorOriginalUri', "The uri of the original document"));
-    EditorContextKeys.diffEditorModifiedUri = new RawContextKey('diffEditorModifiedUri', '', nls.localize('diffEditorModifiedUri', "The uri of the modified document"));
-    EditorContextKeys.columnSelection = new RawContextKey('editorColumnSelection', false, nls.localize('editorColumnSelection', "Whether `editor.columnSelection` is enabled"));
+    EditorContextKeys.textInputFocus = new RawContextKey('textInputFocus', false, nls.localize('vs/editor/common/editorContextKeys', 'textInputFocus', "Whether an editor or a rich text input has focus (cursor is blinking)"));
+    EditorContextKeys.readOnly = new RawContextKey('editorReadonly', false, nls.localize('vs/editor/common/editorContextKeys', 'editorReadonly', "Whether the editor is read-only"));
+    EditorContextKeys.inDiffEditor = new RawContextKey('inDiffEditor', false, nls.localize('vs/editor/common/editorContextKeys', 'inDiffEditor', "Whether the context is a diff editor"));
+    EditorContextKeys.isEmbeddedDiffEditor = new RawContextKey('isEmbeddedDiffEditor', false, nls.localize('vs/editor/common/editorContextKeys', 'isEmbeddedDiffEditor', "Whether the context is an embedded diff editor"));
+    EditorContextKeys.inMultiDiffEditor = new RawContextKey('inMultiDiffEditor', false, nls.localize('vs/editor/common/editorContextKeys', 'inMultiDiffEditor', "Whether the context is a multi diff editor"));
+    EditorContextKeys.multiDiffEditorAllCollapsed = new RawContextKey('multiDiffEditorAllCollapsed', undefined, nls.localize('vs/editor/common/editorContextKeys', 'multiDiffEditorAllCollapsed', "Whether all files in multi diff editor are collapsed"));
+    EditorContextKeys.hasChanges = new RawContextKey('diffEditorHasChanges', false, nls.localize('vs/editor/common/editorContextKeys', 'diffEditorHasChanges', "Whether the diff editor has changes"));
+    EditorContextKeys.comparingMovedCode = new RawContextKey('comparingMovedCode', false, nls.localize('vs/editor/common/editorContextKeys', 'comparingMovedCode', "Whether a moved code block is selected for comparison"));
+    EditorContextKeys.accessibleDiffViewerVisible = new RawContextKey('accessibleDiffViewerVisible', false, nls.localize('vs/editor/common/editorContextKeys', 'accessibleDiffViewerVisible', "Whether the accessible diff viewer is visible"));
+    EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached = new RawContextKey('diffEditorRenderSideBySideInlineBreakpointReached', false, nls.localize('vs/editor/common/editorContextKeys', 'diffEditorRenderSideBySideInlineBreakpointReached', "Whether the diff editor render side by side inline breakpoint is reached"));
+    EditorContextKeys.diffEditorInlineMode = new RawContextKey('diffEditorInlineMode', false, nls.localize('vs/editor/common/editorContextKeys', 'diffEditorInlineMode', "Whether inline mode is active"));
+    EditorContextKeys.diffEditorOriginalWritable = new RawContextKey('diffEditorOriginalWritable', false, nls.localize('vs/editor/common/editorContextKeys', 'diffEditorOriginalWritable', "Whether modified is writable in the diff editor"));
+    EditorContextKeys.diffEditorModifiedWritable = new RawContextKey('diffEditorModifiedWritable', false, nls.localize('vs/editor/common/editorContextKeys', 'diffEditorModifiedWritable', "Whether modified is writable in the diff editor"));
+    EditorContextKeys.diffEditorOriginalUri = new RawContextKey('diffEditorOriginalUri', '', nls.localize('vs/editor/common/editorContextKeys', 'diffEditorOriginalUri', "The uri of the original document"));
+    EditorContextKeys.diffEditorModifiedUri = new RawContextKey('diffEditorModifiedUri', '', nls.localize('vs/editor/common/editorContextKeys', 'diffEditorModifiedUri', "The uri of the modified document"));
+    EditorContextKeys.columnSelection = new RawContextKey('editorColumnSelection', false, nls.localize('vs/editor/common/editorContextKeys', 'editorColumnSelection', "Whether `editor.columnSelection` is enabled"));
     EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();
-    EditorContextKeys.hasNonEmptySelection = new RawContextKey('editorHasSelection', false, nls.localize('editorHasSelection', "Whether the editor has text selected"));
+    EditorContextKeys.hasNonEmptySelection = new RawContextKey('editorHasSelection', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasSelection', "Whether the editor has text selected"));
     EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();
-    EditorContextKeys.hasMultipleSelections = new RawContextKey('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', "Whether the editor has multiple selections"));
+    EditorContextKeys.hasMultipleSelections = new RawContextKey('editorHasMultipleSelections', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasMultipleSelections', "Whether the editor has multiple selections"));
     EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();
-    EditorContextKeys.tabMovesFocus = new RawContextKey('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', "Whether `Tab` will move focus out of the editor"));
+    EditorContextKeys.tabMovesFocus = new RawContextKey('editorTabMovesFocus', false, nls.localize('vs/editor/common/editorContextKeys', 'editorTabMovesFocus', "Whether `Tab` will move focus out of the editor"));
     EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();
     EditorContextKeys.isInEmbeddedEditor = new RawContextKey('isInEmbeddedEditor', false, true);
     EditorContextKeys.canUndo = new RawContextKey('canUndo', false, true);
     EditorContextKeys.canRedo = new RawContextKey('canRedo', false, true);
-    EditorContextKeys.hoverVisible = new RawContextKey('editorHoverVisible', false, nls.localize('editorHoverVisible', "Whether the editor hover is visible"));
-    EditorContextKeys.hoverFocused = new RawContextKey('editorHoverFocused', false, nls.localize('editorHoverFocused', "Whether the editor hover is focused"));
-    EditorContextKeys.stickyScrollFocused = new RawContextKey('stickyScrollFocused', false, nls.localize('stickyScrollFocused', "Whether the sticky scroll is focused"));
-    EditorContextKeys.stickyScrollVisible = new RawContextKey('stickyScrollVisible', false, nls.localize('stickyScrollVisible', "Whether the sticky scroll is visible"));
-    EditorContextKeys.standaloneColorPickerVisible = new RawContextKey('standaloneColorPickerVisible', false, nls.localize('standaloneColorPickerVisible', "Whether the standalone color picker is visible"));
-    EditorContextKeys.standaloneColorPickerFocused = new RawContextKey('standaloneColorPickerFocused', false, nls.localize('standaloneColorPickerFocused', "Whether the standalone color picker is focused"));
+    EditorContextKeys.hoverVisible = new RawContextKey('editorHoverVisible', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHoverVisible', "Whether the editor hover is visible"));
+    EditorContextKeys.hoverFocused = new RawContextKey('editorHoverFocused', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHoverFocused', "Whether the editor hover is focused"));
+    EditorContextKeys.stickyScrollFocused = new RawContextKey('stickyScrollFocused', false, nls.localize('vs/editor/common/editorContextKeys', 'stickyScrollFocused', "Whether the sticky scroll is focused"));
+    EditorContextKeys.stickyScrollVisible = new RawContextKey('stickyScrollVisible', false, nls.localize('vs/editor/common/editorContextKeys', 'stickyScrollVisible', "Whether the sticky scroll is visible"));
+    EditorContextKeys.standaloneColorPickerVisible = new RawContextKey('standaloneColorPickerVisible', false, nls.localize('vs/editor/common/editorContextKeys', 'standaloneColorPickerVisible', "Whether the standalone color picker is visible"));
+    EditorContextKeys.standaloneColorPickerFocused = new RawContextKey('standaloneColorPickerFocused', false, nls.localize('vs/editor/common/editorContextKeys', 'standaloneColorPickerFocused', "Whether the standalone color picker is focused"));
     /**
      * A context key that is set when an editor is part of a larger editor, like notebooks or
      * (future) a diff editor
      */
-    EditorContextKeys.inCompositeEditor = new RawContextKey('inCompositeEditor', undefined, nls.localize('inCompositeEditor', "Whether the editor is part of a larger editor (e.g. notebooks)"));
+    EditorContextKeys.inCompositeEditor = new RawContextKey('inCompositeEditor', undefined, nls.localize('vs/editor/common/editorContextKeys', 'inCompositeEditor', "Whether the editor is part of a larger editor (e.g. notebooks)"));
     EditorContextKeys.notInCompositeEditor = EditorContextKeys.inCompositeEditor.toNegated();
     // -- mode context keys
-    EditorContextKeys.languageId = new RawContextKey('editorLangId', '', nls.localize('editorLangId', "The language identifier of the editor"));
-    EditorContextKeys.hasCompletionItemProvider = new RawContextKey('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', "Whether the editor has a completion item provider"));
-    EditorContextKeys.hasCodeActionsProvider = new RawContextKey('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', "Whether the editor has a code actions provider"));
-    EditorContextKeys.hasCodeLensProvider = new RawContextKey('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', "Whether the editor has a code lens provider"));
-    EditorContextKeys.hasDefinitionProvider = new RawContextKey('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', "Whether the editor has a definition provider"));
-    EditorContextKeys.hasDeclarationProvider = new RawContextKey('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', "Whether the editor has a declaration provider"));
-    EditorContextKeys.hasImplementationProvider = new RawContextKey('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', "Whether the editor has an implementation provider"));
-    EditorContextKeys.hasTypeDefinitionProvider = new RawContextKey('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', "Whether the editor has a type definition provider"));
-    EditorContextKeys.hasHoverProvider = new RawContextKey('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', "Whether the editor has a hover provider"));
-    EditorContextKeys.hasDocumentHighlightProvider = new RawContextKey('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', "Whether the editor has a document highlight provider"));
-    EditorContextKeys.hasDocumentSymbolProvider = new RawContextKey('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', "Whether the editor has a document symbol provider"));
-    EditorContextKeys.hasReferenceProvider = new RawContextKey('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', "Whether the editor has a reference provider"));
-    EditorContextKeys.hasRenameProvider = new RawContextKey('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', "Whether the editor has a rename provider"));
-    EditorContextKeys.hasSignatureHelpProvider = new RawContextKey('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', "Whether the editor has a signature help provider"));
-    EditorContextKeys.hasInlayHintsProvider = new RawContextKey('editorHasInlayHintsProvider', false, nls.localize('editorHasInlayHintsProvider', "Whether the editor has an inline hints provider"));
+    EditorContextKeys.languageId = new RawContextKey('editorLangId', '', nls.localize('vs/editor/common/editorContextKeys', 'editorLangId', "The language identifier of the editor"));
+    EditorContextKeys.hasCompletionItemProvider = new RawContextKey('editorHasCompletionItemProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasCompletionItemProvider', "Whether the editor has a completion item provider"));
+    EditorContextKeys.hasCodeActionsProvider = new RawContextKey('editorHasCodeActionsProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasCodeActionsProvider', "Whether the editor has a code actions provider"));
+    EditorContextKeys.hasCodeLensProvider = new RawContextKey('editorHasCodeLensProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasCodeLensProvider', "Whether the editor has a code lens provider"));
+    EditorContextKeys.hasDefinitionProvider = new RawContextKey('editorHasDefinitionProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasDefinitionProvider', "Whether the editor has a definition provider"));
+    EditorContextKeys.hasDeclarationProvider = new RawContextKey('editorHasDeclarationProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasDeclarationProvider', "Whether the editor has a declaration provider"));
+    EditorContextKeys.hasImplementationProvider = new RawContextKey('editorHasImplementationProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasImplementationProvider', "Whether the editor has an implementation provider"));
+    EditorContextKeys.hasTypeDefinitionProvider = new RawContextKey('editorHasTypeDefinitionProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasTypeDefinitionProvider', "Whether the editor has a type definition provider"));
+    EditorContextKeys.hasHoverProvider = new RawContextKey('editorHasHoverProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasHoverProvider', "Whether the editor has a hover provider"));
+    EditorContextKeys.hasDocumentHighlightProvider = new RawContextKey('editorHasDocumentHighlightProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasDocumentHighlightProvider', "Whether the editor has a document highlight provider"));
+    EditorContextKeys.hasDocumentSymbolProvider = new RawContextKey('editorHasDocumentSymbolProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasDocumentSymbolProvider', "Whether the editor has a document symbol provider"));
+    EditorContextKeys.hasReferenceProvider = new RawContextKey('editorHasReferenceProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasReferenceProvider', "Whether the editor has a reference provider"));
+    EditorContextKeys.hasRenameProvider = new RawContextKey('editorHasRenameProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasRenameProvider', "Whether the editor has a rename provider"));
+    EditorContextKeys.hasSignatureHelpProvider = new RawContextKey('editorHasSignatureHelpProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasSignatureHelpProvider', "Whether the editor has a signature help provider"));
+    EditorContextKeys.hasInlayHintsProvider = new RawContextKey('editorHasInlayHintsProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasInlayHintsProvider', "Whether the editor has an inline hints provider"));
     // -- mode context keys: formatting
-    EditorContextKeys.hasDocumentFormattingProvider = new RawContextKey('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', "Whether the editor has a document formatting provider"));
-    EditorContextKeys.hasDocumentSelectionFormattingProvider = new RawContextKey('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', "Whether the editor has a document selection formatting provider"));
-    EditorContextKeys.hasMultipleDocumentFormattingProvider = new RawContextKey('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', "Whether the editor has multiple document formatting providers"));
-    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', "Whether the editor has multiple document selection formatting providers"));
+    EditorContextKeys.hasDocumentFormattingProvider = new RawContextKey('editorHasDocumentFormattingProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasDocumentFormattingProvider', "Whether the editor has a document formatting provider"));
+    EditorContextKeys.hasDocumentSelectionFormattingProvider = new RawContextKey('editorHasDocumentSelectionFormattingProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasDocumentSelectionFormattingProvider', "Whether the editor has a document selection formatting provider"));
+    EditorContextKeys.hasMultipleDocumentFormattingProvider = new RawContextKey('editorHasMultipleDocumentFormattingProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasMultipleDocumentFormattingProvider', "Whether the editor has multiple document formatting providers"));
+    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('vs/editor/common/editorContextKeys', 'editorHasMultipleDocumentSelectionFormattingProvider', "Whether the editor has multiple document selection formatting providers"));
 })(EditorContextKeys || (EditorContextKeys = {}));
diff --git a/esm/vs/editor/common/languages/modesRegistry.js b/esm/vs/editor/common/languages/modesRegistry.js
index f1271f8162b15ac26ad0eefb688e7768af2b7083..4e13992131efe5f18ca4887395cf858a928303bc 100644
--- a/esm/vs/editor/common/languages/modesRegistry.js
+++ b/esm/vs/editor/common/languages/modesRegistry.js
@@ -42,7 +42,7 @@ export const PLAINTEXT_EXTENSION = '.txt';
 ModesRegistry.registerLanguage({
     id: PLAINTEXT_LANGUAGE_ID,
     extensions: [PLAINTEXT_EXTENSION],
-    aliases: [nls.localize('plainText.alias', "Plain Text"), 'text'],
+    aliases: [nls.localize('vs/editor/common/languages/modesRegistry', 'plainText.alias', "Plain Text"), 'text'],
     mimetypes: [Mimes.text]
 });
 Registry.as(ConfigurationExtensions.Configuration)
diff --git a/esm/vs/editor/common/languages.js b/esm/vs/editor/common/languages.js
index 6e052f9eed367de7613e32c838aff11a317b9490..5029e2ebcf401f5cc36728a73f3ac81de8079401 100644
--- a/esm/vs/editor/common/languages.js
+++ b/esm/vs/editor/common/languages.js
@@ -217,38 +217,38 @@ export function isLocationLink(thing) {
  * @internal
  */
 export const symbolKindNames = {
-    [17 /* SymbolKind.Array */]: localize('Array', "array"),
-    [16 /* SymbolKind.Boolean */]: localize('Boolean', "boolean"),
-    [4 /* SymbolKind.Class */]: localize('Class', "class"),
-    [13 /* SymbolKind.Constant */]: localize('Constant', "constant"),
-    [8 /* SymbolKind.Constructor */]: localize('Constructor', "constructor"),
-    [9 /* SymbolKind.Enum */]: localize('Enum', "enumeration"),
-    [21 /* SymbolKind.EnumMember */]: localize('EnumMember', "enumeration member"),
-    [23 /* SymbolKind.Event */]: localize('Event', "event"),
-    [7 /* SymbolKind.Field */]: localize('Field', "field"),
-    [0 /* SymbolKind.File */]: localize('File', "file"),
-    [11 /* SymbolKind.Function */]: localize('Function', "function"),
-    [10 /* SymbolKind.Interface */]: localize('Interface', "interface"),
-    [19 /* SymbolKind.Key */]: localize('Key', "key"),
-    [5 /* SymbolKind.Method */]: localize('Method', "method"),
-    [1 /* SymbolKind.Module */]: localize('Module', "module"),
-    [2 /* SymbolKind.Namespace */]: localize('Namespace', "namespace"),
-    [20 /* SymbolKind.Null */]: localize('Null', "null"),
-    [15 /* SymbolKind.Number */]: localize('Number', "number"),
-    [18 /* SymbolKind.Object */]: localize('Object', "object"),
-    [24 /* SymbolKind.Operator */]: localize('Operator', "operator"),
-    [3 /* SymbolKind.Package */]: localize('Package', "package"),
-    [6 /* SymbolKind.Property */]: localize('Property', "property"),
-    [14 /* SymbolKind.String */]: localize('String', "string"),
-    [22 /* SymbolKind.Struct */]: localize('Struct', "struct"),
-    [25 /* SymbolKind.TypeParameter */]: localize('TypeParameter', "type parameter"),
-    [12 /* SymbolKind.Variable */]: localize('Variable', "variable"),
+    [17 /* SymbolKind.Array */]: localize('vs/editor/common/languages', 'Array', "array"),
+    [16 /* SymbolKind.Boolean */]: localize('vs/editor/common/languages', 'Boolean', "boolean"),
+    [4 /* SymbolKind.Class */]: localize('vs/editor/common/languages', 'Class', "class"),
+    [13 /* SymbolKind.Constant */]: localize('vs/editor/common/languages', 'Constant', "constant"),
+    [8 /* SymbolKind.Constructor */]: localize('vs/editor/common/languages', 'Constructor', "constructor"),
+    [9 /* SymbolKind.Enum */]: localize('vs/editor/common/languages', 'Enum', "enumeration"),
+    [21 /* SymbolKind.EnumMember */]: localize('vs/editor/common/languages', 'EnumMember', "enumeration member"),
+    [23 /* SymbolKind.Event */]: localize('vs/editor/common/languages', 'Event', "event"),
+    [7 /* SymbolKind.Field */]: localize('vs/editor/common/languages', 'Field', "field"),
+    [0 /* SymbolKind.File */]: localize('vs/editor/common/languages', 'File', "file"),
+    [11 /* SymbolKind.Function */]: localize('vs/editor/common/languages', 'Function', "function"),
+    [10 /* SymbolKind.Interface */]: localize('vs/editor/common/languages', 'Interface', "interface"),
+    [19 /* SymbolKind.Key */]: localize('vs/editor/common/languages', 'Key', "key"),
+    [5 /* SymbolKind.Method */]: localize('vs/editor/common/languages', 'Method', "method"),
+    [1 /* SymbolKind.Module */]: localize('vs/editor/common/languages', 'Module', "module"),
+    [2 /* SymbolKind.Namespace */]: localize('vs/editor/common/languages', 'Namespace', "namespace"),
+    [20 /* SymbolKind.Null */]: localize('vs/editor/common/languages', 'Null', "null"),
+    [15 /* SymbolKind.Number */]: localize('vs/editor/common/languages', 'Number', "number"),
+    [18 /* SymbolKind.Object */]: localize('vs/editor/common/languages', 'Object', "object"),
+    [24 /* SymbolKind.Operator */]: localize('vs/editor/common/languages', 'Operator', "operator"),
+    [3 /* SymbolKind.Package */]: localize('vs/editor/common/languages', 'Package', "package"),
+    [6 /* SymbolKind.Property */]: localize('vs/editor/common/languages', 'Property', "property"),
+    [14 /* SymbolKind.String */]: localize('vs/editor/common/languages', 'String', "string"),
+    [22 /* SymbolKind.Struct */]: localize('vs/editor/common/languages', 'Struct', "struct"),
+    [25 /* SymbolKind.TypeParameter */]: localize('vs/editor/common/languages', 'TypeParameter', "type parameter"),
+    [12 /* SymbolKind.Variable */]: localize('vs/editor/common/languages', 'Variable', "variable"),
 };
 /**
  * @internal
  */
 export function getAriaLabelForSymbol(symbolName, kind) {
-    return localize('symbolAriaLabel', '{0} ({1})', symbolName, symbolKindNames[kind]);
+    return localize('vs/editor/common/languages', 'symbolAriaLabel', '{0} ({1})', symbolName, symbolKindNames[kind]);
 }
 /**
  * @internal
diff --git a/esm/vs/editor/common/model/editStack.js b/esm/vs/editor/common/model/editStack.js
index 3fcae020ab2add5bbe7eebef7b7959b1d99252cd..aae0d528b6d79a1a5f9fa12921dd3746fcf2a4de 100644
--- a/esm/vs/editor/common/model/editStack.js
+++ b/esm/vs/editor/common/model/editStack.js
@@ -324,7 +324,7 @@ export class EditStack {
         if (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {
             return lastElement;
         }
-        const newElement = new SingleModelEditStackElement(nls.localize('edit', "Typing"), 'undoredo.textBufferEdit', this._model, beforeCursorState);
+        const newElement = new SingleModelEditStackElement(nls.localize('vs/editor/common/model/editStack', 'edit', "Typing"), 'undoredo.textBufferEdit', this._model, beforeCursorState);
         this._undoRedoService.pushElement(newElement, group);
         return newElement;
     }
diff --git a/esm/vs/editor/common/standaloneStrings.js b/esm/vs/editor/common/standaloneStrings.js
index 956142edd94eac385d19dcbe3fefaa527279d06f..d7b79b970e85fa761344d6dfdd2e888d2aea4cf9 100644
--- a/esm/vs/editor/common/standaloneStrings.js
+++ b/esm/vs/editor/common/standaloneStrings.js
@@ -5,35 +5,35 @@
 import * as nls from '../../nls.js';
 export var InspectTokensNLS;
 (function (InspectTokensNLS) {
-    InspectTokensNLS.inspectTokensAction = nls.localize('inspectTokens', "Developer: Inspect Tokens");
+    InspectTokensNLS.inspectTokensAction = nls.localize('vs/editor/common/standaloneStrings', 'inspectTokens', "Developer: Inspect Tokens");
 })(InspectTokensNLS || (InspectTokensNLS = {}));
 export var GoToLineNLS;
 (function (GoToLineNLS) {
-    GoToLineNLS.gotoLineActionLabel = nls.localize('gotoLineActionLabel', "Go to Line/Column...");
+    GoToLineNLS.gotoLineActionLabel = nls.localize('vs/editor/common/standaloneStrings', 'gotoLineActionLabel', "Go to Line/Column...");
 })(GoToLineNLS || (GoToLineNLS = {}));
 export var QuickHelpNLS;
 (function (QuickHelpNLS) {
-    QuickHelpNLS.helpQuickAccessActionLabel = nls.localize('helpQuickAccess', "Show all Quick Access Providers");
+    QuickHelpNLS.helpQuickAccessActionLabel = nls.localize('vs/editor/common/standaloneStrings', 'helpQuickAccess', "Show all Quick Access Providers");
 })(QuickHelpNLS || (QuickHelpNLS = {}));
 export var QuickCommandNLS;
 (function (QuickCommandNLS) {
-    QuickCommandNLS.quickCommandActionLabel = nls.localize('quickCommandActionLabel', "Command Palette");
-    QuickCommandNLS.quickCommandHelp = nls.localize('quickCommandActionHelp', "Show And Run Commands");
+    QuickCommandNLS.quickCommandActionLabel = nls.localize('vs/editor/common/standaloneStrings', 'quickCommandActionLabel', "Command Palette");
+    QuickCommandNLS.quickCommandHelp = nls.localize('vs/editor/common/standaloneStrings', 'quickCommandActionHelp', "Show And Run Commands");
 })(QuickCommandNLS || (QuickCommandNLS = {}));
 export var QuickOutlineNLS;
 (function (QuickOutlineNLS) {
-    QuickOutlineNLS.quickOutlineActionLabel = nls.localize('quickOutlineActionLabel', "Go to Symbol...");
-    QuickOutlineNLS.quickOutlineByCategoryActionLabel = nls.localize('quickOutlineByCategoryActionLabel', "Go to Symbol by Category...");
+    QuickOutlineNLS.quickOutlineActionLabel = nls.localize('vs/editor/common/standaloneStrings', 'quickOutlineActionLabel', "Go to Symbol...");
+    QuickOutlineNLS.quickOutlineByCategoryActionLabel = nls.localize('vs/editor/common/standaloneStrings', 'quickOutlineByCategoryActionLabel', "Go to Symbol by Category...");
 })(QuickOutlineNLS || (QuickOutlineNLS = {}));
 export var StandaloneCodeEditorNLS;
 (function (StandaloneCodeEditorNLS) {
-    StandaloneCodeEditorNLS.editorViewAccessibleLabel = nls.localize('editorViewAccessibleLabel', "Editor content");
+    StandaloneCodeEditorNLS.editorViewAccessibleLabel = nls.localize('vs/editor/common/standaloneStrings', 'editorViewAccessibleLabel', "Editor content");
 })(StandaloneCodeEditorNLS || (StandaloneCodeEditorNLS = {}));
 export var ToggleHighContrastNLS;
 (function (ToggleHighContrastNLS) {
-    ToggleHighContrastNLS.toggleHighContrast = nls.localize('toggleHighContrast', "Toggle High Contrast Theme");
+    ToggleHighContrastNLS.toggleHighContrast = nls.localize('vs/editor/common/standaloneStrings', 'toggleHighContrast', "Toggle High Contrast Theme");
 })(ToggleHighContrastNLS || (ToggleHighContrastNLS = {}));
 export var StandaloneServicesNLS;
 (function (StandaloneServicesNLS) {
-    StandaloneServicesNLS.bulkEditServiceSummary = nls.localize('bulkEditServiceSummary', "Made {0} edits in {1} files");
+    StandaloneServicesNLS.bulkEditServiceSummary = nls.localize('vs/editor/common/standaloneStrings', 'bulkEditServiceSummary', "Made {0} edits in {1} files");
 })(StandaloneServicesNLS || (StandaloneServicesNLS = {}));
diff --git a/esm/vs/editor/common/viewLayout/viewLineRenderer.js b/esm/vs/editor/common/viewLayout/viewLineRenderer.js
index 4261f154656b675ab51a1eeda24feeb09e818f9a..d17f3cb289002eeba4d079732003e34531e21e5d 100644
--- a/esm/vs/editor/common/viewLayout/viewLineRenderer.js
+++ b/esm/vs/editor/common/viewLayout/viewLineRenderer.js
@@ -890,7 +890,7 @@ function _renderLine(input, sb) {
     }
     if (isOverflowing) {
         sb.appendString('<span class="mtkoverflow">');
-        sb.appendString(nls.localize('showMore', "Show more ({0})", renderOverflowingCharCount(overflowingCharCount)));
+        sb.appendString(nls.localize('vs/editor/common/viewLayout/viewLineRenderer', 'showMore', "Show more ({0})", renderOverflowingCharCount(overflowingCharCount)));
         sb.appendString('</span>');
     }
     sb.appendString('</span>');
@@ -901,7 +901,7 @@ function to4CharHex(n) {
 }
 function renderOverflowingCharCount(n) {
     if (n < 1024) {
-        return nls.localize('overflow.chars', "{0} chars", n);
+        return nls.localize('vs/editor/common/viewLayout/viewLineRenderer', 'overflow.chars', "{0} chars", n);
     }
     if (n < 1024 * 1024) {
         return `${(n / 1024).toFixed(1)} KB`;
diff --git a/esm/vs/editor/contrib/anchorSelect/browser/anchorSelect.js b/esm/vs/editor/contrib/anchorSelect/browser/anchorSelect.js
index 2a7c451b54e2abb95d9374aa778d8c9d6206cb65..c9805863b653d6003444e0549a230c0f33651db6 100644
--- a/esm/vs/editor/contrib/anchorSelect/browser/anchorSelect.js
+++ b/esm/vs/editor/contrib/anchorSelect/browser/anchorSelect.js
@@ -43,12 +43,12 @@ let SelectionAnchorController = class SelectionAnchorController {
                 this.decorationId = accessor.addDecoration(Selection.fromPositions(position, position), {
                     description: 'selection-anchor',
                     stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */,
-                    hoverMessage: new MarkdownString().appendText(localize('selectionAnchor', "Selection Anchor")),
+                    hoverMessage: new MarkdownString().appendText(localize('vs/editor/contrib/anchorSelect/browser/anchorSelect', 'selectionAnchor', "Selection Anchor")),
                     className: 'selection-anchor'
                 });
             });
             this.selectionAnchorSetContextKey.set(!!this.decorationId);
-            alert(localize('anchorSet', "Anchor set at {0}:{1}", position.lineNumber, position.column));
+            alert(localize('vs/editor/contrib/anchorSelect/browser/anchorSelect', 'anchorSet', "Anchor set at {0}:{1}", position.lineNumber, position.column));
         }
     }
     goToSelectionAnchor() {
@@ -91,7 +91,7 @@ class SetSelectionAnchor extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.setSelectionAnchor',
-            label: localize('setSelectionAnchor', "Set Selection Anchor"),
+            label: localize('vs/editor/contrib/anchorSelect/browser/anchorSelect', 'setSelectionAnchor', "Set Selection Anchor"),
             alias: 'Set Selection Anchor',
             precondition: undefined,
             kbOpts: {
@@ -109,7 +109,7 @@ class GoToSelectionAnchor extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.goToSelectionAnchor',
-            label: localize('goToSelectionAnchor', "Go to Selection Anchor"),
+            label: localize('vs/editor/contrib/anchorSelect/browser/anchorSelect', 'goToSelectionAnchor', "Go to Selection Anchor"),
             alias: 'Go to Selection Anchor',
             precondition: SelectionAnchorSet,
         });
@@ -122,7 +122,7 @@ class SelectFromAnchorToCursor extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.selectFromAnchorToCursor',
-            label: localize('selectFromAnchorToCursor', "Select from Anchor to Cursor"),
+            label: localize('vs/editor/contrib/anchorSelect/browser/anchorSelect', 'selectFromAnchorToCursor', "Select from Anchor to Cursor"),
             alias: 'Select from Anchor to Cursor',
             precondition: SelectionAnchorSet,
             kbOpts: {
@@ -140,7 +140,7 @@ class CancelSelectionAnchor extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.cancelSelectionAnchor',
-            label: localize('cancelSelectionAnchor', "Cancel Selection Anchor"),
+            label: localize('vs/editor/contrib/anchorSelect/browser/anchorSelect', 'cancelSelectionAnchor', "Cancel Selection Anchor"),
             alias: 'Cancel Selection Anchor',
             precondition: SelectionAnchorSet,
             kbOpts: {
diff --git a/esm/vs/editor/contrib/bracketMatching/browser/bracketMatching.js b/esm/vs/editor/contrib/bracketMatching/browser/bracketMatching.js
index a99e7a2a77e8705537a0c64ab12bd3b3b54dc0b8..ddd12069b7d7c511609dc6b9b52d998fe4f3a265 100644
--- a/esm/vs/editor/contrib/bracketMatching/browser/bracketMatching.js
+++ b/esm/vs/editor/contrib/bracketMatching/browser/bracketMatching.js
@@ -16,12 +16,12 @@ import * as nls from '../../../../nls.js';
 import { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';
 import { registerColor } from '../../../../platform/theme/common/colorRegistry.js';
 import { themeColorFromId } from '../../../../platform/theme/common/themeService.js';
-const overviewRulerBracketMatchForeground = registerColor('editorOverviewRuler.bracketMatchForeground', '#A0A0A0', nls.localize('overviewRulerBracketMatchForeground', 'Overview ruler marker color for matching brackets.'));
+const overviewRulerBracketMatchForeground = registerColor('editorOverviewRuler.bracketMatchForeground', '#A0A0A0', nls.localize('vs/editor/contrib/bracketMatching/browser/bracketMatching', 'overviewRulerBracketMatchForeground', 'Overview ruler marker color for matching brackets.'));
 class JumpToBracketAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.jumpToBracket',
-            label: nls.localize('smartSelect.jumpBracket', "Go to Bracket"),
+            label: nls.localize('vs/editor/contrib/bracketMatching/browser/bracketMatching', 'smartSelect.jumpBracket', "Go to Bracket"),
             alias: 'Go to Bracket',
             precondition: undefined,
             kbOpts: {
@@ -39,11 +39,11 @@ class SelectToBracketAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.selectToBracket',
-            label: nls.localize('smartSelect.selectToBracket', "Select to Bracket"),
+            label: nls.localize('vs/editor/contrib/bracketMatching/browser/bracketMatching', 'smartSelect.selectToBracket', "Select to Bracket"),
             alias: 'Select to Bracket',
             precondition: undefined,
             metadata: {
-                description: nls.localize2('smartSelect.selectToBracketDescription', "Select the text inside and including the brackets or curly braces"),
+                description: nls.localize2('vs/editor/contrib/bracketMatching/browser/bracketMatching', 'smartSelect.selectToBracketDescription', "Select the text inside and including the brackets or curly braces"),
                 args: [{
                         name: 'args',
                         schema: {
@@ -71,7 +71,7 @@ class RemoveBracketsAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.removeBrackets',
-            label: nls.localize('smartSelect.removeBrackets', "Remove Brackets"),
+            label: nls.localize('vs/editor/contrib/bracketMatching/browser/bracketMatching', 'smartSelect.removeBrackets', "Remove Brackets"),
             alias: 'Remove Brackets',
             precondition: undefined,
             kbOpts: {
@@ -342,7 +342,7 @@ MenuRegistry.appendMenuItem(MenuId.MenubarGoMenu, {
     group: '5_infile_nav',
     command: {
         id: 'editor.action.jumpToBracket',
-        title: nls.localize({ key: 'miGoToBracket', comment: ['&& denotes a mnemonic'] }, "Go to &&Bracket")
+        title: nls.localize('vs/editor/contrib/bracketMatching/browser/bracketMatching', { key: 'miGoToBracket', comment: ['&& denotes a mnemonic'] }, "Go to &&Bracket")
     },
     order: 2
 });
diff --git a/esm/vs/editor/contrib/caretOperations/browser/caretOperations.js b/esm/vs/editor/contrib/caretOperations/browser/caretOperations.js
index 86f98dccc248daab028dff179667c5dea6d705ee..29abdaf28feb3b9fdea3ebf05377599f0fc2e090 100644
--- a/esm/vs/editor/contrib/caretOperations/browser/caretOperations.js
+++ b/esm/vs/editor/contrib/caretOperations/browser/caretOperations.js
@@ -29,7 +29,7 @@ class MoveCaretLeftAction extends MoveCaretAction {
     constructor() {
         super(true, {
             id: 'editor.action.moveCarretLeftAction',
-            label: nls.localize('caret.moveLeft', "Move Selected Text Left"),
+            label: nls.localize('vs/editor/contrib/caretOperations/browser/caretOperations', 'caret.moveLeft', "Move Selected Text Left"),
             alias: 'Move Selected Text Left',
             precondition: EditorContextKeys.writable
         });
@@ -39,7 +39,7 @@ class MoveCaretRightAction extends MoveCaretAction {
     constructor() {
         super(false, {
             id: 'editor.action.moveCarretRightAction',
-            label: nls.localize('caret.moveRight', "Move Selected Text Right"),
+            label: nls.localize('vs/editor/contrib/caretOperations/browser/caretOperations', 'caret.moveRight', "Move Selected Text Right"),
             alias: 'Move Selected Text Right',
             precondition: EditorContextKeys.writable
         });
diff --git a/esm/vs/editor/contrib/caretOperations/browser/transpose.js b/esm/vs/editor/contrib/caretOperations/browser/transpose.js
index 5e22a02639c8557ac238a7248f140759c6b10a75..b516fa1778b6e1a771eff4adf09f9c0a39acdfee 100644
--- a/esm/vs/editor/contrib/caretOperations/browser/transpose.js
+++ b/esm/vs/editor/contrib/caretOperations/browser/transpose.js
@@ -12,7 +12,7 @@ class TransposeLettersAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.transposeLetters',
-            label: nls.localize('transposeLetters.label', "Transpose Letters"),
+            label: nls.localize('vs/editor/contrib/caretOperations/browser/transpose', 'transposeLetters.label', "Transpose Letters"),
             alias: 'Transpose Letters',
             precondition: EditorContextKeys.writable,
             kbOpts: {
diff --git a/esm/vs/editor/contrib/clipboard/browser/clipboard.js b/esm/vs/editor/contrib/clipboard/browser/clipboard.js
index a1deb14b9174989775f3bbe2c7d2370644633237..fb8f55435da2ac327451428922b110c240393768 100644
--- a/esm/vs/editor/contrib/clipboard/browser/clipboard.js
+++ b/esm/vs/editor/contrib/clipboard/browser/clipboard.js
@@ -39,23 +39,23 @@ export const CutAction = supportsCut ? registerCommand(new MultiCommand({
     menuOpts: [{
             menuId: MenuId.MenubarEditMenu,
             group: '2_ccp',
-            title: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, "Cu&&t"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', { key: 'miCut', comment: ['&& denotes a mnemonic'] }, "Cu&&t"),
             order: 1
         }, {
             menuId: MenuId.EditorContext,
             group: CLIPBOARD_CONTEXT_MENU_GROUP,
-            title: nls.localize('actions.clipboard.cutLabel', "Cut"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', 'actions.clipboard.cutLabel', "Cut"),
             when: EditorContextKeys.writable,
             order: 1,
         }, {
             menuId: MenuId.CommandPalette,
             group: '',
-            title: nls.localize('actions.clipboard.cutLabel', "Cut"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', 'actions.clipboard.cutLabel', "Cut"),
             order: 1
         }, {
             menuId: MenuId.SimpleEditorContext,
             group: CLIPBOARD_CONTEXT_MENU_GROUP,
-            title: nls.localize('actions.clipboard.cutLabel', "Cut"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', 'actions.clipboard.cutLabel', "Cut"),
             when: EditorContextKeys.writable,
             order: 1,
         }]
@@ -74,29 +74,29 @@ export const CopyAction = supportsCopy ? registerCommand(new MultiCommand({
     menuOpts: [{
             menuId: MenuId.MenubarEditMenu,
             group: '2_ccp',
-            title: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, "&&Copy"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', { key: 'miCopy', comment: ['&& denotes a mnemonic'] }, "&&Copy"),
             order: 2
         }, {
             menuId: MenuId.EditorContext,
             group: CLIPBOARD_CONTEXT_MENU_GROUP,
-            title: nls.localize('actions.clipboard.copyLabel', "Copy"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', 'actions.clipboard.copyLabel', "Copy"),
             order: 2,
         }, {
             menuId: MenuId.CommandPalette,
             group: '',
-            title: nls.localize('actions.clipboard.copyLabel', "Copy"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', 'actions.clipboard.copyLabel', "Copy"),
             order: 1
         }, {
             menuId: MenuId.SimpleEditorContext,
             group: CLIPBOARD_CONTEXT_MENU_GROUP,
-            title: nls.localize('actions.clipboard.copyLabel', "Copy"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', 'actions.clipboard.copyLabel', "Copy"),
             order: 2,
         }]
 })) : undefined;
-MenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, { submenu: MenuId.MenubarCopy, title: nls.localize2('copy as', "Copy As"), group: '2_ccp', order: 3 });
-MenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextCopy, title: nls.localize2('copy as', "Copy As"), group: CLIPBOARD_CONTEXT_MENU_GROUP, order: 3 });
-MenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextShare, title: nls.localize2('share', "Share"), group: '11_share', order: -1, when: ContextKeyExpr.and(ContextKeyExpr.notEquals('resourceScheme', 'output'), EditorContextKeys.editorTextFocus) });
-MenuRegistry.appendMenuItem(MenuId.ExplorerContext, { submenu: MenuId.ExplorerContextShare, title: nls.localize2('share', "Share"), group: '11_share', order: -1 });
+MenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, { submenu: MenuId.MenubarCopy, title: nls.localize2('vs/editor/contrib/clipboard/browser/clipboard', 'copy as', "Copy As"), group: '2_ccp', order: 3 });
+MenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextCopy, title: nls.localize2('vs/editor/contrib/clipboard/browser/clipboard', 'copy as', "Copy As"), group: CLIPBOARD_CONTEXT_MENU_GROUP, order: 3 });
+MenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextShare, title: nls.localize2('vs/editor/contrib/clipboard/browser/clipboard', 'share', "Share"), group: '11_share', order: -1, when: ContextKeyExpr.and(ContextKeyExpr.notEquals('resourceScheme', 'output'), EditorContextKeys.editorTextFocus) });
+MenuRegistry.appendMenuItem(MenuId.ExplorerContext, { submenu: MenuId.ExplorerContextShare, title: nls.localize2('vs/editor/contrib/clipboard/browser/clipboard', 'share', "Share"), group: '11_share', order: -1 });
 export const PasteAction = supportsPaste ? registerCommand(new MultiCommand({
     id: 'editor.action.clipboardPasteAction',
     precondition: undefined,
@@ -112,23 +112,23 @@ export const PasteAction = supportsPaste ? registerCommand(new MultiCommand({
     menuOpts: [{
             menuId: MenuId.MenubarEditMenu,
             group: '2_ccp',
-            title: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, "&&Paste"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', { key: 'miPaste', comment: ['&& denotes a mnemonic'] }, "&&Paste"),
             order: 4
         }, {
             menuId: MenuId.EditorContext,
             group: CLIPBOARD_CONTEXT_MENU_GROUP,
-            title: nls.localize('actions.clipboard.pasteLabel', "Paste"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', 'actions.clipboard.pasteLabel', "Paste"),
             when: EditorContextKeys.writable,
             order: 4,
         }, {
             menuId: MenuId.CommandPalette,
             group: '',
-            title: nls.localize('actions.clipboard.pasteLabel', "Paste"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', 'actions.clipboard.pasteLabel', "Paste"),
             order: 1
         }, {
             menuId: MenuId.SimpleEditorContext,
             group: CLIPBOARD_CONTEXT_MENU_GROUP,
-            title: nls.localize('actions.clipboard.pasteLabel', "Paste"),
+            title: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', 'actions.clipboard.pasteLabel', "Paste"),
             when: EditorContextKeys.writable,
             order: 4,
         }]
@@ -137,7 +137,7 @@ class ExecCommandCopyWithSyntaxHighlightingAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',
-            label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', "Copy With Syntax Highlighting"),
+            label: nls.localize('vs/editor/contrib/clipboard/browser/clipboard', 'actions.clipboard.copyWithSyntaxHighlightingLabel', "Copy With Syntax Highlighting"),
             alias: 'Copy With Syntax Highlighting',
             precondition: undefined,
             kbOpts: {
diff --git a/esm/vs/editor/contrib/codeAction/browser/codeAction.js b/esm/vs/editor/contrib/codeAction/browser/codeAction.js
index ba839d17fed121fc92779fa510d40f3e15fbd0f0..ff8b9d2e9680b83e35964438473b9f78aa6d8991 100644
--- a/esm/vs/editor/contrib/codeAction/browser/codeAction.js
+++ b/esm/vs/editor/contrib/codeAction/browser/codeAction.js
@@ -234,7 +234,7 @@ export async function applyCodeAction(accessor, item, codeActionReason, options,
             const message = asMessage(err);
             notificationService.error(typeof message === 'string'
                 ? message
-                : nls.localize('applyCodeActionFailed', "An unknown error occurred while applying the code action"));
+                : nls.localize('vs/editor/contrib/codeAction/browser/codeAction', 'applyCodeActionFailed', "An unknown error occurred while applying the code action"));
         }
     }
 }
diff --git a/esm/vs/editor/contrib/codeAction/browser/codeActionCommands.js b/esm/vs/editor/contrib/codeAction/browser/codeActionCommands.js
index 90dcce1cf2ccc3ccb00779da97e029afeefde26b..528c0995f43b4b2848d7820c3e787d58f3c1d734 100644
--- a/esm/vs/editor/contrib/codeAction/browser/codeActionCommands.js
+++ b/esm/vs/editor/contrib/codeAction/browser/codeActionCommands.js
@@ -21,23 +21,23 @@ const argsSchema = {
     properties: {
         'kind': {
             type: 'string',
-            description: nls.localize('args.schema.kind', "Kind of the code action to run."),
+            description: nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'args.schema.kind', "Kind of the code action to run."),
         },
         'apply': {
             type: 'string',
-            description: nls.localize('args.schema.apply', "Controls when the returned actions are applied."),
+            description: nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'args.schema.apply', "Controls when the returned actions are applied."),
             default: "ifSingle" /* CodeActionAutoApply.IfSingle */,
             enum: ["first" /* CodeActionAutoApply.First */, "ifSingle" /* CodeActionAutoApply.IfSingle */, "never" /* CodeActionAutoApply.Never */],
             enumDescriptions: [
-                nls.localize('args.schema.apply.first', "Always apply the first returned code action."),
-                nls.localize('args.schema.apply.ifSingle', "Apply the first returned code action if it is the only one."),
-                nls.localize('args.schema.apply.never', "Do not apply the returned code actions."),
+                nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'args.schema.apply.first', "Always apply the first returned code action."),
+                nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'args.schema.apply.ifSingle', "Apply the first returned code action if it is the only one."),
+                nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'args.schema.apply.never', "Do not apply the returned code actions."),
             ]
         },
         'preferred': {
             type: 'boolean',
             default: false,
-            description: nls.localize('args.schema.preferred', "Controls if only preferred code actions should be returned."),
+            description: nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'args.schema.preferred', "Controls if only preferred code actions should be returned."),
         }
     }
 };
@@ -51,7 +51,7 @@ export class QuickFixAction extends EditorAction {
     constructor() {
         super({
             id: quickFixCommandId,
-            label: nls.localize('quickfix.trigger.label', "Quick Fix..."),
+            label: nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'quickfix.trigger.label', "Quick Fix..."),
             alias: 'Quick Fix...',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),
             kbOpts: {
@@ -62,7 +62,7 @@ export class QuickFixAction extends EditorAction {
         });
     }
     run(_accessor, editor) {
-        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', "No code actions available"), undefined, undefined, CodeActionTriggerSource.QuickFix);
+        return triggerCodeActionsForEditorSelection(editor, nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.quickFix.noneMessage', "No code actions available"), undefined, undefined, CodeActionTriggerSource.QuickFix);
     }
 }
 export class CodeActionCommand extends EditorCommand {
@@ -83,11 +83,11 @@ export class CodeActionCommand extends EditorCommand {
         });
         return triggerCodeActionsForEditorSelection(editor, typeof userArgs?.kind === 'string'
             ? args.preferred
-                ? nls.localize('editor.action.codeAction.noneMessage.preferred.kind', "No preferred code actions for '{0}' available", userArgs.kind)
-                : nls.localize('editor.action.codeAction.noneMessage.kind', "No code actions for '{0}' available", userArgs.kind)
+                ? nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.codeAction.noneMessage.preferred.kind', "No preferred code actions for '{0}' available", userArgs.kind)
+                : nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.codeAction.noneMessage.kind', "No code actions for '{0}' available", userArgs.kind)
             : args.preferred
-                ? nls.localize('editor.action.codeAction.noneMessage.preferred', "No preferred code actions available")
-                : nls.localize('editor.action.codeAction.noneMessage', "No code actions available"), {
+                ? nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.codeAction.noneMessage.preferred', "No preferred code actions available")
+                : nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.codeAction.noneMessage', "No code actions available"), {
             include: args.kind,
             includeSourceActions: true,
             onlyIncludePreferredActions: args.preferred,
@@ -98,7 +98,7 @@ export class RefactorAction extends EditorAction {
     constructor() {
         super({
             id: refactorCommandId,
-            label: nls.localize('refactor.label', "Refactor..."),
+            label: nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'refactor.label', "Refactor..."),
             alias: 'Refactor...',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),
             kbOpts: {
@@ -127,11 +127,11 @@ export class RefactorAction extends EditorAction {
         });
         return triggerCodeActionsForEditorSelection(editor, typeof userArgs?.kind === 'string'
             ? args.preferred
-                ? nls.localize('editor.action.refactor.noneMessage.preferred.kind', "No preferred refactorings for '{0}' available", userArgs.kind)
-                : nls.localize('editor.action.refactor.noneMessage.kind', "No refactorings for '{0}' available", userArgs.kind)
+                ? nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.refactor.noneMessage.preferred.kind', "No preferred refactorings for '{0}' available", userArgs.kind)
+                : nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.refactor.noneMessage.kind', "No refactorings for '{0}' available", userArgs.kind)
             : args.preferred
-                ? nls.localize('editor.action.refactor.noneMessage.preferred', "No preferred refactorings available")
-                : nls.localize('editor.action.refactor.noneMessage', "No refactorings available"), {
+                ? nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.refactor.noneMessage.preferred', "No preferred refactorings available")
+                : nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.refactor.noneMessage', "No refactorings available"), {
             include: CodeActionKind.Refactor.contains(args.kind) ? args.kind : HierarchicalKind.None,
             onlyIncludePreferredActions: args.preferred
         }, args.apply, CodeActionTriggerSource.Refactor);
@@ -141,7 +141,7 @@ export class SourceAction extends EditorAction {
     constructor() {
         super({
             id: sourceActionCommandId,
-            label: nls.localize('source.label', "Source Action..."),
+            label: nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'source.label', "Source Action..."),
             alias: 'Source Action...',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),
             contextMenuOpts: {
@@ -162,11 +162,11 @@ export class SourceAction extends EditorAction {
         });
         return triggerCodeActionsForEditorSelection(editor, typeof userArgs?.kind === 'string'
             ? args.preferred
-                ? nls.localize('editor.action.source.noneMessage.preferred.kind', "No preferred source actions for '{0}' available", userArgs.kind)
-                : nls.localize('editor.action.source.noneMessage.kind', "No source actions for '{0}' available", userArgs.kind)
+                ? nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.source.noneMessage.preferred.kind', "No preferred source actions for '{0}' available", userArgs.kind)
+                : nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.source.noneMessage.kind', "No source actions for '{0}' available", userArgs.kind)
             : args.preferred
-                ? nls.localize('editor.action.source.noneMessage.preferred', "No preferred source actions available")
-                : nls.localize('editor.action.source.noneMessage', "No source actions available"), {
+                ? nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.source.noneMessage.preferred', "No preferred source actions available")
+                : nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.source.noneMessage', "No source actions available"), {
             include: CodeActionKind.Source.contains(args.kind) ? args.kind : HierarchicalKind.None,
             includeSourceActions: true,
             onlyIncludePreferredActions: args.preferred,
@@ -177,7 +177,7 @@ export class OrganizeImportsAction extends EditorAction {
     constructor() {
         super({
             id: organizeImportsCommandId,
-            label: nls.localize('organizeImports.label', "Organize Imports"),
+            label: nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'organizeImports.label', "Organize Imports"),
             alias: 'Organize Imports',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.SourceOrganizeImports)),
             kbOpts: {
@@ -188,27 +188,27 @@ export class OrganizeImportsAction extends EditorAction {
         });
     }
     run(_accessor, editor) {
-        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.organize.noneMessage', "No organize imports action available"), { include: CodeActionKind.SourceOrganizeImports, includeSourceActions: true }, "ifSingle" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.OrganizeImports);
+        return triggerCodeActionsForEditorSelection(editor, nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.organize.noneMessage', "No organize imports action available"), { include: CodeActionKind.SourceOrganizeImports, includeSourceActions: true }, "ifSingle" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.OrganizeImports);
     }
 }
 export class FixAllAction extends EditorAction {
     constructor() {
         super({
             id: fixAllCommandId,
-            label: nls.localize('fixAll.label', "Fix All"),
+            label: nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'fixAll.label', "Fix All"),
             alias: 'Fix All',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.SourceFixAll))
         });
     }
     run(_accessor, editor) {
-        return triggerCodeActionsForEditorSelection(editor, nls.localize('fixAll.noneMessage', "No fix all action available"), { include: CodeActionKind.SourceFixAll, includeSourceActions: true }, "ifSingle" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.FixAll);
+        return triggerCodeActionsForEditorSelection(editor, nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'fixAll.noneMessage', "No fix all action available"), { include: CodeActionKind.SourceFixAll, includeSourceActions: true }, "ifSingle" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.FixAll);
     }
 }
 export class AutoFixAction extends EditorAction {
     constructor() {
         super({
             id: autoFixCommandId,
-            label: nls.localize('autoFix.label', "Auto Fix..."),
+            label: nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'autoFix.label', "Auto Fix..."),
             alias: 'Auto Fix...',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.QuickFix)),
             kbOpts: {
@@ -222,7 +222,7 @@ export class AutoFixAction extends EditorAction {
         });
     }
     run(_accessor, editor) {
-        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.autoFix.noneMessage', "No auto fixes available"), {
+        return triggerCodeActionsForEditorSelection(editor, nls.localize('vs/editor/contrib/codeAction/browser/codeActionCommands', 'editor.action.autoFix.noneMessage', "No auto fixes available"), {
             include: CodeActionKind.QuickFix,
             onlyIncludePreferredActions: true
         }, "ifSingle" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.AutoFix);
diff --git a/esm/vs/editor/contrib/codeAction/browser/codeActionContributions.js b/esm/vs/editor/contrib/codeAction/browser/codeActionContributions.js
index d53ff96e2ce798a98179f408c906ed3a47acfa4f..859bb0fde0d4bd9273c7c196be717efd6f3fd6d8 100644
--- a/esm/vs/editor/contrib/codeAction/browser/codeActionContributions.js
+++ b/esm/vs/editor/contrib/codeAction/browser/codeActionContributions.js
@@ -25,7 +25,7 @@ Registry.as(Extensions.Configuration).registerConfiguration({
         'editor.codeActionWidget.showHeaders': {
             type: 'boolean',
             scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,
-            description: nls.localize('showCodeActionHeaders', "Enable/disable showing group headers in the Code Action menu."),
+            description: nls.localize('vs/editor/contrib/codeAction/browser/codeActionContributions', 'showCodeActionHeaders', "Enable/disable showing group headers in the Code Action menu."),
             default: true,
         },
     }
@@ -36,7 +36,7 @@ Registry.as(Extensions.Configuration).registerConfiguration({
         'editor.codeActionWidget.includeNearbyQuickFixes': {
             type: 'boolean',
             scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,
-            description: nls.localize('includeNearbyQuickFixes', "Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic."),
+            description: nls.localize('vs/editor/contrib/codeAction/browser/codeActionContributions', 'includeNearbyQuickFixes', "Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic."),
             default: true,
         },
     }
@@ -47,7 +47,7 @@ Registry.as(Extensions.Configuration).registerConfiguration({
         'editor.codeActions.triggerOnFocusChange': {
             type: 'boolean',
             scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,
-            markdownDescription: nls.localize('triggerOnFocusChange', 'Enable triggering {0} when {1} is set to {2}. Code Actions must be set to {3} to be triggered for window and focus changes.', '`#editor.codeActionsOnSave#`', '`#files.autoSave#`', '`afterDelay`', '`always`'),
+            markdownDescription: nls.localize('vs/editor/contrib/codeAction/browser/codeActionContributions', 'triggerOnFocusChange', 'Enable triggering {0} when {1} is set to {2}. Code Actions must be set to {3} to be triggered for window and focus changes.', '`#editor.codeActionsOnSave#`', '`#files.autoSave#`', '`afterDelay`', '`always`'),
             default: false,
         },
     }
diff --git a/esm/vs/editor/contrib/codeAction/browser/codeActionController.js b/esm/vs/editor/contrib/codeAction/browser/codeActionController.js
index 5d88f24ddb59c0d02c70c14c08b765b6dcbf09e9..1ae71acaa1ae43ae01db14aa51418e35cdae5c16 100644
--- a/esm/vs/editor/contrib/codeAction/browser/codeActionController.js
+++ b/esm/vs/editor/contrib/codeAction/browser/codeActionController.js
@@ -266,7 +266,7 @@ let CodeActionController = class CodeActionController extends Disposable {
                         const diagnostic = diagnostics[0];
                         if (diagnostic.startLineNumber && diagnostic.startColumn) {
                             const selectionText = this._editor.getModel()?.getWordAtPosition({ lineNumber: diagnostic.startLineNumber, column: diagnostic.startColumn })?.word;
-                            aria.status(localize('editingNewSelection', "Context: {0} at line {1} and column {2}.", selectionText, diagnostic.startLineNumber, diagnostic.startColumn));
+                            aria.status(localize('vs/editor/contrib/codeAction/browser/codeActionController', 'editingNewSelection', "Context: {0} at line {1} and column {2}.", selectionText, diagnostic.startLineNumber, diagnostic.startColumn));
                         }
                     }
                 }
@@ -309,7 +309,7 @@ let CodeActionController = class CodeActionController extends Disposable {
         if (options.includeDisabledActions && actions.validActions.length > 0 && actions.allActions.length !== actions.validActions.length) {
             resultActions.push(this._showDisabled ? {
                 id: 'hideMoreActions',
-                label: localize('hideMoreActions', 'Hide Disabled'),
+                label: localize('vs/editor/contrib/codeAction/browser/codeActionController', 'hideMoreActions', 'Hide Disabled'),
                 enabled: true,
                 tooltip: '',
                 class: undefined,
@@ -319,7 +319,7 @@ let CodeActionController = class CodeActionController extends Disposable {
                 }
             } : {
                 id: 'showMoreActions',
-                label: localize('showMoreActions', 'Show Disabled'),
+                label: localize('vs/editor/contrib/codeAction/browser/codeActionController', 'showMoreActions', 'Show Disabled'),
                 enabled: true,
                 tooltip: '',
                 class: undefined,
diff --git a/esm/vs/editor/contrib/codeAction/browser/codeActionMenu.js b/esm/vs/editor/contrib/codeAction/browser/codeActionMenu.js
index 76b12320f4c7682c04f3fe330802bdc96a6059aa..4c902f6f49542ed075054f646ead92394e2853e0 100644
--- a/esm/vs/editor/contrib/codeAction/browser/codeActionMenu.js
+++ b/esm/vs/editor/contrib/codeAction/browser/codeActionMenu.js
@@ -8,15 +8,15 @@ import { CodeActionKind } from '../common/types.js';
 import '../../symbolIcons/browser/symbolIcons.js'; // The codicon symbol colors are defined here and must be loaded to get colors
 import { localize } from '../../../../nls.js';
 import { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';
-const uncategorizedCodeActionGroup = Object.freeze({ kind: HierarchicalKind.Empty, title: localize('codeAction.widget.id.more', 'More Actions...') });
+const uncategorizedCodeActionGroup = Object.freeze({ kind: HierarchicalKind.Empty, title: localize('vs/editor/contrib/codeAction/browser/codeActionMenu', 'codeAction.widget.id.more', 'More Actions...') });
 const codeActionGroups = Object.freeze([
-    { kind: CodeActionKind.QuickFix, title: localize('codeAction.widget.id.quickfix', 'Quick Fix') },
-    { kind: CodeActionKind.RefactorExtract, title: localize('codeAction.widget.id.extract', 'Extract'), icon: Codicon.wrench },
-    { kind: CodeActionKind.RefactorInline, title: localize('codeAction.widget.id.inline', 'Inline'), icon: Codicon.wrench },
-    { kind: CodeActionKind.RefactorRewrite, title: localize('codeAction.widget.id.convert', 'Rewrite'), icon: Codicon.wrench },
-    { kind: CodeActionKind.RefactorMove, title: localize('codeAction.widget.id.move', 'Move'), icon: Codicon.wrench },
-    { kind: CodeActionKind.SurroundWith, title: localize('codeAction.widget.id.surround', 'Surround With'), icon: Codicon.surroundWith },
-    { kind: CodeActionKind.Source, title: localize('codeAction.widget.id.source', 'Source Action'), icon: Codicon.symbolFile },
+    { kind: CodeActionKind.QuickFix, title: localize('vs/editor/contrib/codeAction/browser/codeActionMenu', 'codeAction.widget.id.quickfix', 'Quick Fix') },
+    { kind: CodeActionKind.RefactorExtract, title: localize('vs/editor/contrib/codeAction/browser/codeActionMenu', 'codeAction.widget.id.extract', 'Extract'), icon: Codicon.wrench },
+    { kind: CodeActionKind.RefactorInline, title: localize('vs/editor/contrib/codeAction/browser/codeActionMenu', 'codeAction.widget.id.inline', 'Inline'), icon: Codicon.wrench },
+    { kind: CodeActionKind.RefactorRewrite, title: localize('vs/editor/contrib/codeAction/browser/codeActionMenu', 'codeAction.widget.id.convert', 'Rewrite'), icon: Codicon.wrench },
+    { kind: CodeActionKind.RefactorMove, title: localize('vs/editor/contrib/codeAction/browser/codeActionMenu', 'codeAction.widget.id.move', 'Move'), icon: Codicon.wrench },
+    { kind: CodeActionKind.SurroundWith, title: localize('vs/editor/contrib/codeAction/browser/codeActionMenu', 'codeAction.widget.id.surround', 'Surround With'), icon: Codicon.surroundWith },
+    { kind: CodeActionKind.Source, title: localize('vs/editor/contrib/codeAction/browser/codeActionMenu', 'codeAction.widget.id.source', 'Source Action'), icon: Codicon.symbolFile },
     uncategorizedCodeActionGroup,
 ]);
 export function toMenuItems(inputCodeActions, showHeaders, keybindingResolver) {
diff --git a/esm/vs/editor/contrib/codeAction/browser/lightBulbWidget.js b/esm/vs/editor/contrib/codeAction/browser/lightBulbWidget.js
index ea04c1c23b9561a5a063a8b907ed22e2ed062d9d..3583d45c8b1890f42cc9e5f08d8dcd805c3f2353 100644
--- a/esm/vs/editor/contrib/codeAction/browser/lightBulbWidget.js
+++ b/esm/vs/editor/contrib/codeAction/browser/lightBulbWidget.js
@@ -27,11 +27,11 @@ import * as nls from '../../../../nls.js';
 import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';
 import { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';
 import { Range } from '../../../common/core/range.js';
-const GUTTER_LIGHTBULB_ICON = registerIcon('gutter-lightbulb', Codicon.lightBulb, nls.localize('gutterLightbulbWidget', 'Icon which spawns code actions menu from the gutter when there is no space in the editor.'));
-const GUTTER_LIGHTBULB_AUTO_FIX_ICON = registerIcon('gutter-lightbulb-auto-fix', Codicon.lightbulbAutofix, nls.localize('gutterLightbulbAutoFixWidget', 'Icon which spawns code actions menu from the gutter when there is no space in the editor and a quick fix is available.'));
-const GUTTER_LIGHTBULB_AIFIX_ICON = registerIcon('gutter-lightbulb-sparkle', Codicon.lightbulbSparkle, nls.localize('gutterLightbulbAIFixWidget', 'Icon which spawns code actions menu from the gutter when there is no space in the editor and an AI fix is available.'));
-const GUTTER_LIGHTBULB_AIFIX_AUTO_FIX_ICON = registerIcon('gutter-lightbulb-aifix-auto-fix', Codicon.lightbulbSparkleAutofix, nls.localize('gutterLightbulbAIFixAutoFixWidget', 'Icon which spawns code actions menu from the gutter when there is no space in the editor and an AI fix and a quick fix is available.'));
-const GUTTER_SPARKLE_FILLED_ICON = registerIcon('gutter-lightbulb-sparkle-filled', Codicon.sparkleFilled, nls.localize('gutterLightbulbSparkleFilledWidget', 'Icon which spawns code actions menu from the gutter when there is no space in the editor and an AI fix and a quick fix is available.'));
+const GUTTER_LIGHTBULB_ICON = registerIcon('gutter-lightbulb', Codicon.lightBulb, nls.localize('vs/editor/contrib/codeAction/browser/lightBulbWidget', 'gutterLightbulbWidget', 'Icon which spawns code actions menu from the gutter when there is no space in the editor.'));
+const GUTTER_LIGHTBULB_AUTO_FIX_ICON = registerIcon('gutter-lightbulb-auto-fix', Codicon.lightbulbAutofix, nls.localize('vs/editor/contrib/codeAction/browser/lightBulbWidget', 'gutterLightbulbAutoFixWidget', 'Icon which spawns code actions menu from the gutter when there is no space in the editor and a quick fix is available.'));
+const GUTTER_LIGHTBULB_AIFIX_ICON = registerIcon('gutter-lightbulb-sparkle', Codicon.lightbulbSparkle, nls.localize('vs/editor/contrib/codeAction/browser/lightBulbWidget', 'gutterLightbulbAIFixWidget', 'Icon which spawns code actions menu from the gutter when there is no space in the editor and an AI fix is available.'));
+const GUTTER_LIGHTBULB_AIFIX_AUTO_FIX_ICON = registerIcon('gutter-lightbulb-aifix-auto-fix', Codicon.lightbulbSparkleAutofix, nls.localize('vs/editor/contrib/codeAction/browser/lightBulbWidget', 'gutterLightbulbAIFixAutoFixWidget', 'Icon which spawns code actions menu from the gutter when there is no space in the editor and an AI fix and a quick fix is available.'));
+const GUTTER_SPARKLE_FILLED_ICON = registerIcon('gutter-lightbulb-sparkle-filled', Codicon.sparkleFilled, nls.localize('vs/editor/contrib/codeAction/browser/lightBulbWidget', 'gutterLightbulbSparkleFilledWidget', 'Icon which spawns code actions menu from the gutter when there is no space in the editor and an AI fix and a quick fix is available.'));
 var LightBulbState;
 (function (LightBulbState) {
     LightBulbState.Hidden = { type: 0 /* Type.Hidden */ };
@@ -403,16 +403,16 @@ let LightBulbWidget = class LightBulbWidget extends Disposable {
             return;
         }
         if (autoRun) {
-            this.title = nls.localize('codeActionAutoRun', "Run: {0}", this.state.actions.validActions[0].action.title);
+            this.title = nls.localize('vs/editor/contrib/codeAction/browser/lightBulbWidget', 'codeActionAutoRun', "Run: {0}", this.state.actions.validActions[0].action.title);
         }
         else if (autoFix && this._preferredKbLabel) {
-            this.title = nls.localize('preferredcodeActionWithKb', "Show Code Actions. Preferred Quick Fix Available ({0})", this._preferredKbLabel);
+            this.title = nls.localize('vs/editor/contrib/codeAction/browser/lightBulbWidget', 'preferredcodeActionWithKb', "Show Code Actions. Preferred Quick Fix Available ({0})", this._preferredKbLabel);
         }
         else if (!autoFix && this._quickFixKbLabel) {
-            this.title = nls.localize('codeActionWithKb', "Show Code Actions ({0})", this._quickFixKbLabel);
+            this.title = nls.localize('vs/editor/contrib/codeAction/browser/lightBulbWidget', 'codeActionWithKb', "Show Code Actions ({0})", this._quickFixKbLabel);
         }
         else if (!autoFix) {
-            this.title = nls.localize('codeAction', "Show Code Actions");
+            this.title = nls.localize('vs/editor/contrib/codeAction/browser/lightBulbWidget', 'codeAction', "Show Code Actions");
         }
     }
     set title(value) {
diff --git a/esm/vs/editor/contrib/codelens/browser/codelensController.js b/esm/vs/editor/contrib/codelens/browser/codelensController.js
index fd61a8e304bf72e250190b664fa2c99a08a86576..1e7f8d923414c1185b8ae8535ee7e18bbd7482f0 100644
--- a/esm/vs/editor/contrib/codelens/browser/codelensController.js
+++ b/esm/vs/editor/contrib/codelens/browser/codelensController.js
@@ -402,7 +402,7 @@ registerEditorAction(class ShowLensesInCurrentLine extends EditorAction {
         super({
             id: 'codelens.showLensesInCurrentLine',
             precondition: EditorContextKeys.hasCodeLensProvider,
-            label: localize('showLensOnLine', "Show CodeLens Commands For Current Line"),
+            label: localize('vs/editor/contrib/codelens/browser/codelensController', 'showLensOnLine', "Show CodeLens Commands For Current Line"),
             alias: 'Show CodeLens Commands For Current Line',
         });
     }
@@ -438,7 +438,7 @@ registerEditorAction(class ShowLensesInCurrentLine extends EditorAction {
         }
         const item = await quickInputService.pick(items, {
             canPickMany: false,
-            placeHolder: localize('placeHolder', "Select a command")
+            placeHolder: localize('vs/editor/contrib/codelens/browser/codelensController', 'placeHolder', "Select a command")
         });
         if (!item) {
             // Nothing picked
diff --git a/esm/vs/editor/contrib/colorPicker/browser/colorPickerWidget.js b/esm/vs/editor/contrib/colorPicker/browser/colorPickerWidget.js
index c212b687aae6a64b8edf5ffd99a451a526a390d2..707e5bba13c32754c2a96bc3ec74655a340121dd 100644
--- a/esm/vs/editor/contrib/colorPicker/browser/colorPickerWidget.js
+++ b/esm/vs/editor/contrib/colorPicker/browser/colorPickerWidget.js
@@ -28,7 +28,7 @@ export class ColorPickerHeader extends Disposable {
         dom.append(this._pickedColorNode, $('span.codicon.codicon-color-mode'));
         this._pickedColorPresentation = dom.append(this._pickedColorNode, document.createElement('span'));
         this._pickedColorPresentation.classList.add('picked-color-presentation');
-        const tooltip = localize('clickToToggleColorOptions', "Click to toggle color options (rgb/hsl/hex)");
+        const tooltip = localize('vs/editor/contrib/colorPicker/browser/colorPickerWidget', 'clickToToggleColorOptions', "Click to toggle color options (rgb/hsl/hex)");
         this._pickedColorNode.setAttribute('title', tooltip);
         this._originalColorNode = dom.append(this._domNode, $('.original-color'));
         this._originalColorNode.style.backgroundColor = Color.Format.CSS.format(this.model.originalColor) || '';
@@ -81,7 +81,7 @@ class CloseButton extends Disposable {
         const innerDiv = document.createElement('div');
         innerDiv.classList.add('close-button-inner-div');
         dom.append(this._button, innerDiv);
-        const closeButton = dom.append(innerDiv, $('.button' + ThemeIcon.asCSSSelector(registerIcon('color-picker-close', Codicon.close, localize('closeIcon', 'Icon to close the color picker')))));
+        const closeButton = dom.append(innerDiv, $('.button' + ThemeIcon.asCSSSelector(registerIcon('color-picker-close', Codicon.close, localize('vs/editor/contrib/colorPicker/browser/colorPickerWidget', 'closeIcon', 'Icon to close the color picker')))));
         closeButton.classList.add('close-icon');
         this._register(dom.addDisposableListener(this._button, dom.EventType.CLICK, () => {
             this._onClicked.fire();
diff --git a/esm/vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions.js b/esm/vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions.js
index 9257b89e4bf1e1503ca50afeb3cc1e954c9c993b..b92e1930125e311ca9ecf67691eb3be83da3b4b7 100644
--- a/esm/vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions.js
+++ b/esm/vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions.js
@@ -13,15 +13,15 @@ export class ShowOrFocusStandaloneColorPicker extends EditorAction2 {
         super({
             id: 'editor.action.showOrFocusStandaloneColorPicker',
             title: {
-                ...localize2('showOrFocusStandaloneColorPicker', "Show or Focus Standalone Color Picker"),
-                mnemonicTitle: localize({ key: 'mishowOrFocusStandaloneColorPicker', comment: ['&& denotes a mnemonic'] }, "&&Show or Focus Standalone Color Picker"),
+                ...localize2('vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions', 'showOrFocusStandaloneColorPicker', "Show or Focus Standalone Color Picker"),
+                mnemonicTitle: localize('vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions', { key: 'mishowOrFocusStandaloneColorPicker', comment: ['&& denotes a mnemonic'] }, "&&Show or Focus Standalone Color Picker"),
             },
             precondition: undefined,
             menu: [
                 { id: MenuId.CommandPalette },
             ],
             metadata: {
-                description: localize2('showOrFocusStandaloneColorPickerDescription', "Show or focus a standalone color picker which uses the default color provider. It displays hex/rgb/hsl colors."),
+                description: localize2('vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions', 'showOrFocusStandaloneColorPickerDescription', "Show or focus a standalone color picker which uses the default color provider. It displays hex/rgb/hsl colors."),
             }
         });
     }
@@ -33,7 +33,7 @@ class HideStandaloneColorPicker extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.hideColorPicker',
-            label: localize({
+            label: localize('vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions', {
                 key: 'hideColorPicker',
                 comment: [
                     'Action that hides the color picker'
@@ -46,7 +46,7 @@ class HideStandaloneColorPicker extends EditorAction {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: localize2('hideColorPickerDescription', "Hide the standalone color picker."),
+                description: localize2('vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions', 'hideColorPickerDescription', "Hide the standalone color picker."),
             }
         });
     }
@@ -58,7 +58,7 @@ class InsertColorWithStandaloneColorPicker extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.insertColorWithStandaloneColorPicker',
-            label: localize({
+            label: localize('vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions', {
                 key: 'insertColorWithStandaloneColorPicker',
                 comment: [
                     'Action that inserts color with standalone color picker'
@@ -71,7 +71,7 @@ class InsertColorWithStandaloneColorPicker extends EditorAction {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: localize2('insertColorWithStandaloneColorPickerDescription', "Insert hex/rgb/hsl colors with the focused standalone color picker."),
+                description: localize2('vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions', 'insertColorWithStandaloneColorPickerDescription', "Insert hex/rgb/hsl colors with the focused standalone color picker."),
             }
         });
     }
diff --git a/esm/vs/editor/contrib/comment/browser/comment.js b/esm/vs/editor/contrib/comment/browser/comment.js
index 2717430d2b853b85023b1fd2d9bf6d8551cc6b08..b49fdfa474c77b74ac4e5d78ae4fcdc000aab8e7 100644
--- a/esm/vs/editor/contrib/comment/browser/comment.js
+++ b/esm/vs/editor/contrib/comment/browser/comment.js
@@ -56,7 +56,7 @@ class ToggleCommentLineAction extends CommentLineAction {
     constructor() {
         super(0 /* Type.Toggle */, {
             id: 'editor.action.commentLine',
-            label: nls.localize('comment.line', "Toggle Line Comment"),
+            label: nls.localize('vs/editor/contrib/comment/browser/comment', 'comment.line', "Toggle Line Comment"),
             alias: 'Toggle Line Comment',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -67,7 +67,7 @@ class ToggleCommentLineAction extends CommentLineAction {
             menuOpts: {
                 menuId: MenuId.MenubarEditMenu,
                 group: '5_insert',
-                title: nls.localize({ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, "&&Toggle Line Comment"),
+                title: nls.localize('vs/editor/contrib/comment/browser/comment', { key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, "&&Toggle Line Comment"),
                 order: 1
             }
         });
@@ -77,7 +77,7 @@ class AddLineCommentAction extends CommentLineAction {
     constructor() {
         super(1 /* Type.ForceAdd */, {
             id: 'editor.action.addCommentLine',
-            label: nls.localize('comment.line.add', "Add Line Comment"),
+            label: nls.localize('vs/editor/contrib/comment/browser/comment', 'comment.line.add', "Add Line Comment"),
             alias: 'Add Line Comment',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -92,7 +92,7 @@ class RemoveLineCommentAction extends CommentLineAction {
     constructor() {
         super(2 /* Type.ForceRemove */, {
             id: 'editor.action.removeCommentLine',
-            label: nls.localize('comment.line.remove', "Remove Line Comment"),
+            label: nls.localize('vs/editor/contrib/comment/browser/comment', 'comment.line.remove', "Remove Line Comment"),
             alias: 'Remove Line Comment',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -107,7 +107,7 @@ class BlockCommentAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.blockComment',
-            label: nls.localize('comment.block', "Toggle Block Comment"),
+            label: nls.localize('vs/editor/contrib/comment/browser/comment', 'comment.block', "Toggle Block Comment"),
             alias: 'Toggle Block Comment',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -119,7 +119,7 @@ class BlockCommentAction extends EditorAction {
             menuOpts: {
                 menuId: MenuId.MenubarEditMenu,
                 group: '5_insert',
-                title: nls.localize({ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, "Toggle &&Block Comment"),
+                title: nls.localize('vs/editor/contrib/comment/browser/comment', { key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, "Toggle &&Block Comment"),
                 order: 2
             }
         });
diff --git a/esm/vs/editor/contrib/contextmenu/browser/contextmenu.js b/esm/vs/editor/contrib/contextmenu/browser/contextmenu.js
index 73d547b04dc9043916d74581de2f162d26f875c6..8e07b5eb510dfcc4ad898cc9c405d7db81e268d5 100644
--- a/esm/vs/editor/contrib/contextmenu/browser/contextmenu.js
+++ b/esm/vs/editor/contrib/contextmenu/browser/contextmenu.js
@@ -257,7 +257,7 @@ let ContextMenuController = class ContextMenuController {
         };
         const actions = [];
         actions.push(createAction({
-            label: nls.localize('context.minimap.minimap', "Minimap"),
+            label: nls.localize('vs/editor/contrib/contextmenu/browser/contextmenu', 'context.minimap.minimap', "Minimap"),
             checked: minimapOptions.enabled,
             run: () => {
                 this._configurationService.updateValue(`editor.minimap.enabled`, !minimapOptions.enabled);
@@ -265,28 +265,28 @@ let ContextMenuController = class ContextMenuController {
         }));
         actions.push(new Separator());
         actions.push(createAction({
-            label: nls.localize('context.minimap.renderCharacters', "Render Characters"),
+            label: nls.localize('vs/editor/contrib/contextmenu/browser/contextmenu', 'context.minimap.renderCharacters', "Render Characters"),
             enabled: minimapOptions.enabled,
             checked: minimapOptions.renderCharacters,
             run: () => {
                 this._configurationService.updateValue(`editor.minimap.renderCharacters`, !minimapOptions.renderCharacters);
             }
         }));
-        actions.push(createEnumAction(nls.localize('context.minimap.size', "Vertical size"), minimapOptions.enabled, 'editor.minimap.size', minimapOptions.size, [{
-                label: nls.localize('context.minimap.size.proportional', "Proportional"),
+        actions.push(createEnumAction(nls.localize('vs/editor/contrib/contextmenu/browser/contextmenu', 'context.minimap.size', "Vertical size"), minimapOptions.enabled, 'editor.minimap.size', minimapOptions.size, [{
+                label: nls.localize('vs/editor/contrib/contextmenu/browser/contextmenu', 'context.minimap.size.proportional', "Proportional"),
                 value: 'proportional'
             }, {
-                label: nls.localize('context.minimap.size.fill', "Fill"),
+                label: nls.localize('vs/editor/contrib/contextmenu/browser/contextmenu', 'context.minimap.size.fill', "Fill"),
                 value: 'fill'
             }, {
-                label: nls.localize('context.minimap.size.fit', "Fit"),
+                label: nls.localize('vs/editor/contrib/contextmenu/browser/contextmenu', 'context.minimap.size.fit', "Fit"),
                 value: 'fit'
             }]));
-        actions.push(createEnumAction(nls.localize('context.minimap.slider', "Slider"), minimapOptions.enabled, 'editor.minimap.showSlider', minimapOptions.showSlider, [{
-                label: nls.localize('context.minimap.slider.mouseover', "Mouse Over"),
+        actions.push(createEnumAction(nls.localize('vs/editor/contrib/contextmenu/browser/contextmenu', 'context.minimap.slider', "Slider"), minimapOptions.enabled, 'editor.minimap.showSlider', minimapOptions.showSlider, [{
+                label: nls.localize('vs/editor/contrib/contextmenu/browser/contextmenu', 'context.minimap.slider.mouseover', "Mouse Over"),
                 value: 'mouseover'
             }, {
-                label: nls.localize('context.minimap.slider.always', "Always"),
+                label: nls.localize('vs/editor/contrib/contextmenu/browser/contextmenu', 'context.minimap.slider.always', "Always"),
                 value: 'always'
             }]));
         const useShadowDOM = this._editor.getOption(128 /* EditorOption.useShadowDOM */) && !isIOS; // Do not use shadow dom on IOS #122035
@@ -325,7 +325,7 @@ class ShowContextMenu extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.showContextMenu',
-            label: nls.localize('action.showContextMenu.label', "Show Editor Context Menu"),
+            label: nls.localize('vs/editor/contrib/contextmenu/browser/contextmenu', 'action.showContextMenu.label', "Show Editor Context Menu"),
             alias: 'Show Editor Context Menu',
             precondition: undefined,
             kbOpts: {
diff --git a/esm/vs/editor/contrib/cursorUndo/browser/cursorUndo.js b/esm/vs/editor/contrib/cursorUndo/browser/cursorUndo.js
index cf5049541171bb337456cf893b723a052d2f38ec..3d7a6b36b6c05d00676df0b715ca24c5245787da 100644
--- a/esm/vs/editor/contrib/cursorUndo/browser/cursorUndo.js
+++ b/esm/vs/editor/contrib/cursorUndo/browser/cursorUndo.js
@@ -100,7 +100,7 @@ export class CursorUndo extends EditorAction {
     constructor() {
         super({
             id: 'cursorUndo',
-            label: nls.localize('cursor.undo', "Cursor Undo"),
+            label: nls.localize('vs/editor/contrib/cursorUndo/browser/cursorUndo', 'cursor.undo', "Cursor Undo"),
             alias: 'Cursor Undo',
             precondition: undefined,
             kbOpts: {
@@ -118,7 +118,7 @@ export class CursorRedo extends EditorAction {
     constructor() {
         super({
             id: 'cursorRedo',
-            label: nls.localize('cursor.redo', "Cursor Redo"),
+            label: nls.localize('vs/editor/contrib/cursorUndo/browser/cursorUndo', 'cursor.redo', "Cursor Redo"),
             alias: 'Cursor Redo',
             precondition: undefined
         });
diff --git a/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js b/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js
index 42f1441020f519e4add8c21349d799a77c7946e7..346f4732e615444efae02fc15977e5277a05c81b 100644
--- a/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js
+++ b/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js
@@ -47,14 +47,14 @@ registerEditorAction(class PasteAsAction extends EditorAction {
         properties: {
             kind: {
                 type: 'string',
-                description: nls.localize('pasteAs.kind', "The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker."),
+                description: nls.localize('vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution', 'pasteAs.kind', "The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker."),
             }
         },
     }; }
     constructor() {
         super({
             id: 'editor.action.pasteAs',
-            label: nls.localize('pasteAs', "Paste As..."),
+            label: nls.localize('vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution', 'pasteAs', "Paste As..."),
             alias: 'Paste As...',
             precondition: EditorContextKeys.writable,
             metadata: {
@@ -80,7 +80,7 @@ registerEditorAction(class extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.pasteAsText',
-            label: nls.localize('pasteAsText', "Paste as Text"),
+            label: nls.localize('vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution', 'pasteAsText', "Paste as Text"),
             alias: 'Paste as Text',
             precondition: EditorContextKeys.writable,
         });
diff --git a/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.js b/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.js
index c96ab3f2704372ff0fcca1565ccb1cce7167e200..30c95f8c2220ae9a216422d0957074f4700a0c7f 100644
--- a/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.js
+++ b/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.js
@@ -42,7 +42,7 @@ import { IQuickInputService } from '../../../../platform/quickinput/common/quick
 import { PostEditWidgetManager } from './postEditWidget.js';
 import { CancellationError, isCancellationError } from '../../../../base/common/errors.js';
 export const changePasteTypeCommandId = 'editor.changePasteType';
-export const pasteWidgetVisibleCtx = new RawContextKey('pasteWidgetVisible', false, localize('pasteWidgetVisible', "Whether the paste widget is showing"));
+export const pasteWidgetVisibleCtx = new RawContextKey('pasteWidgetVisible', false, localize('vs/editor/contrib/dropOrPasteInto/browser/copyPasteController', 'pasteWidgetVisible', "Whether the paste widget is showing"));
 const vscodeClipboardMime = 'application/vnd.code.copyMetadata';
 let CopyPasteController = class CopyPasteController extends Disposable {
     static { CopyPasteController_1 = this; }
@@ -63,7 +63,7 @@ let CopyPasteController = class CopyPasteController extends Disposable {
         this._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));
         this._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));
         this._pasteProgressManager = this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));
-        this._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, { id: changePasteTypeCommandId, label: localize('postPasteWidgetTitle', "Show paste options...") }));
+        this._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, { id: changePasteTypeCommandId, label: localize('vs/editor/contrib/dropOrPasteInto/browser/copyPasteController', 'postPasteWidgetTitle', "Show paste options...") }));
     }
     changePasteType() {
         this._postPasteWidgetManager.tryShowSelector();
@@ -218,7 +218,7 @@ let CopyPasteController = class CopyPasteController extends Disposable {
         }
     }
     showPasteAsNoEditMessage(selections, preference) {
-        MessageController.get(this._editor)?.showMessage(localize('pasteAsError', "No paste edits for '{0}' found", preference instanceof HierarchicalKind ? preference.value : preference.providerId), selections[0].getStartPosition());
+        MessageController.get(this._editor)?.showMessage(localize('vs/editor/contrib/dropOrPasteInto/browser/copyPasteController', 'pasteAsError', "No paste edits for '{0}' found", preference instanceof HierarchicalKind ? preference.value : preference.providerId), selections[0].getStartPosition());
     }
     doPasteInline(allProviders, selections, dataTransfer, metadata, clipboardEvent) {
         const editor = this._editor;
@@ -267,7 +267,7 @@ let CopyPasteController = class CopyPasteController extends Disposable {
                                 try {
                                     const resolveP = edit.provider.resolveDocumentPasteEdit?.(edit, token);
                                     const showP = new DeferredPromise();
-                                    const resolved = resolveP && await this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('resolveProcess', "Resolving paste edit. Click to cancel"), Promise.race([showP.p, resolveP]), {
+                                    const resolved = resolveP && await this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('vs/editor/contrib/dropOrPasteInto/browser/copyPasteController', 'resolveProcess', "Resolving paste edit. Click to cancel"), Promise.race([showP.p, resolveP]), {
                                         cancel: () => {
                                             showP.cancel();
                                             return reject(new CancellationError());
@@ -294,7 +294,7 @@ let CopyPasteController = class CopyPasteController extends Disposable {
                 }
             }
         });
-        this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', "Running paste handlers. Click to cancel and do basic paste"), p, {
+        this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('vs/editor/contrib/dropOrPasteInto/browser/copyPasteController', 'pasteIntoEditorProgress', "Running paste handlers. Click to cancel and do basic paste"), p, {
             cancel: async () => {
                 try {
                     p.cancel();
@@ -370,7 +370,7 @@ let CopyPasteController = class CopyPasteController extends Disposable {
                         description: edit.kind?.value,
                         edit,
                     })), {
-                        placeHolder: localize('pasteAsPickerPlaceholder', "Select Paste Action"),
+                        placeHolder: localize('vs/editor/contrib/dropOrPasteInto/browser/copyPasteController', 'pasteAsPickerPlaceholder', "Select Paste Action"),
                     });
                     pickedEdit = selected?.edit;
                 }
@@ -389,7 +389,7 @@ let CopyPasteController = class CopyPasteController extends Disposable {
         });
         this._progressService.withProgress({
             location: 10 /* ProgressLocation.Window */,
-            title: localize('pasteAsProgress', "Running paste handlers"),
+            title: localize('vs/editor/contrib/dropOrPasteInto/browser/copyPasteController', 'pasteAsProgress', "Running paste handlers"),
         }, () => p);
     }
     setCopyMetadata(dataTransfer, metadata) {
diff --git a/esm/vs/editor/contrib/dropOrPasteInto/browser/defaultProviders.js b/esm/vs/editor/contrib/dropOrPasteInto/browser/defaultProviders.js
index f532baa0da54ca6198e39a9b2347b7a54d180653..352c04a882d03b7e6ad3d56d2a7d7fa0d64be20c 100644
--- a/esm/vs/editor/contrib/dropOrPasteInto/browser/defaultProviders.js
+++ b/esm/vs/editor/contrib/dropOrPasteInto/browser/defaultProviders.js
@@ -67,7 +67,7 @@ export class DefaultTextPasteOrDropEditProvider extends SimplePasteAndDropProvid
         const insertText = await textEntry.asString();
         return {
             handledMimeType: Mimes.text,
-            title: localize('text.label', "Insert Plain Text"),
+            title: localize('vs/editor/contrib/dropOrPasteInto/browser/defaultProviders', 'text.label', "Insert Plain Text"),
             insertText,
             kind: this.kind,
         };
@@ -101,14 +101,14 @@ class PathProvider extends SimplePasteAndDropProvider {
         if (uriCount > 0) {
             // Dropping at least one generic uri (such as https) so use most generic label
             label = entries.length > 1
-                ? localize('defaultDropProvider.uriList.uris', "Insert Uris")
-                : localize('defaultDropProvider.uriList.uri', "Insert Uri");
+                ? localize('vs/editor/contrib/dropOrPasteInto/browser/defaultProviders', 'defaultDropProvider.uriList.uris', "Insert Uris")
+                : localize('vs/editor/contrib/dropOrPasteInto/browser/defaultProviders', 'defaultDropProvider.uriList.uri', "Insert Uri");
         }
         else {
             // All the paths are file paths
             label = entries.length > 1
-                ? localize('defaultDropProvider.uriList.paths', "Insert Paths")
-                : localize('defaultDropProvider.uriList.path', "Insert Path");
+                ? localize('vs/editor/contrib/dropOrPasteInto/browser/defaultProviders', 'defaultDropProvider.uriList.paths', "Insert Paths")
+                : localize('vs/editor/contrib/dropOrPasteInto/browser/defaultProviders', 'defaultDropProvider.uriList.path', "Insert Path");
         }
         return {
             handledMimeType: Mimes.uriList,
@@ -142,8 +142,8 @@ let RelativePathProvider = class RelativePathProvider extends SimplePasteAndDrop
             handledMimeType: Mimes.uriList,
             insertText: relativeUris.join(' '),
             title: entries.length > 1
-                ? localize('defaultDropProvider.uriList.relativePaths', "Insert Relative Paths")
-                : localize('defaultDropProvider.uriList.relativePath', "Insert Relative Path"),
+                ? localize('vs/editor/contrib/dropOrPasteInto/browser/defaultProviders', 'defaultDropProvider.uriList.relativePaths', "Insert Relative Paths")
+                : localize('vs/editor/contrib/dropOrPasteInto/browser/defaultProviders', 'defaultDropProvider.uriList.relativePath', "Insert Relative Path"),
             kind: this.kind,
         };
     }
@@ -171,7 +171,7 @@ class PasteHtmlProvider {
             edits: [{
                     insertText: htmlText,
                     yieldTo: this._yieldTo,
-                    title: localize('pasteHtmlLabel', 'Insert HTML'),
+                    title: localize('vs/editor/contrib/dropOrPasteInto/browser/defaultProviders', 'pasteHtmlLabel', 'Insert HTML'),
                     kind: this.kind,
                 }],
         };
diff --git a/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution.js b/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution.js
index 611b78f76001f1517d5a9a83785ca0a8dad73c19..ec646e6c57bea6797e3f9901c15cbcd1d91f9c55 100644
--- a/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution.js
+++ b/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution.js
@@ -48,7 +48,7 @@ Registry.as(ConfigurationExtensions.Configuration).registerConfiguration({
         [defaultProviderConfig]: {
             type: 'object',
             scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,
-            description: nls.localize('defaultProviderDescription', "Configures the default drop provider to use for content of a given mime type."),
+            description: nls.localize('vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution', 'defaultProviderDescription', "Configures the default drop provider to use for content of a given mime type."),
             default: {},
             additionalProperties: {
                 type: 'string',
diff --git a/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController.js b/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController.js
index e4cbf4bc6d7d6389a7b277a6dc358fb05f3d0f23..a3efe4e5fedbc47bc68f7ec6d45a504564bd80d4 100644
--- a/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController.js
+++ b/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController.js
@@ -33,7 +33,7 @@ import { sortEditsByYieldTo } from './edit.js';
 import { PostEditWidgetManager } from './postEditWidget.js';
 export const defaultProviderConfig = 'editor.experimental.dropIntoEditor.defaultProvider';
 export const changeDropTypeCommandId = 'editor.changeDropType';
-export const dropWidgetVisibleCtx = new RawContextKey('dropWidgetVisible', false, localize('dropWidgetVisible', "Whether the drop widget is showing"));
+export const dropWidgetVisibleCtx = new RawContextKey('dropWidgetVisible', false, localize('vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController', 'dropWidgetVisible', "Whether the drop widget is showing"));
 let DropIntoEditorController = class DropIntoEditorController extends Disposable {
     static { DropIntoEditorController_1 = this; }
     static { this.ID = 'editor.contrib.dropIntoEditorController'; }
@@ -47,7 +47,7 @@ let DropIntoEditorController = class DropIntoEditorController extends Disposable
         this._treeViewsDragAndDropService = _treeViewsDragAndDropService;
         this.treeItemsTransfer = LocalSelectionTransfer.getInstance();
         this._dropProgressManager = this._register(instantiationService.createInstance(InlineProgressManager, 'dropIntoEditor', editor));
-        this._postDropWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'dropIntoEditor', editor, dropWidgetVisibleCtx, { id: changeDropTypeCommandId, label: localize('postDropWidgetTitle', "Show drop options...") }));
+        this._postDropWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'dropIntoEditor', editor, dropWidgetVisibleCtx, { id: changeDropTypeCommandId, label: localize('vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController', 'postDropWidgetTitle', "Show drop options...") }));
         this._register(editor.onDropIntoEditor(e => this.onDropIntoEditor(editor, e.position, e.event)));
     }
     clearWidgets() {
@@ -102,7 +102,7 @@ let DropIntoEditorController = class DropIntoEditorController extends Disposable
                 }
             }
         });
-        this._dropProgressManager.showWhile(position, localize('dropIntoEditorProgress', "Running drop handlers. Click to cancel"), p, { cancel: () => p.cancel() });
+        this._dropProgressManager.showWhile(position, localize('vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController', 'dropIntoEditorProgress', "Running drop handlers. Click to cancel"), p, { cancel: () => p.cancel() });
         this._currentOperation = p;
     }
     async getDropEdits(providers, model, position, dataTransfer, tokenSource) {
diff --git a/esm/vs/editor/contrib/dropOrPasteInto/browser/postEditWidget.js b/esm/vs/editor/contrib/dropOrPasteInto/browser/postEditWidget.js
index 617bfba95c92e23483c15525d88b8a74cd83c2ca..fe4f976396674c6ecf344a9af8ef6b6ee1f607c8 100644
--- a/esm/vs/editor/contrib/dropOrPasteInto/browser/postEditWidget.js
+++ b/esm/vs/editor/contrib/dropOrPasteInto/browser/postEditWidget.js
@@ -153,7 +153,7 @@ let PostEditWidgetManager = class PostEditWidgetManager extends Disposable {
             resolvedEdit = await resolve(edit, token);
         }
         catch (e) {
-            return handleError(e, localize('resolveError', "Error resolving edit '{0}':\n{1}", edit.title, toErrorMessage(e)));
+            return handleError(e, localize('vs/editor/contrib/dropOrPasteInto/browser/postEditWidget', 'resolveError', "Error resolving edit '{0}':\n{1}", edit.title, toErrorMessage(e)));
         }
         if (token.isCancellationRequested) {
             return;
@@ -173,7 +173,7 @@ let PostEditWidgetManager = class PostEditWidgetManager extends Disposable {
             editRange = model.getDecorationRange(editTrackingDecoration[0]);
         }
         catch (e) {
-            return handleError(e, localize('applyError', "Error applying edit '{0}':\n{1}", edit.title, toErrorMessage(e)));
+            return handleError(e, localize('vs/editor/contrib/dropOrPasteInto/browser/postEditWidget', 'applyError', "Error applying edit '{0}':\n{1}", edit.title, toErrorMessage(e)));
         }
         finally {
             model.deltaDecorations(editTrackingDecoration, []);
diff --git a/esm/vs/editor/contrib/editorState/browser/keybindingCancellation.js b/esm/vs/editor/contrib/editorState/browser/keybindingCancellation.js
index 810824d4c798ac2d52135f4d8da7cbe151fcce90..8a4cb4de1760a08456a24064af6c7fa9c9f7b38a 100644
--- a/esm/vs/editor/contrib/editorState/browser/keybindingCancellation.js
+++ b/esm/vs/editor/contrib/editorState/browser/keybindingCancellation.js
@@ -10,7 +10,7 @@ import { createDecorator } from '../../../../platform/instantiation/common/insta
 import { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';
 import { localize } from '../../../../nls.js';
 const IEditorCancellationTokens = createDecorator('IEditorCancelService');
-const ctxCancellableOperation = new RawContextKey('cancellableOperation', false, localize('cancellableOperation', 'Whether the editor runs a cancellable operation, e.g. like \'Peek References\''));
+const ctxCancellableOperation = new RawContextKey('cancellableOperation', false, localize('vs/editor/contrib/editorState/browser/keybindingCancellation', 'cancellableOperation', 'Whether the editor runs a cancellable operation, e.g. like \'Peek References\''));
 registerSingleton(IEditorCancellationTokens, class {
     constructor() {
         this._tokens = new WeakMap();
diff --git a/esm/vs/editor/contrib/find/browser/findController.js b/esm/vs/editor/contrib/find/browser/findController.js
index d38417247fdbac88cc16c3003e7e552d5f969436..5e6d8b0bbc950a3abb84e62d24746abdd3dec991 100644
--- a/esm/vs/editor/contrib/find/browser/findController.js
+++ b/esm/vs/editor/contrib/find/browser/findController.js
@@ -309,7 +309,7 @@ let CommonFindController = class CommonFindController extends Disposable {
     replaceAll() {
         if (this._model) {
             if (this._editor.getModel()?.isTooLargeForHeapOperation()) {
-                this._notificationService.warn(nls.localize('too.large.for.replaceall', "The file is too large to perform a replace all operation."));
+                this._notificationService.warn(nls.localize('vs/editor/contrib/find/browser/findController', 'too.large.for.replaceall', "The file is too large to perform a replace all operation."));
                 return false;
             }
             this._model.replaceAll();
@@ -420,7 +420,7 @@ FindController = __decorate([
 export { FindController };
 export const StartFindAction = registerMultiEditorAction(new MultiEditorAction({
     id: FIND_IDS.StartFindAction,
-    label: nls.localize('startFindAction', "Find"),
+    label: nls.localize('vs/editor/contrib/find/browser/findController', 'startFindAction', "Find"),
     alias: 'Find',
     precondition: ContextKeyExpr.or(EditorContextKeys.focus, ContextKeyExpr.has('editorIsOpen')),
     kbOpts: {
@@ -431,7 +431,7 @@ export const StartFindAction = registerMultiEditorAction(new MultiEditorAction({
     menuOpts: {
         menuId: MenuId.MenubarEditMenu,
         group: '3_find',
-        title: nls.localize({ key: 'miFind', comment: ['&& denotes a mnemonic'] }, "&&Find"),
+        title: nls.localize('vs/editor/contrib/find/browser/findController', { key: 'miFind', comment: ['&& denotes a mnemonic'] }, "&&Find"),
         order: 1
     }
 }));
@@ -472,7 +472,7 @@ export class StartFindWithArgsAction extends EditorAction {
     constructor() {
         super({
             id: FIND_IDS.StartFindWithArgs,
-            label: nls.localize('startFindWithArgsAction', "Find With Arguments"),
+            label: nls.localize('vs/editor/contrib/find/browser/findController', 'startFindWithArgsAction', "Find With Arguments"),
             alias: 'Find With Arguments',
             precondition: undefined,
             kbOpts: {
@@ -517,7 +517,7 @@ export class StartFindWithSelectionAction extends EditorAction {
     constructor() {
         super({
             id: FIND_IDS.StartFindWithSelection,
-            label: nls.localize('startFindWithSelectionAction', "Find With Selection"),
+            label: nls.localize('vs/editor/contrib/find/browser/findController', 'startFindWithSelectionAction', "Find With Selection"),
             alias: 'Find With Selection',
             precondition: undefined,
             kbOpts: {
@@ -569,7 +569,7 @@ export class NextMatchFindAction extends MatchFindAction {
     constructor() {
         super({
             id: FIND_IDS.NextMatchFindAction,
-            label: nls.localize('findNextMatchAction', "Find Next"),
+            label: nls.localize('vs/editor/contrib/find/browser/findController', 'findNextMatchAction', "Find Next"),
             alias: 'Find Next',
             precondition: undefined,
             kbOpts: [{
@@ -597,7 +597,7 @@ export class PreviousMatchFindAction extends MatchFindAction {
     constructor() {
         super({
             id: FIND_IDS.PreviousMatchFindAction,
-            label: nls.localize('findPreviousMatchAction', "Find Previous"),
+            label: nls.localize('vs/editor/contrib/find/browser/findController', 'findPreviousMatchAction', "Find Previous"),
             alias: 'Find Previous',
             precondition: undefined,
             kbOpts: [{
@@ -621,7 +621,7 @@ export class MoveToMatchFindAction extends EditorAction {
     constructor() {
         super({
             id: FIND_IDS.GoToMatchFindAction,
-            label: nls.localize('findMatchAction.goToMatch', "Go to Match..."),
+            label: nls.localize('vs/editor/contrib/find/browser/findController', 'findMatchAction.goToMatch', "Go to Match..."),
             alias: 'Go to Match...',
             precondition: CONTEXT_FIND_WIDGET_VISIBLE
         });
@@ -637,14 +637,14 @@ export class MoveToMatchFindAction extends EditorAction {
             const notificationService = accessor.get(INotificationService);
             notificationService.notify({
                 severity: Severity.Warning,
-                message: nls.localize('findMatchAction.noResults', "No matches. Try searching for something else.")
+                message: nls.localize('vs/editor/contrib/find/browser/findController', 'findMatchAction.noResults', "No matches. Try searching for something else.")
             });
             return;
         }
         const quickInputService = accessor.get(IQuickInputService);
         const disposables = new DisposableStore();
         const inputBox = disposables.add(quickInputService.createInputBox());
-        inputBox.placeholder = nls.localize('findMatchAction.inputPlaceHolder', "Type a number to go to a specific match (between 1 and {0})", matchesCount);
+        inputBox.placeholder = nls.localize('vs/editor/contrib/find/browser/findController', 'findMatchAction.inputPlaceHolder', "Type a number to go to a specific match (between 1 and {0})", matchesCount);
         const toFindMatchIndex = (value) => {
             const index = parseInt(value);
             if (isNaN(index)) {
@@ -671,7 +671,7 @@ export class MoveToMatchFindAction extends EditorAction {
                 }
             }
             else {
-                inputBox.validationMessage = nls.localize('findMatchAction.inputValidationMessage', "Please type a number between 1 and {0}", controller.getState().matchesCount);
+                inputBox.validationMessage = nls.localize('vs/editor/contrib/find/browser/findController', 'findMatchAction.inputValidationMessage', "Please type a number between 1 and {0}", controller.getState().matchesCount);
                 this.clearDecorations(editor);
             }
         };
@@ -685,7 +685,7 @@ export class MoveToMatchFindAction extends EditorAction {
                 inputBox.hide();
             }
             else {
-                inputBox.validationMessage = nls.localize('findMatchAction.inputValidationMessage', "Please type a number between 1 and {0}", controller.getState().matchesCount);
+                inputBox.validationMessage = nls.localize('vs/editor/contrib/find/browser/findController', 'findMatchAction.inputValidationMessage', "Please type a number between 1 and {0}", controller.getState().matchesCount);
             }
         }));
         disposables.add(inputBox.onDidHide(() => {
@@ -753,7 +753,7 @@ export class NextSelectionMatchFindAction extends SelectionMatchFindAction {
     constructor() {
         super({
             id: FIND_IDS.NextSelectionMatchFindAction,
-            label: nls.localize('nextSelectionMatchFindAction', "Find Next Selection"),
+            label: nls.localize('vs/editor/contrib/find/browser/findController', 'nextSelectionMatchFindAction', "Find Next Selection"),
             alias: 'Find Next Selection',
             precondition: undefined,
             kbOpts: {
@@ -771,7 +771,7 @@ export class PreviousSelectionMatchFindAction extends SelectionMatchFindAction {
     constructor() {
         super({
             id: FIND_IDS.PreviousSelectionMatchFindAction,
-            label: nls.localize('previousSelectionMatchFindAction', "Find Previous Selection"),
+            label: nls.localize('vs/editor/contrib/find/browser/findController', 'previousSelectionMatchFindAction', "Find Previous Selection"),
             alias: 'Find Previous Selection',
             precondition: undefined,
             kbOpts: {
@@ -787,7 +787,7 @@ export class PreviousSelectionMatchFindAction extends SelectionMatchFindAction {
 }
 export const StartFindReplaceAction = registerMultiEditorAction(new MultiEditorAction({
     id: FIND_IDS.StartFindReplaceAction,
-    label: nls.localize('startReplace', "Replace"),
+    label: nls.localize('vs/editor/contrib/find/browser/findController', 'startReplace', "Replace"),
     alias: 'Replace',
     precondition: ContextKeyExpr.or(EditorContextKeys.focus, ContextKeyExpr.has('editorIsOpen')),
     kbOpts: {
@@ -799,7 +799,7 @@ export const StartFindReplaceAction = registerMultiEditorAction(new MultiEditorA
     menuOpts: {
         menuId: MenuId.MenubarEditMenu,
         group: '3_find',
-        title: nls.localize({ key: 'miReplace', comment: ['&& denotes a mnemonic'] }, "&&Replace"),
+        title: nls.localize('vs/editor/contrib/find/browser/findController', { key: 'miReplace', comment: ['&& denotes a mnemonic'] }, "&&Replace"),
         order: 2
     }
 }));
diff --git a/esm/vs/editor/contrib/find/browser/findWidget.js b/esm/vs/editor/contrib/find/browser/findWidget.js
index 3db4195e54868b19ae2f390c439d297e10a0cbb8..e2b3efb081faf32abe5f164926aa82b3146221ce 100644
--- a/esm/vs/editor/contrib/find/browser/findWidget.js
+++ b/esm/vs/editor/contrib/find/browser/findWidget.js
@@ -27,28 +27,28 @@ import { isHighContrast } from '../../../../platform/theme/common/theme.js';
 import { assertIsDefined } from '../../../../base/common/types.js';
 import { defaultInputBoxStyles, defaultToggleStyles } from '../../../../platform/theme/browser/defaultStyles.js';
 import { createInstantHoverDelegate, getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';
-const findCollapsedIcon = registerIcon('find-collapsed', Codicon.chevronRight, nls.localize('findCollapsedIcon', 'Icon to indicate that the editor find widget is collapsed.'));
-const findExpandedIcon = registerIcon('find-expanded', Codicon.chevronDown, nls.localize('findExpandedIcon', 'Icon to indicate that the editor find widget is expanded.'));
-export const findSelectionIcon = registerIcon('find-selection', Codicon.selection, nls.localize('findSelectionIcon', 'Icon for \'Find in Selection\' in the editor find widget.'));
-export const findReplaceIcon = registerIcon('find-replace', Codicon.replace, nls.localize('findReplaceIcon', 'Icon for \'Replace\' in the editor find widget.'));
-export const findReplaceAllIcon = registerIcon('find-replace-all', Codicon.replaceAll, nls.localize('findReplaceAllIcon', 'Icon for \'Replace All\' in the editor find widget.'));
-export const findPreviousMatchIcon = registerIcon('find-previous-match', Codicon.arrowUp, nls.localize('findPreviousMatchIcon', 'Icon for \'Find Previous\' in the editor find widget.'));
-export const findNextMatchIcon = registerIcon('find-next-match', Codicon.arrowDown, nls.localize('findNextMatchIcon', 'Icon for \'Find Next\' in the editor find widget.'));
-const NLS_FIND_DIALOG_LABEL = nls.localize('label.findDialog', "Find / Replace");
-const NLS_FIND_INPUT_LABEL = nls.localize('label.find', "Find");
-const NLS_FIND_INPUT_PLACEHOLDER = nls.localize('placeholder.find', "Find");
-const NLS_PREVIOUS_MATCH_BTN_LABEL = nls.localize('label.previousMatchButton', "Previous Match");
-const NLS_NEXT_MATCH_BTN_LABEL = nls.localize('label.nextMatchButton', "Next Match");
-const NLS_TOGGLE_SELECTION_FIND_TITLE = nls.localize('label.toggleSelectionFind', "Find in Selection");
-const NLS_CLOSE_BTN_LABEL = nls.localize('label.closeButton', "Close");
-const NLS_REPLACE_INPUT_LABEL = nls.localize('label.replace', "Replace");
-const NLS_REPLACE_INPUT_PLACEHOLDER = nls.localize('placeholder.replace', "Replace");
-const NLS_REPLACE_BTN_LABEL = nls.localize('label.replaceButton', "Replace");
-const NLS_REPLACE_ALL_BTN_LABEL = nls.localize('label.replaceAllButton', "Replace All");
-const NLS_TOGGLE_REPLACE_MODE_BTN_LABEL = nls.localize('label.toggleReplaceButton', "Toggle Replace");
-const NLS_MATCHES_COUNT_LIMIT_TITLE = nls.localize('title.matchesCountLimit', "Only the first {0} results are highlighted, but all find operations work on the entire text.", MATCHES_LIMIT);
-export const NLS_MATCHES_LOCATION = nls.localize('label.matchesLocation', "{0} of {1}");
-export const NLS_NO_RESULTS = nls.localize('label.noResults', "No results");
+const findCollapsedIcon = registerIcon('find-collapsed', Codicon.chevronRight, nls.localize('vs/editor/contrib/find/browser/findWidget', 'findCollapsedIcon', 'Icon to indicate that the editor find widget is collapsed.'));
+const findExpandedIcon = registerIcon('find-expanded', Codicon.chevronDown, nls.localize('vs/editor/contrib/find/browser/findWidget', 'findExpandedIcon', 'Icon to indicate that the editor find widget is expanded.'));
+export const findSelectionIcon = registerIcon('find-selection', Codicon.selection, nls.localize('vs/editor/contrib/find/browser/findWidget', 'findSelectionIcon', 'Icon for \'Find in Selection\' in the editor find widget.'));
+export const findReplaceIcon = registerIcon('find-replace', Codicon.replace, nls.localize('vs/editor/contrib/find/browser/findWidget', 'findReplaceIcon', 'Icon for \'Replace\' in the editor find widget.'));
+export const findReplaceAllIcon = registerIcon('find-replace-all', Codicon.replaceAll, nls.localize('vs/editor/contrib/find/browser/findWidget', 'findReplaceAllIcon', 'Icon for \'Replace All\' in the editor find widget.'));
+export const findPreviousMatchIcon = registerIcon('find-previous-match', Codicon.arrowUp, nls.localize('vs/editor/contrib/find/browser/findWidget', 'findPreviousMatchIcon', 'Icon for \'Find Previous\' in the editor find widget.'));
+export const findNextMatchIcon = registerIcon('find-next-match', Codicon.arrowDown, nls.localize('vs/editor/contrib/find/browser/findWidget', 'findNextMatchIcon', 'Icon for \'Find Next\' in the editor find widget.'));
+const NLS_FIND_DIALOG_LABEL = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.findDialog', "Find / Replace");
+const NLS_FIND_INPUT_LABEL = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.find', "Find");
+const NLS_FIND_INPUT_PLACEHOLDER = nls.localize('vs/editor/contrib/find/browser/findWidget', 'placeholder.find', "Find");
+const NLS_PREVIOUS_MATCH_BTN_LABEL = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.previousMatchButton', "Previous Match");
+const NLS_NEXT_MATCH_BTN_LABEL = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.nextMatchButton', "Next Match");
+const NLS_TOGGLE_SELECTION_FIND_TITLE = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.toggleSelectionFind', "Find in Selection");
+const NLS_CLOSE_BTN_LABEL = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.closeButton', "Close");
+const NLS_REPLACE_INPUT_LABEL = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.replace', "Replace");
+const NLS_REPLACE_INPUT_PLACEHOLDER = nls.localize('vs/editor/contrib/find/browser/findWidget', 'placeholder.replace', "Replace");
+const NLS_REPLACE_BTN_LABEL = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.replaceButton', "Replace");
+const NLS_REPLACE_ALL_BTN_LABEL = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.replaceAllButton', "Replace All");
+const NLS_TOGGLE_REPLACE_MODE_BTN_LABEL = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.toggleReplaceButton', "Toggle Replace");
+const NLS_MATCHES_COUNT_LIMIT_TITLE = nls.localize('vs/editor/contrib/find/browser/findWidget', 'title.matchesCountLimit', "Only the first {0} results are highlighted, but all find operations work on the entire text.", MATCHES_LIMIT);
+export const NLS_MATCHES_LOCATION = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.matchesLocation', "{0} of {1}");
+export const NLS_NO_RESULTS = nls.localize('vs/editor/contrib/find/browser/findWidget', 'label.noResults', "No results");
 const FIND_WIDGET_INITIAL_WIDTH = 419;
 const PART_WIDTH = 275;
 const FIND_INPUT_AREA_WIDTH = PART_WIDTH - 54;
@@ -327,11 +327,11 @@ export class FindWidget extends Widget {
     _getAriaLabel(label, currentMatch, searchString) {
         if (label === NLS_NO_RESULTS) {
             return searchString === ''
-                ? nls.localize('ariaSearchNoResultEmpty', "{0} found", label)
-                : nls.localize('ariaSearchNoResult', "{0} found for '{1}'", label, searchString);
+                ? nls.localize('vs/editor/contrib/find/browser/findWidget', 'ariaSearchNoResultEmpty', "{0} found", label)
+                : nls.localize('vs/editor/contrib/find/browser/findWidget', 'ariaSearchNoResult', "{0} found for '{1}'", label, searchString);
         }
         if (currentMatch) {
-            const ariaLabel = nls.localize('ariaSearchNoResultWithLineNum', "{0} found for '{1}', at {2}", label, searchString, currentMatch.startLineNumber + ':' + currentMatch.startColumn);
+            const ariaLabel = nls.localize('vs/editor/contrib/find/browser/findWidget', 'ariaSearchNoResultWithLineNum', "{0} found for '{1}', at {2}", label, searchString, currentMatch.startLineNumber + ':' + currentMatch.startColumn);
             const model = this._codeEditor.getModel();
             if (model && (currentMatch.startLineNumber <= model.getLineCount()) && (currentMatch.startLineNumber >= 1)) {
                 const lineContent = model.getLineContent(currentMatch.startLineNumber);
@@ -339,7 +339,7 @@ export class FindWidget extends Widget {
             }
             return ariaLabel;
         }
-        return nls.localize('ariaSearchNoResultWithLineNumNoCurrentMatch', "{0} found for '{1}'", label, searchString);
+        return nls.localize('vs/editor/contrib/find/browser/findWidget', 'ariaSearchNoResultWithLineNumNoCurrentMatch', "{0} found for '{1}'", label, searchString);
     }
     /**
      * If 'selection find' is ON we should not disable the button (its function is to cancel 'selection find').
@@ -694,7 +694,7 @@ export class FindWidget extends Widget {
             else {
                 if (platform.isWindows && platform.isNative && !this._ctrlEnterReplaceAllWarningPrompted) {
                     // this is the first time when users press Ctrl + Enter to replace all
-                    this._notificationService.info(nls.localize('ctrlEnter.keybindingChanged', 'Ctrl+Enter now inserts line break instead of replacing all. You can modify the keybinding for editor.action.replaceAll to override this behavior.'));
+                    this._notificationService.info(nls.localize('vs/editor/contrib/find/browser/findWidget', 'ctrlEnter.keybindingChanged', 'Ctrl+Enter now inserts line break instead of replacing all. You can modify the keybinding for editor.action.replaceAll to override this behavior.'));
                     this._ctrlEnterReplaceAllWarningPrompted = true;
                     this._storageService.store(ctrlEnterReplaceAllWarningPromptedKey, true, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);
                 }
diff --git a/esm/vs/editor/contrib/folding/browser/folding.js b/esm/vs/editor/contrib/folding/browser/folding.js
index 8378a14a7ff448b33b3e69c4adc37f5baf2dad8e..a6b3807cd69a6bbf07005bdce2233a104c5b0d46 100644
--- a/esm/vs/editor/contrib/folding/browser/folding.js
+++ b/esm/vs/editor/contrib/folding/browser/folding.js
@@ -506,7 +506,7 @@ class UnfoldAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.unfold',
-            label: nls.localize('unfoldAction.label', "Unfold"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'unfoldAction.label', "Unfold"),
             alias: 'Unfold',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -568,7 +568,7 @@ class UnFoldRecursivelyAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.unfoldRecursively',
-            label: nls.localize('unFoldRecursivelyAction.label', "Unfold Recursively"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'unFoldRecursivelyAction.label', "Unfold Recursively"),
             alias: 'Unfold Recursively',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -586,7 +586,7 @@ class FoldAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.fold',
-            label: nls.localize('foldAction.label', "Fold"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'foldAction.label', "Fold"),
             alias: 'Fold',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -654,7 +654,7 @@ class ToggleFoldAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.toggleFold',
-            label: nls.localize('toggleFoldAction.label', "Toggle Fold"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'toggleFoldAction.label', "Toggle Fold"),
             alias: 'Toggle Fold',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -673,7 +673,7 @@ class FoldRecursivelyAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.foldRecursively',
-            label: nls.localize('foldRecursivelyAction.label', "Fold Recursively"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'foldRecursivelyAction.label', "Fold Recursively"),
             alias: 'Fold Recursively',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -692,7 +692,7 @@ class ToggleFoldRecursivelyAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.toggleFoldRecursively',
-            label: nls.localize('toggleFoldRecursivelyAction.label', "Toggle Fold Recursively"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'toggleFoldRecursivelyAction.label', "Toggle Fold Recursively"),
             alias: 'Toggle Fold Recursively',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -711,7 +711,7 @@ class FoldAllBlockCommentsAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.foldAllBlockComments',
-            label: nls.localize('foldAllBlockComments.label', "Fold All Block Comments"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'foldAllBlockComments.label', "Fold All Block Comments"),
             alias: 'Fold All Block Comments',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -742,7 +742,7 @@ class FoldAllRegionsAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.foldAllMarkerRegions',
-            label: nls.localize('foldAllMarkerRegions.label', "Fold All Regions"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'foldAllMarkerRegions.label', "Fold All Regions"),
             alias: 'Fold All Regions',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -773,7 +773,7 @@ class UnfoldAllRegionsAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.unfoldAllMarkerRegions',
-            label: nls.localize('unfoldAllMarkerRegions.label', "Unfold All Regions"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'unfoldAllMarkerRegions.label', "Unfold All Regions"),
             alias: 'Unfold All Regions',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -804,7 +804,7 @@ class FoldAllExceptAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.foldAllExcept',
-            label: nls.localize('foldAllExcept.label', "Fold All Except Selected"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'foldAllExcept.label', "Fold All Except Selected"),
             alias: 'Fold All Except Selected',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -823,7 +823,7 @@ class UnfoldAllExceptAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.unfoldAllExcept',
-            label: nls.localize('unfoldAllExcept.label', "Unfold All Except Selected"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'unfoldAllExcept.label', "Unfold All Except Selected"),
             alias: 'Unfold All Except Selected',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -842,7 +842,7 @@ class FoldAllAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.foldAll',
-            label: nls.localize('foldAllAction.label', "Fold All"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'foldAllAction.label', "Fold All"),
             alias: 'Fold All',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -860,7 +860,7 @@ class UnfoldAllAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.unfoldAll',
-            label: nls.localize('unfoldAllAction.label', "Unfold All"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'unfoldAllAction.label', "Unfold All"),
             alias: 'Unfold All',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -889,7 +889,7 @@ class GotoParentFoldAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.gotoParentFold',
-            label: nls.localize('gotoParentFold.label', "Go to Parent Fold"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'gotoParentFold.label', "Go to Parent Fold"),
             alias: 'Go to Parent Fold',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -918,7 +918,7 @@ class GotoPreviousFoldAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.gotoPreviousFold',
-            label: nls.localize('gotoPreviousFold.label', "Go to Previous Folding Range"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'gotoPreviousFold.label', "Go to Previous Folding Range"),
             alias: 'Go to Previous Folding Range',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -947,7 +947,7 @@ class GotoNextFoldAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.gotoNextFold',
-            label: nls.localize('gotoNextFold.label', "Go to Next Folding Range"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'gotoNextFold.label', "Go to Next Folding Range"),
             alias: 'Go to Next Folding Range',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -975,7 +975,7 @@ class FoldRangeFromSelectionAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.createFoldingRangeFromSelection',
-            label: nls.localize('createManualFoldRange.label', "Create Folding Range from Selection"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'createManualFoldRange.label', "Create Folding Range from Selection"),
             alias: 'Create Folding Range from Selection',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -1024,7 +1024,7 @@ class RemoveFoldRangeFromSelectionAction extends FoldingAction {
     constructor() {
         super({
             id: 'editor.removeManualFoldingRanges',
-            label: nls.localize('removeManualFoldingRanges.label', "Remove Manual Folding Ranges"),
+            label: nls.localize('vs/editor/contrib/folding/browser/folding', 'removeManualFoldingRanges.label', "Remove Manual Folding Ranges"),
             alias: 'Remove Manual Folding Ranges',
             precondition: CONTEXT_FOLDING_ENABLED,
             kbOpts: {
@@ -1069,7 +1069,7 @@ registerEditorAction(RemoveFoldRangeFromSelectionAction);
 for (let i = 1; i <= 7; i++) {
     registerInstantiatedEditorAction(new FoldLevelAction({
         id: FoldLevelAction.ID(i),
-        label: nls.localize('foldLevelAction.label', "Fold Level {0}", i),
+        label: nls.localize('vs/editor/contrib/folding/browser/folding', 'foldLevelAction.label', "Fold Level {0}", i),
         alias: `Fold Level ${i}`,
         precondition: CONTEXT_FOLDING_ENABLED,
         kbOpts: {
diff --git a/esm/vs/editor/contrib/folding/browser/foldingDecorations.js b/esm/vs/editor/contrib/folding/browser/foldingDecorations.js
index f5c90dd7694f6fbeebd8ef191daae9c6d90f4f35..26b4a4a59175f1ea6d5c3df8171a3c8be75e4806 100644
--- a/esm/vs/editor/contrib/folding/browser/foldingDecorations.js
+++ b/esm/vs/editor/contrib/folding/browser/foldingDecorations.js
@@ -9,16 +9,16 @@ import { editorSelectionBackground, iconForeground, registerColor, transparent }
 import { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';
 import { themeColorFromId } from '../../../../platform/theme/common/themeService.js';
 import { ThemeIcon } from '../../../../base/common/themables.js';
-const foldBackground = registerColor('editor.foldBackground', { light: transparent(editorSelectionBackground, 0.3), dark: transparent(editorSelectionBackground, 0.3), hcDark: null, hcLight: null }, localize('foldBackgroundBackground', "Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations."), true);
-registerColor('editor.foldPlaceholderForeground', { light: '#808080', dark: '#808080', hcDark: null, hcLight: null }, localize('collapsedTextColor', "Color of the collapsed text after the first line of a folded range."));
-registerColor('editorGutter.foldingControlForeground', iconForeground, localize('editorGutter.foldingControlForeground', 'Color of the folding control in the editor gutter.'));
-export const foldingExpandedIcon = registerIcon('folding-expanded', Codicon.chevronDown, localize('foldingExpandedIcon', 'Icon for expanded ranges in the editor glyph margin.'));
-export const foldingCollapsedIcon = registerIcon('folding-collapsed', Codicon.chevronRight, localize('foldingCollapsedIcon', 'Icon for collapsed ranges in the editor glyph margin.'));
-export const foldingManualCollapsedIcon = registerIcon('folding-manual-collapsed', foldingCollapsedIcon, localize('foldingManualCollapedIcon', 'Icon for manually collapsed ranges in the editor glyph margin.'));
-export const foldingManualExpandedIcon = registerIcon('folding-manual-expanded', foldingExpandedIcon, localize('foldingManualExpandedIcon', 'Icon for manually expanded ranges in the editor glyph margin.'));
+const foldBackground = registerColor('editor.foldBackground', { light: transparent(editorSelectionBackground, 0.3), dark: transparent(editorSelectionBackground, 0.3), hcDark: null, hcLight: null }, localize('vs/editor/contrib/folding/browser/foldingDecorations', 'foldBackgroundBackground', "Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations."), true);
+registerColor('editor.foldPlaceholderForeground', { light: '#808080', dark: '#808080', hcDark: null, hcLight: null }, localize('vs/editor/contrib/folding/browser/foldingDecorations', 'collapsedTextColor', "Color of the collapsed text after the first line of a folded range."));
+registerColor('editorGutter.foldingControlForeground', iconForeground, localize('vs/editor/contrib/folding/browser/foldingDecorations', 'editorGutter.foldingControlForeground', 'Color of the folding control in the editor gutter.'));
+export const foldingExpandedIcon = registerIcon('folding-expanded', Codicon.chevronDown, localize('vs/editor/contrib/folding/browser/foldingDecorations', 'foldingExpandedIcon', 'Icon for expanded ranges in the editor glyph margin.'));
+export const foldingCollapsedIcon = registerIcon('folding-collapsed', Codicon.chevronRight, localize('vs/editor/contrib/folding/browser/foldingDecorations', 'foldingCollapsedIcon', 'Icon for collapsed ranges in the editor glyph margin.'));
+export const foldingManualCollapsedIcon = registerIcon('folding-manual-collapsed', foldingCollapsedIcon, localize('vs/editor/contrib/folding/browser/foldingDecorations', 'foldingManualCollapedIcon', 'Icon for manually collapsed ranges in the editor glyph margin.'));
+export const foldingManualExpandedIcon = registerIcon('folding-manual-expanded', foldingExpandedIcon, localize('vs/editor/contrib/folding/browser/foldingDecorations', 'foldingManualExpandedIcon', 'Icon for manually expanded ranges in the editor glyph margin.'));
 const foldedBackgroundMinimap = { color: themeColorFromId(foldBackground), position: 1 /* MinimapPosition.Inline */ };
-const collapsed = localize('linesCollapsed', "Click to expand the range.");
-const expanded = localize('linesExpanded', "Click to collapse the range.");
+const collapsed = localize('vs/editor/contrib/folding/browser/foldingDecorations', 'linesCollapsed', "Click to expand the range.");
+const expanded = localize('vs/editor/contrib/folding/browser/foldingDecorations', 'linesExpanded', "Click to collapse the range.");
 export class FoldingDecorationProvider {
     static { this.COLLAPSED_VISUAL_DECORATION = ModelDecorationOptions.register({
         description: 'folding-collapsed-visual-decoration',
diff --git a/esm/vs/editor/contrib/fontZoom/browser/fontZoom.js b/esm/vs/editor/contrib/fontZoom/browser/fontZoom.js
index 9caf478f4683994b04c212e89e2f88701c1bc274..75c197ce46dd1ceecfb1fb9c3d959e68fde9bd72 100644
--- a/esm/vs/editor/contrib/fontZoom/browser/fontZoom.js
+++ b/esm/vs/editor/contrib/fontZoom/browser/fontZoom.js
@@ -9,7 +9,7 @@ class EditorFontZoomIn extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.fontZoomIn',
-            label: nls.localize('EditorFontZoomIn.label', "Increase Editor Font Size"),
+            label: nls.localize('vs/editor/contrib/fontZoom/browser/fontZoom', 'EditorFontZoomIn.label', "Increase Editor Font Size"),
             alias: 'Increase Editor Font Size',
             precondition: undefined
         });
@@ -22,7 +22,7 @@ class EditorFontZoomOut extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.fontZoomOut',
-            label: nls.localize('EditorFontZoomOut.label', "Decrease Editor Font Size"),
+            label: nls.localize('vs/editor/contrib/fontZoom/browser/fontZoom', 'EditorFontZoomOut.label', "Decrease Editor Font Size"),
             alias: 'Decrease Editor Font Size',
             precondition: undefined
         });
@@ -35,7 +35,7 @@ class EditorFontZoomReset extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.fontZoomReset',
-            label: nls.localize('EditorFontZoomReset.label', "Reset Editor Font Size"),
+            label: nls.localize('vs/editor/contrib/fontZoom/browser/fontZoom', 'EditorFontZoomReset.label', "Reset Editor Font Size"),
             alias: 'Reset Editor Font Size',
             precondition: undefined
         });
diff --git a/esm/vs/editor/contrib/format/browser/formatActions.js b/esm/vs/editor/contrib/format/browser/formatActions.js
index 2e355bfe12e355ae7ff2567bf1169eda007ae973..42bbb501a5e2131f62f5d4738452adc041bf6dc0 100644
--- a/esm/vs/editor/contrib/format/browser/formatActions.js
+++ b/esm/vs/editor/contrib/format/browser/formatActions.js
@@ -185,7 +185,7 @@ class FormatDocumentAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.formatDocument',
-            label: nls.localize('formatDocument.label', "Format Document"),
+            label: nls.localize('vs/editor/contrib/format/browser/formatActions', 'formatDocument.label', "Format Document"),
             alias: 'Format Document',
             precondition: ContextKeyExpr.and(EditorContextKeys.notInCompositeEditor, EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),
             kbOpts: {
@@ -212,7 +212,7 @@ class FormatSelectionAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.formatSelection',
-            label: nls.localize('formatSelection.label', "Format Selection"),
+            label: nls.localize('vs/editor/contrib/format/browser/formatActions', 'formatSelection.label', "Format Selection"),
             alias: 'Format Selection',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),
             kbOpts: {
diff --git a/esm/vs/editor/contrib/gotoError/browser/gotoError.js b/esm/vs/editor/contrib/gotoError/browser/gotoError.js
index 30f4088970c8fa016963f1912aae45a7f8904533..72d65b107ebdba11dae791c6c91068fa515415a7 100644
--- a/esm/vs/editor/contrib/gotoError/browser/gotoError.js
+++ b/esm/vs/editor/contrib/gotoError/browser/gotoError.js
@@ -162,7 +162,7 @@ class MarkerNavigationAction extends EditorAction {
 }
 export class NextMarkerAction extends MarkerNavigationAction {
     static { this.ID = 'editor.action.marker.next'; }
-    static { this.LABEL = nls.localize('markerAction.next.label', "Go to Next Problem (Error, Warning, Info)"); }
+    static { this.LABEL = nls.localize('vs/editor/contrib/gotoError/browser/gotoError', 'markerAction.next.label', "Go to Next Problem (Error, Warning, Info)"); }
     constructor() {
         super(true, false, {
             id: NextMarkerAction.ID,
@@ -177,7 +177,7 @@ export class NextMarkerAction extends MarkerNavigationAction {
             menuOpts: {
                 menuId: MarkerNavigationWidget.TitleMenu,
                 title: NextMarkerAction.LABEL,
-                icon: registerIcon('marker-navigation-next', Codicon.arrowDown, nls.localize('nextMarkerIcon', 'Icon for goto next marker.')),
+                icon: registerIcon('marker-navigation-next', Codicon.arrowDown, nls.localize('vs/editor/contrib/gotoError/browser/gotoError', 'nextMarkerIcon', 'Icon for goto next marker.')),
                 group: 'navigation',
                 order: 1
             }
@@ -186,7 +186,7 @@ export class NextMarkerAction extends MarkerNavigationAction {
 }
 class PrevMarkerAction extends MarkerNavigationAction {
     static { this.ID = 'editor.action.marker.prev'; }
-    static { this.LABEL = nls.localize('markerAction.previous.label', "Go to Previous Problem (Error, Warning, Info)"); }
+    static { this.LABEL = nls.localize('vs/editor/contrib/gotoError/browser/gotoError', 'markerAction.previous.label', "Go to Previous Problem (Error, Warning, Info)"); }
     constructor() {
         super(false, false, {
             id: PrevMarkerAction.ID,
@@ -201,7 +201,7 @@ class PrevMarkerAction extends MarkerNavigationAction {
             menuOpts: {
                 menuId: MarkerNavigationWidget.TitleMenu,
                 title: PrevMarkerAction.LABEL,
-                icon: registerIcon('marker-navigation-previous', Codicon.arrowUp, nls.localize('previousMarkerIcon', 'Icon for goto previous marker.')),
+                icon: registerIcon('marker-navigation-previous', Codicon.arrowUp, nls.localize('vs/editor/contrib/gotoError/browser/gotoError', 'previousMarkerIcon', 'Icon for goto previous marker.')),
                 group: 'navigation',
                 order: 2
             }
@@ -212,7 +212,7 @@ class NextMarkerInFilesAction extends MarkerNavigationAction {
     constructor() {
         super(true, true, {
             id: 'editor.action.marker.nextInFiles',
-            label: nls.localize('markerAction.nextInFiles.label', "Go to Next Problem in Files (Error, Warning, Info)"),
+            label: nls.localize('vs/editor/contrib/gotoError/browser/gotoError', 'markerAction.nextInFiles.label', "Go to Next Problem in Files (Error, Warning, Info)"),
             alias: 'Go to Next Problem in Files (Error, Warning, Info)',
             precondition: undefined,
             kbOpts: {
@@ -222,7 +222,7 @@ class NextMarkerInFilesAction extends MarkerNavigationAction {
             },
             menuOpts: {
                 menuId: MenuId.MenubarGoMenu,
-                title: nls.localize({ key: 'miGotoNextProblem', comment: ['&& denotes a mnemonic'] }, "Next &&Problem"),
+                title: nls.localize('vs/editor/contrib/gotoError/browser/gotoError', { key: 'miGotoNextProblem', comment: ['&& denotes a mnemonic'] }, "Next &&Problem"),
                 group: '6_problem_nav',
                 order: 1
             }
@@ -233,7 +233,7 @@ class PrevMarkerInFilesAction extends MarkerNavigationAction {
     constructor() {
         super(false, true, {
             id: 'editor.action.marker.prevInFiles',
-            label: nls.localize('markerAction.previousInFiles.label', "Go to Previous Problem in Files (Error, Warning, Info)"),
+            label: nls.localize('vs/editor/contrib/gotoError/browser/gotoError', 'markerAction.previousInFiles.label', "Go to Previous Problem in Files (Error, Warning, Info)"),
             alias: 'Go to Previous Problem in Files (Error, Warning, Info)',
             precondition: undefined,
             kbOpts: {
@@ -243,7 +243,7 @@ class PrevMarkerInFilesAction extends MarkerNavigationAction {
             },
             menuOpts: {
                 menuId: MenuId.MenubarGoMenu,
-                title: nls.localize({ key: 'miGotoPreviousProblem', comment: ['&& denotes a mnemonic'] }, "Previous &&Problem"),
+                title: nls.localize('vs/editor/contrib/gotoError/browser/gotoError', { key: 'miGotoPreviousProblem', comment: ['&& denotes a mnemonic'] }, "Previous &&Problem"),
                 group: '6_problem_nav',
                 order: 2
             }
diff --git a/esm/vs/editor/contrib/gotoError/browser/gotoErrorWidget.js b/esm/vs/editor/contrib/gotoError/browser/gotoErrorWidget.js
index 38d44bc71548a109da1cd0dc8f1bc34a4cb8d290..09fdee8280dfec43ddbf6706ca4bdb75638bf168 100644
--- a/esm/vs/editor/contrib/gotoError/browser/gotoErrorWidget.js
+++ b/esm/vs/editor/contrib/gotoError/browser/gotoErrorWidget.js
@@ -174,19 +174,19 @@ class MessageWidget {
         let severityLabel = '';
         switch (marker.severity) {
             case MarkerSeverity.Error:
-                severityLabel = nls.localize('Error', "Error");
+                severityLabel = nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'Error', "Error");
                 break;
             case MarkerSeverity.Warning:
-                severityLabel = nls.localize('Warning', "Warning");
+                severityLabel = nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'Warning', "Warning");
                 break;
             case MarkerSeverity.Info:
-                severityLabel = nls.localize('Info', "Info");
+                severityLabel = nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'Info', "Info");
                 break;
             case MarkerSeverity.Hint:
-                severityLabel = nls.localize('Hint', "Hint");
+                severityLabel = nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'Hint', "Hint");
                 break;
         }
-        let ariaLabel = nls.localize('marker aria', "{0} at {1}. ", severityLabel, marker.startLineNumber + ':' + marker.startColumn);
+        let ariaLabel = nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'marker aria', "{0} at {1}. ", severityLabel, marker.startLineNumber + ':' + marker.startColumn);
         const model = this._editor.getModel();
         if (model && (marker.startLineNumber <= model.getLineCount()) && (marker.startLineNumber >= 1)) {
             const lineContent = model.getLineContent(marker.startLineNumber);
@@ -287,8 +287,8 @@ let MarkerNavigationWidget = class MarkerNavigationWidget extends PeekViewWidget
         const model = this.editor.getModel();
         if (model) {
             const detail = markerCount > 1
-                ? nls.localize('problems', "{0} of {1} problems", markerIdx, markerCount)
-                : nls.localize('change', "{0} of {1} problem", markerIdx, markerCount);
+                ? nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'problems', "{0} of {1} problems", markerIdx, markerCount)
+                : nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'change', "{0} of {1} problem", markerIdx, markerCount);
             this.setTitle(basename(model.uri), detail);
         }
         this._icon.className = `codicon ${SeverityIcon.className(MarkerSeverity.toSeverity(this._severity))}`;
@@ -332,10 +332,10 @@ export { MarkerNavigationWidget };
 const errorDefault = oneOf(editorErrorForeground, editorErrorBorder);
 const warningDefault = oneOf(editorWarningForeground, editorWarningBorder);
 const infoDefault = oneOf(editorInfoForeground, editorInfoBorder);
-const editorMarkerNavigationError = registerColor('editorMarkerNavigationError.background', { dark: errorDefault, light: errorDefault, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorMarkerNavigationError', 'Editor marker navigation widget error color.'));
-const editorMarkerNavigationErrorHeader = registerColor('editorMarkerNavigationError.headerBackground', { dark: transparent(editorMarkerNavigationError, .1), light: transparent(editorMarkerNavigationError, .1), hcDark: null, hcLight: null }, nls.localize('editorMarkerNavigationErrorHeaderBackground', 'Editor marker navigation widget error heading background.'));
-const editorMarkerNavigationWarning = registerColor('editorMarkerNavigationWarning.background', { dark: warningDefault, light: warningDefault, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorMarkerNavigationWarning', 'Editor marker navigation widget warning color.'));
-const editorMarkerNavigationWarningHeader = registerColor('editorMarkerNavigationWarning.headerBackground', { dark: transparent(editorMarkerNavigationWarning, .1), light: transparent(editorMarkerNavigationWarning, .1), hcDark: '#0C141F', hcLight: transparent(editorMarkerNavigationWarning, .2) }, nls.localize('editorMarkerNavigationWarningBackground', 'Editor marker navigation widget warning heading background.'));
-const editorMarkerNavigationInfo = registerColor('editorMarkerNavigationInfo.background', { dark: infoDefault, light: infoDefault, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorMarkerNavigationInfo', 'Editor marker navigation widget info color.'));
-const editorMarkerNavigationInfoHeader = registerColor('editorMarkerNavigationInfo.headerBackground', { dark: transparent(editorMarkerNavigationInfo, .1), light: transparent(editorMarkerNavigationInfo, .1), hcDark: null, hcLight: null }, nls.localize('editorMarkerNavigationInfoHeaderBackground', 'Editor marker navigation widget info heading background.'));
-const editorMarkerNavigationBackground = registerColor('editorMarkerNavigation.background', editorBackground, nls.localize('editorMarkerNavigationBackground', 'Editor marker navigation widget background.'));
+const editorMarkerNavigationError = registerColor('editorMarkerNavigationError.background', { dark: errorDefault, light: errorDefault, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'editorMarkerNavigationError', 'Editor marker navigation widget error color.'));
+const editorMarkerNavigationErrorHeader = registerColor('editorMarkerNavigationError.headerBackground', { dark: transparent(editorMarkerNavigationError, .1), light: transparent(editorMarkerNavigationError, .1), hcDark: null, hcLight: null }, nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'editorMarkerNavigationErrorHeaderBackground', 'Editor marker navigation widget error heading background.'));
+const editorMarkerNavigationWarning = registerColor('editorMarkerNavigationWarning.background', { dark: warningDefault, light: warningDefault, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'editorMarkerNavigationWarning', 'Editor marker navigation widget warning color.'));
+const editorMarkerNavigationWarningHeader = registerColor('editorMarkerNavigationWarning.headerBackground', { dark: transparent(editorMarkerNavigationWarning, .1), light: transparent(editorMarkerNavigationWarning, .1), hcDark: '#0C141F', hcLight: transparent(editorMarkerNavigationWarning, .2) }, nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'editorMarkerNavigationWarningBackground', 'Editor marker navigation widget warning heading background.'));
+const editorMarkerNavigationInfo = registerColor('editorMarkerNavigationInfo.background', { dark: infoDefault, light: infoDefault, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'editorMarkerNavigationInfo', 'Editor marker navigation widget info color.'));
+const editorMarkerNavigationInfoHeader = registerColor('editorMarkerNavigationInfo.headerBackground', { dark: transparent(editorMarkerNavigationInfo, .1), light: transparent(editorMarkerNavigationInfo, .1), hcDark: null, hcLight: null }, nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'editorMarkerNavigationInfoHeaderBackground', 'Editor marker navigation widget info heading background.'));
+const editorMarkerNavigationBackground = registerColor('editorMarkerNavigation.background', editorBackground, nls.localize('vs/editor/contrib/gotoError/browser/gotoErrorWidget', 'editorMarkerNavigationBackground', 'Editor marker navigation widget background.'));
diff --git a/esm/vs/editor/contrib/gotoSymbol/browser/goToCommands.js b/esm/vs/editor/contrib/gotoSymbol/browser/goToCommands.js
index dfcade3d06a8e9549a7fa283d9fe4d7894fd9e56..d9239f9239b3d4437d84e62f694732407df8e44c 100644
--- a/esm/vs/editor/contrib/gotoSymbol/browser/goToCommands.js
+++ b/esm/vs/editor/contrib/gotoSymbol/browser/goToCommands.js
@@ -34,7 +34,7 @@ import { Iterable } from '../../../../base/common/iterator.js';
 import { IsWebContext } from '../../../../platform/contextkey/common/contextkeys.js';
 MenuRegistry.appendMenuItem(MenuId.EditorContext, {
     submenu: MenuId.EditorContextPeek,
-    title: nls.localize('peek.submenu', "Peek"),
+    title: nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'peek.submenu', "Peek"),
     group: 'navigation',
     order: 100
 });
@@ -203,12 +203,12 @@ export class SymbolNavigationAction extends EditorAction2 {
 //#region --- DEFINITION
 export class DefinitionAction extends SymbolNavigationAction {
     async _getLocationModel(languageFeaturesService, model, position, token) {
-        return new ReferencesModel(await getDefinitionsAtPosition(languageFeaturesService.definitionProvider, model, position, false, token), nls.localize('def.title', 'Definitions'));
+        return new ReferencesModel(await getDefinitionsAtPosition(languageFeaturesService.definitionProvider, model, position, false, token), nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'def.title', 'Definitions'));
     }
     _getNoResultFoundMessage(info) {
         return info && info.word
-            ? nls.localize('noResultWord', "No definition found for '{0}'", info.word)
-            : nls.localize('generic.noResults', "No definition found");
+            ? nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'noResultWord', "No definition found for '{0}'", info.word)
+            : nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'generic.noResults', "No definition found");
     }
     _getAlternativeCommand(editor) {
         return editor.getOption(58 /* EditorOption.gotoLocation */).alternativeDefinitionCommand;
@@ -227,8 +227,8 @@ registerAction2(class GoToDefinitionAction extends DefinitionAction {
         }, {
             id: GoToDefinitionAction.id,
             title: {
-                ...nls.localize2('actions.goToDecl.label', "Go to Definition"),
-                mnemonicTitle: nls.localize({ key: 'miGotoDefinition', comment: ['&& denotes a mnemonic'] }, "Go to &&Definition"),
+                ...nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'actions.goToDecl.label', "Go to Definition"),
+                mnemonicTitle: nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', { key: 'miGotoDefinition', comment: ['&& denotes a mnemonic'] }, "Go to &&Definition"),
             },
             precondition: EditorContextKeys.hasDefinitionProvider,
             keybinding: [{
@@ -263,7 +263,7 @@ registerAction2(class OpenDefinitionToSideAction extends DefinitionAction {
             muteMessage: false
         }, {
             id: OpenDefinitionToSideAction.id,
-            title: nls.localize2('actions.goToDeclToSide.label', "Open Definition to the Side"),
+            title: nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'actions.goToDeclToSide.label', "Open Definition to the Side"),
             precondition: ContextKeyExpr.and(EditorContextKeys.hasDefinitionProvider, EditorContextKeys.isInEmbeddedEditor.toNegated()),
             keybinding: [{
                     when: EditorContextKeys.editorTextFocus,
@@ -287,7 +287,7 @@ registerAction2(class PeekDefinitionAction extends DefinitionAction {
             muteMessage: false
         }, {
             id: PeekDefinitionAction.id,
-            title: nls.localize2('actions.previewDecl.label', "Peek Definition"),
+            title: nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'actions.previewDecl.label', "Peek Definition"),
             precondition: ContextKeyExpr.and(EditorContextKeys.hasDefinitionProvider, PeekContext.notInPeekEditor, EditorContextKeys.isInEmbeddedEditor.toNegated()),
             keybinding: {
                 when: EditorContextKeys.editorTextFocus,
@@ -308,12 +308,12 @@ registerAction2(class PeekDefinitionAction extends DefinitionAction {
 //#region --- DECLARATION
 class DeclarationAction extends SymbolNavigationAction {
     async _getLocationModel(languageFeaturesService, model, position, token) {
-        return new ReferencesModel(await getDeclarationsAtPosition(languageFeaturesService.declarationProvider, model, position, false, token), nls.localize('decl.title', 'Declarations'));
+        return new ReferencesModel(await getDeclarationsAtPosition(languageFeaturesService.declarationProvider, model, position, false, token), nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'decl.title', 'Declarations'));
     }
     _getNoResultFoundMessage(info) {
         return info && info.word
-            ? nls.localize('decl.noResultWord', "No declaration found for '{0}'", info.word)
-            : nls.localize('decl.generic.noResults', "No declaration found");
+            ? nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'decl.noResultWord', "No declaration found for '{0}'", info.word)
+            : nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'decl.generic.noResults', "No declaration found");
     }
     _getAlternativeCommand(editor) {
         return editor.getOption(58 /* EditorOption.gotoLocation */).alternativeDeclarationCommand;
@@ -332,8 +332,8 @@ registerAction2(class GoToDeclarationAction extends DeclarationAction {
         }, {
             id: GoToDeclarationAction.id,
             title: {
-                ...nls.localize2('actions.goToDeclaration.label', "Go to Declaration"),
-                mnemonicTitle: nls.localize({ key: 'miGotoDeclaration', comment: ['&& denotes a mnemonic'] }, "Go to &&Declaration"),
+                ...nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'actions.goToDeclaration.label', "Go to Declaration"),
+                mnemonicTitle: nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', { key: 'miGotoDeclaration', comment: ['&& denotes a mnemonic'] }, "Go to &&Declaration"),
             },
             precondition: ContextKeyExpr.and(EditorContextKeys.hasDeclarationProvider, EditorContextKeys.isInEmbeddedEditor.toNegated()),
             menu: [{
@@ -350,8 +350,8 @@ registerAction2(class GoToDeclarationAction extends DeclarationAction {
     }
     _getNoResultFoundMessage(info) {
         return info && info.word
-            ? nls.localize('decl.noResultWord', "No declaration found for '{0}'", info.word)
-            : nls.localize('decl.generic.noResults', "No declaration found");
+            ? nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'decl.noResultWord', "No declaration found for '{0}'", info.word)
+            : nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'decl.generic.noResults', "No declaration found");
     }
 });
 registerAction2(class PeekDeclarationAction extends DeclarationAction {
@@ -362,7 +362,7 @@ registerAction2(class PeekDeclarationAction extends DeclarationAction {
             muteMessage: false
         }, {
             id: 'editor.action.peekDeclaration',
-            title: nls.localize2('actions.peekDecl.label', "Peek Declaration"),
+            title: nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'actions.peekDecl.label', "Peek Declaration"),
             precondition: ContextKeyExpr.and(EditorContextKeys.hasDeclarationProvider, PeekContext.notInPeekEditor, EditorContextKeys.isInEmbeddedEditor.toNegated()),
             menu: {
                 id: MenuId.EditorContextPeek,
@@ -376,12 +376,12 @@ registerAction2(class PeekDeclarationAction extends DeclarationAction {
 //#region --- TYPE DEFINITION
 class TypeDefinitionAction extends SymbolNavigationAction {
     async _getLocationModel(languageFeaturesService, model, position, token) {
-        return new ReferencesModel(await getTypeDefinitionsAtPosition(languageFeaturesService.typeDefinitionProvider, model, position, false, token), nls.localize('typedef.title', 'Type Definitions'));
+        return new ReferencesModel(await getTypeDefinitionsAtPosition(languageFeaturesService.typeDefinitionProvider, model, position, false, token), nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'typedef.title', 'Type Definitions'));
     }
     _getNoResultFoundMessage(info) {
         return info && info.word
-            ? nls.localize('goToTypeDefinition.noResultWord', "No type definition found for '{0}'", info.word)
-            : nls.localize('goToTypeDefinition.generic.noResults', "No type definition found");
+            ? nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'goToTypeDefinition.noResultWord', "No type definition found for '{0}'", info.word)
+            : nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'goToTypeDefinition.generic.noResults', "No type definition found");
     }
     _getAlternativeCommand(editor) {
         return editor.getOption(58 /* EditorOption.gotoLocation */).alternativeTypeDefinitionCommand;
@@ -400,8 +400,8 @@ registerAction2(class GoToTypeDefinitionAction extends TypeDefinitionAction {
         }, {
             id: GoToTypeDefinitionAction.ID,
             title: {
-                ...nls.localize2('actions.goToTypeDefinition.label', "Go to Type Definition"),
-                mnemonicTitle: nls.localize({ key: 'miGotoTypeDefinition', comment: ['&& denotes a mnemonic'] }, "Go to &&Type Definition"),
+                ...nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'actions.goToTypeDefinition.label', "Go to Type Definition"),
+                mnemonicTitle: nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', { key: 'miGotoTypeDefinition', comment: ['&& denotes a mnemonic'] }, "Go to &&Type Definition"),
             },
             precondition: EditorContextKeys.hasTypeDefinitionProvider,
             keybinding: {
@@ -431,7 +431,7 @@ registerAction2(class PeekTypeDefinitionAction extends TypeDefinitionAction {
             muteMessage: false
         }, {
             id: PeekTypeDefinitionAction.ID,
-            title: nls.localize2('actions.peekTypeDefinition.label', "Peek Type Definition"),
+            title: nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'actions.peekTypeDefinition.label', "Peek Type Definition"),
             precondition: ContextKeyExpr.and(EditorContextKeys.hasTypeDefinitionProvider, PeekContext.notInPeekEditor, EditorContextKeys.isInEmbeddedEditor.toNegated()),
             menu: {
                 id: MenuId.EditorContextPeek,
@@ -445,12 +445,12 @@ registerAction2(class PeekTypeDefinitionAction extends TypeDefinitionAction {
 //#region --- IMPLEMENTATION
 class ImplementationAction extends SymbolNavigationAction {
     async _getLocationModel(languageFeaturesService, model, position, token) {
-        return new ReferencesModel(await getImplementationsAtPosition(languageFeaturesService.implementationProvider, model, position, false, token), nls.localize('impl.title', 'Implementations'));
+        return new ReferencesModel(await getImplementationsAtPosition(languageFeaturesService.implementationProvider, model, position, false, token), nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'impl.title', 'Implementations'));
     }
     _getNoResultFoundMessage(info) {
         return info && info.word
-            ? nls.localize('goToImplementation.noResultWord', "No implementation found for '{0}'", info.word)
-            : nls.localize('goToImplementation.generic.noResults', "No implementation found");
+            ? nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'goToImplementation.noResultWord', "No implementation found for '{0}'", info.word)
+            : nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'goToImplementation.generic.noResults', "No implementation found");
     }
     _getAlternativeCommand(editor) {
         return editor.getOption(58 /* EditorOption.gotoLocation */).alternativeImplementationCommand;
@@ -469,8 +469,8 @@ registerAction2(class GoToImplementationAction extends ImplementationAction {
         }, {
             id: GoToImplementationAction.ID,
             title: {
-                ...nls.localize2('actions.goToImplementation.label', "Go to Implementations"),
-                mnemonicTitle: nls.localize({ key: 'miGotoImplementation', comment: ['&& denotes a mnemonic'] }, "Go to &&Implementations"),
+                ...nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'actions.goToImplementation.label', "Go to Implementations"),
+                mnemonicTitle: nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', { key: 'miGotoImplementation', comment: ['&& denotes a mnemonic'] }, "Go to &&Implementations"),
             },
             precondition: EditorContextKeys.hasImplementationProvider,
             keybinding: {
@@ -500,7 +500,7 @@ registerAction2(class PeekImplementationAction extends ImplementationAction {
             muteMessage: false
         }, {
             id: PeekImplementationAction.ID,
-            title: nls.localize2('actions.peekImplementation.label', "Peek Implementations"),
+            title: nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'actions.peekImplementation.label', "Peek Implementations"),
             precondition: ContextKeyExpr.and(EditorContextKeys.hasImplementationProvider, PeekContext.notInPeekEditor, EditorContextKeys.isInEmbeddedEditor.toNegated()),
             keybinding: {
                 when: EditorContextKeys.editorTextFocus,
@@ -520,8 +520,8 @@ registerAction2(class PeekImplementationAction extends ImplementationAction {
 class ReferencesAction extends SymbolNavigationAction {
     _getNoResultFoundMessage(info) {
         return info
-            ? nls.localize('references.no', "No references found for '{0}'", info.word)
-            : nls.localize('references.noGeneric', "No references found");
+            ? nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'references.no', "No references found for '{0}'", info.word)
+            : nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'references.noGeneric', "No references found");
     }
     _getAlternativeCommand(editor) {
         return editor.getOption(58 /* EditorOption.gotoLocation */).alternativeReferenceCommand;
@@ -539,8 +539,8 @@ registerAction2(class GoToReferencesAction extends ReferencesAction {
         }, {
             id: 'editor.action.goToReferences',
             title: {
-                ...nls.localize2('goToReferences.label', "Go to References"),
-                mnemonicTitle: nls.localize({ key: 'miGotoReference', comment: ['&& denotes a mnemonic'] }, "Go to &&References"),
+                ...nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'goToReferences.label', "Go to References"),
+                mnemonicTitle: nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', { key: 'miGotoReference', comment: ['&& denotes a mnemonic'] }, "Go to &&References"),
             },
             precondition: ContextKeyExpr.and(EditorContextKeys.hasReferenceProvider, PeekContext.notInPeekEditor, EditorContextKeys.isInEmbeddedEditor.toNegated()),
             keybinding: {
@@ -561,7 +561,7 @@ registerAction2(class GoToReferencesAction extends ReferencesAction {
         });
     }
     async _getLocationModel(languageFeaturesService, model, position, token) {
-        return new ReferencesModel(await getReferencesAtPosition(languageFeaturesService.referenceProvider, model, position, true, false, token), nls.localize('ref.title', 'References'));
+        return new ReferencesModel(await getReferencesAtPosition(languageFeaturesService.referenceProvider, model, position, true, false, token), nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'ref.title', 'References'));
     }
 });
 registerAction2(class PeekReferencesAction extends ReferencesAction {
@@ -572,7 +572,7 @@ registerAction2(class PeekReferencesAction extends ReferencesAction {
             muteMessage: false
         }, {
             id: 'editor.action.referenceSearch.trigger',
-            title: nls.localize2('references.action.label', "Peek References"),
+            title: nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'references.action.label', "Peek References"),
             precondition: ContextKeyExpr.and(EditorContextKeys.hasReferenceProvider, PeekContext.notInPeekEditor, EditorContextKeys.isInEmbeddedEditor.toNegated()),
             menu: {
                 id: MenuId.EditorContextPeek,
@@ -582,7 +582,7 @@ registerAction2(class PeekReferencesAction extends ReferencesAction {
         });
     }
     async _getLocationModel(languageFeaturesService, model, position, token) {
-        return new ReferencesModel(await getReferencesAtPosition(languageFeaturesService.referenceProvider, model, position, false, false, token), nls.localize('ref.title', 'References'));
+        return new ReferencesModel(await getReferencesAtPosition(languageFeaturesService.referenceProvider, model, position, false, false, token), nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'ref.title', 'References'));
     }
 });
 //#endregion
@@ -591,17 +591,17 @@ class GenericGoToLocationAction extends SymbolNavigationAction {
     constructor(config, _references, _gotoMultipleBehaviour) {
         super(config, {
             id: 'editor.action.goToLocation',
-            title: nls.localize2('label.generic', "Go to Any Symbol"),
+            title: nls.localize2('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'label.generic', "Go to Any Symbol"),
             precondition: ContextKeyExpr.and(PeekContext.notInPeekEditor, EditorContextKeys.isInEmbeddedEditor.toNegated()),
         });
         this._references = _references;
         this._gotoMultipleBehaviour = _gotoMultipleBehaviour;
     }
     async _getLocationModel(languageFeaturesService, _model, _position, _token) {
-        return new ReferencesModel(this._references, nls.localize('generic.title', 'Locations'));
+        return new ReferencesModel(this._references, nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'generic.title', 'Locations'));
     }
     _getNoResultFoundMessage(info) {
-        return info && nls.localize('generic.noResult', "No results for '{0}'", info.word) || '';
+        return info && nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'generic.noResult', "No results for '{0}'", info.word) || '';
     }
     _getGoToPreference(editor) {
         return this._gotoMultipleBehaviour ?? editor.getOption(58 /* EditorOption.gotoLocation */).multipleReferences;
@@ -678,7 +678,7 @@ CommandsRegistry.registerCommand({
             if (!controller) {
                 return undefined;
             }
-            const references = createCancelablePromise(token => getReferencesAtPosition(languageFeaturesService.referenceProvider, control.getModel(), corePosition.Position.lift(position), false, false, token).then(references => new ReferencesModel(references, nls.localize('ref.title', 'References'))));
+            const references = createCancelablePromise(token => getReferencesAtPosition(languageFeaturesService.referenceProvider, control.getModel(), corePosition.Position.lift(position), false, false, token).then(references => new ReferencesModel(references, nls.localize('vs/editor/contrib/gotoSymbol/browser/goToCommands', 'ref.title', 'References'))));
             const range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);
             return Promise.resolve(controller.toggleWidget(range, references, false));
         });
diff --git a/esm/vs/editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition.js b/esm/vs/editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition.js
index 1795b4a0b438d14bd6ae3f0f6274ad26fd0a9ad2..bc13aa15a57a22179431e0fb97791e22b06db1d6 100644
--- a/esm/vs/editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition.js
+++ b/esm/vs/editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition.js
@@ -150,7 +150,7 @@ let GotoDefinitionAtPositionEditorContribution = class GotoDefinitionAtPositionE
                     combinedRange = Range.plusRange(combinedRange, originSelectionRange);
                 }
             }
-            this.addDecoration(combinedRange, new MarkdownString().appendText(nls.localize('multipleResults', "Click to show {0} definitions.", results.length)));
+            this.addDecoration(combinedRange, new MarkdownString().appendText(nls.localize('vs/editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition', 'multipleResults', "Click to show {0} definitions.", results.length)));
         }
         else {
             // Single result
diff --git a/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesController.js b/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesController.js
index e82c367a7eb8135003360b2b5e646764ff9dc342..784ba84e381b2765589af399bd286b4b020f3e87 100644
--- a/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesController.js
+++ b/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesController.js
@@ -33,7 +33,7 @@ import { OneReference } from '../referencesModel.js';
 import { LayoutData, ReferenceWidget } from './referencesWidget.js';
 import { EditorContextKeys } from '../../../../common/editorContextKeys.js';
 import { InputFocusedContext } from '../../../../../platform/contextkey/common/contextkeys.js';
-export const ctxReferenceSearchVisible = new RawContextKey('referenceSearchVisible', false, nls.localize('referenceSearchVisible', "Whether reference peek is visible, like 'Peek References' or 'Peek Definition'"));
+export const ctxReferenceSearchVisible = new RawContextKey('referenceSearchVisible', false, nls.localize('vs/editor/contrib/gotoSymbol/browser/peek/referencesController', 'referenceSearchVisible', "Whether reference peek is visible, like 'Peek References' or 'Peek Definition'"));
 let ReferencesController = class ReferencesController {
     static { ReferencesController_1 = this; }
     static { this.ID = 'editor.contrib.referencesController'; }
@@ -83,7 +83,7 @@ let ReferencesController = class ReferencesController {
         const storageKey = 'peekViewLayout';
         const data = LayoutData.fromJSON(this._storageService.get(storageKey, 0 /* StorageScope.PROFILE */, '{}'));
         this._widget = this._instantiationService.createInstance(ReferenceWidget, this._editor, this._defaultTreeKeyboardSupport, data);
-        this._widget.setTitle(nls.localize('labelLoading', "Loading..."));
+        this._widget.setTitle(nls.localize('vs/editor/contrib/gotoSymbol/browser/peek/referencesController', 'labelLoading', "Loading..."));
         this._widget.show(range);
         this._disposables.add(this._widget.onDidClose(() => {
             modelPromise.cancel();
@@ -139,7 +139,7 @@ let ReferencesController = class ReferencesController {
                 if (this._widget && this._model && this._editor.hasModel()) { // might have been closed
                     // set title
                     if (!this._model.isEmpty) {
-                        this._widget.setMetaTitle(nls.localize('metaTitle.N', "{0} ({1})", this._model.title, this._model.references.length));
+                        this._widget.setMetaTitle(nls.localize('vs/editor/contrib/gotoSymbol/browser/peek/referencesController', 'metaTitle.N', "{0} ({1})", this._model.title, this._model.references.length));
                     }
                     else {
                         this._widget.setMetaTitle('');
diff --git a/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.js b/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.js
index 5c3c8b7a94ce37bd2d4d741e85bfa21d4787fde1..489958e62b8edb7be31b2e279617b3737aa29c5b 100644
--- a/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.js
+++ b/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.js
@@ -115,10 +115,10 @@ let FileReferencesTemplate = class FileReferencesTemplate extends Disposable {
         const len = element.children.length;
         this.badge.setCount(len);
         if (len > 1) {
-            this.badge.setTitleFormat(localize('referencesCount', "{0} references", len));
+            this.badge.setTitleFormat(localize('vs/editor/contrib/gotoSymbol/browser/peek/referencesTree', 'referencesCount', "{0} references", len));
         }
         else {
-            this.badge.setTitleFormat(localize('referenceCount', "{0} reference", len));
+            this.badge.setTitleFormat(localize('vs/editor/contrib/gotoSymbol/browser/peek/referencesTree', 'referenceCount', "{0} reference", len));
         }
     }
 };
@@ -192,7 +192,7 @@ export class OneReferenceRenderer {
 //#endregion
 export class AccessibilityProvider {
     getWidgetAriaLabel() {
-        return localize('treeAriaLabel', "References");
+        return localize('vs/editor/contrib/gotoSymbol/browser/peek/referencesTree', 'treeAriaLabel', "References");
     }
     getAriaLabel(element) {
         return element.ariaMessage;
diff --git a/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget.js b/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget.js
index be8ff0dd7f4cc05ca1f74b3b561f80d6dd530f33..d770952c9464c5bd64eda3f3cd43f51381038075 100644
--- a/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget.js
+++ b/esm/vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget.js
@@ -258,7 +258,7 @@ let ReferenceWidget = class ReferenceWidget extends peekView.PeekViewWidget {
         };
         this._preview = this._instantiationService.createInstance(EmbeddedCodeEditorWidget, this._previewContainer, options, {}, this.editor);
         dom.hide(this._previewContainer);
-        this._previewNotAvailableMessage = this._instantiationService.createInstance(TextModel, nls.localize('missingPreviewMessage', "no preview available"), PLAINTEXT_LANGUAGE_ID, TextModel.DEFAULT_CREATION_OPTIONS, null);
+        this._previewNotAvailableMessage = this._instantiationService.createInstance(TextModel, nls.localize('vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget', 'missingPreviewMessage', "no preview available"), PLAINTEXT_LANGUAGE_ID, TextModel.DEFAULT_CREATION_OPTIONS, null);
         // tree
         this._treeContainer = dom.append(containerElement, dom.$('div.ref-tree.inline'));
         const treeOptions = {
@@ -371,7 +371,7 @@ let ReferenceWidget = class ReferenceWidget extends peekView.PeekViewWidget {
         }
         if (this._model.isEmpty) {
             this.setTitle('');
-            this._messageContainer.innerText = nls.localize('noResults', "No results");
+            this._messageContainer.innerText = nls.localize('vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget', 'noResults', "No results");
             dom.show(this._messageContainer);
             return Promise.resolve(undefined);
         }
@@ -432,7 +432,7 @@ let ReferenceWidget = class ReferenceWidget extends peekView.PeekViewWidget {
             this.setTitle(basenameOrAuthority(reference.uri), this._uriLabel.getUriLabel(dirname(reference.uri)));
         }
         else {
-            this.setTitle(nls.localize('peekView.alternateTitle', "References"));
+            this.setTitle(nls.localize('vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget', 'peekView.alternateTitle', "References"));
         }
         const promise = this._textModelResolverService.createModelReference(reference.uri);
         if (this._tree.getInput() === reference.parent) {
diff --git a/esm/vs/editor/contrib/gotoSymbol/browser/referencesModel.js b/esm/vs/editor/contrib/gotoSymbol/browser/referencesModel.js
index 18e9c05f63d018522af1a6cc4f94d2cb46741a63..c5ae18c8b8cc4b6c30c21ab508d8d3e071d23b32 100644
--- a/esm/vs/editor/contrib/gotoSymbol/browser/referencesModel.js
+++ b/esm/vs/editor/contrib/gotoSymbol/browser/referencesModel.js
@@ -32,10 +32,10 @@ export class OneReference {
     get ariaMessage() {
         const preview = this.parent.getPreview(this)?.preview(this.range);
         if (!preview) {
-            return localize('aria.oneReference', "in {0} on line {1} at column {2}", basename(this.uri), this.range.startLineNumber, this.range.startColumn);
+            return localize('vs/editor/contrib/gotoSymbol/browser/referencesModel', 'aria.oneReference', "in {0} on line {1} at column {2}", basename(this.uri), this.range.startLineNumber, this.range.startColumn);
         }
         else {
-            return localize({ key: 'aria.oneReference.preview', comment: ['Placeholders are: 0: filename, 1:line number, 2: column number, 3: preview snippet of source code'] }, "{0} in {1} on line {2} at column {3}", preview.value, basename(this.uri), this.range.startLineNumber, this.range.startColumn);
+            return localize('vs/editor/contrib/gotoSymbol/browser/referencesModel', { key: 'aria.oneReference.preview', comment: ['Placeholders are: 0: filename, 1:line number, 2: column number, 3: preview snippet of source code'] }, "{0} in {1} on line {2} at column {3}", preview.value, basename(this.uri), this.range.startLineNumber, this.range.startColumn);
         }
     }
 }
@@ -81,10 +81,10 @@ export class FileReferences {
     get ariaMessage() {
         const len = this.children.length;
         if (len === 1) {
-            return localize('aria.fileReferences.1', "1 symbol in {0}, full path {1}", basename(this.uri), this.uri.fsPath);
+            return localize('vs/editor/contrib/gotoSymbol/browser/referencesModel', 'aria.fileReferences.1', "1 symbol in {0}, full path {1}", basename(this.uri), this.uri.fsPath);
         }
         else {
-            return localize('aria.fileReferences.N', "{0} symbols in {1}, full path {2}", len, basename(this.uri), this.uri.fsPath);
+            return localize('vs/editor/contrib/gotoSymbol/browser/referencesModel', 'aria.fileReferences.N', "{0} symbols in {1}, full path {2}", len, basename(this.uri), this.uri.fsPath);
         }
     }
     async resolve(textModelResolverService) {
@@ -148,16 +148,16 @@ export class ReferencesModel {
     }
     get ariaMessage() {
         if (this.isEmpty) {
-            return localize('aria.result.0', "No results found");
+            return localize('vs/editor/contrib/gotoSymbol/browser/referencesModel', 'aria.result.0', "No results found");
         }
         else if (this.references.length === 1) {
-            return localize('aria.result.1', "Found 1 symbol in {0}", this.references[0].uri.fsPath);
+            return localize('vs/editor/contrib/gotoSymbol/browser/referencesModel', 'aria.result.1', "Found 1 symbol in {0}", this.references[0].uri.fsPath);
         }
         else if (this.groups.length === 1) {
-            return localize('aria.result.n1', "Found {0} symbols in {1}", this.references.length, this.groups[0].uri.fsPath);
+            return localize('vs/editor/contrib/gotoSymbol/browser/referencesModel', 'aria.result.n1', "Found {0} symbols in {1}", this.references.length, this.groups[0].uri.fsPath);
         }
         else {
-            return localize('aria.result.nm', "Found {0} symbols in {1} files", this.references.length, this.groups.length);
+            return localize('vs/editor/contrib/gotoSymbol/browser/referencesModel', 'aria.result.nm', "Found {0} symbols in {1} files", this.references.length, this.groups.length);
         }
     }
     nextOrPreviousReference(reference, next) {
diff --git a/esm/vs/editor/contrib/gotoSymbol/browser/symbolNavigation.js b/esm/vs/editor/contrib/gotoSymbol/browser/symbolNavigation.js
index af51048a1589709e19e337cbe547a91a37711a0f..1013ce41fbbc400013653302e20d952480d04622 100644
--- a/esm/vs/editor/contrib/gotoSymbol/browser/symbolNavigation.js
+++ b/esm/vs/editor/contrib/gotoSymbol/browser/symbolNavigation.js
@@ -24,7 +24,7 @@ import { createDecorator } from '../../../../platform/instantiation/common/insta
 import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';
 import { KeybindingsRegistry } from '../../../../platform/keybinding/common/keybindingsRegistry.js';
 import { INotificationService } from '../../../../platform/notification/common/notification.js';
-export const ctxHasSymbols = new RawContextKey('hasSymbols', false, localize('hasSymbols', "Whether there are symbol locations that can be navigated via keyboard-only."));
+export const ctxHasSymbols = new RawContextKey('hasSymbols', false, localize('vs/editor/contrib/gotoSymbol/browser/symbolNavigation', 'hasSymbols', "Whether there are symbol locations that can be navigated via keyboard-only."));
 export const ISymbolNavigationService = createDecorator('ISymbolNavigationService');
 let SymbolNavigationService = class SymbolNavigationService {
     constructor(contextKeyService, _editorService, _notificationService, _keybindingService) {
@@ -110,8 +110,8 @@ let SymbolNavigationService = class SymbolNavigationService {
         this._currentMessage?.dispose();
         const kb = this._keybindingService.lookupKeybinding('editor.gotoNextSymbolFromResult');
         const message = kb
-            ? localize('location.kb', "Symbol {0} of {1}, {2} for next", this._currentIdx + 1, this._currentModel.references.length, kb.getLabel())
-            : localize('location', "Symbol {0} of {1}", this._currentIdx + 1, this._currentModel.references.length);
+            ? localize('vs/editor/contrib/gotoSymbol/browser/symbolNavigation', 'location.kb', "Symbol {0} of {1}, {2} for next", this._currentIdx + 1, this._currentModel.references.length, kb.getLabel())
+            : localize('vs/editor/contrib/gotoSymbol/browser/symbolNavigation', 'location', "Symbol {0} of {1}", this._currentIdx + 1, this._currentModel.references.length);
         this._currentMessage = this._notificationService.status(message);
     }
 };
diff --git a/esm/vs/editor/contrib/hover/browser/hoverActionIds.js b/esm/vs/editor/contrib/hover/browser/hoverActionIds.js
index 3bc04663928b28d3fa95fbd4f3b2d584f48ef110..a3a3dad501427656d94c5bf08cc87f24cfe9a43d 100644
--- a/esm/vs/editor/contrib/hover/browser/hoverActionIds.js
+++ b/esm/vs/editor/contrib/hover/browser/hoverActionIds.js
@@ -14,6 +14,6 @@ export const PAGE_DOWN_HOVER_ACTION_ID = 'editor.action.pageDownHover';
 export const GO_TO_TOP_HOVER_ACTION_ID = 'editor.action.goToTopHover';
 export const GO_TO_BOTTOM_HOVER_ACTION_ID = 'editor.action.goToBottomHover';
 export const INCREASE_HOVER_VERBOSITY_ACTION_ID = 'editor.action.increaseHoverVerbosityLevel';
-export const INCREASE_HOVER_VERBOSITY_ACTION_LABEL = nls.localize({ key: 'increaseHoverVerbosityLevel', comment: ['Label for action that will increase the hover verbosity level.'] }, "Increase Hover Verbosity Level");
+export const INCREASE_HOVER_VERBOSITY_ACTION_LABEL = nls.localize('vs/editor/contrib/hover/browser/hoverActionIds', { key: 'increaseHoverVerbosityLevel', comment: ['Label for action that will increase the hover verbosity level.'] }, "Increase Hover Verbosity Level");
 export const DECREASE_HOVER_VERBOSITY_ACTION_ID = 'editor.action.decreaseHoverVerbosityLevel';
-export const DECREASE_HOVER_VERBOSITY_ACTION_LABEL = nls.localize({ key: 'decreaseHoverVerbosityLevel', comment: ['Label for action that will decrease the hover verbosity level.'] }, "Decrease Hover Verbosity Level");
+export const DECREASE_HOVER_VERBOSITY_ACTION_LABEL = nls.localize('vs/editor/contrib/hover/browser/hoverActionIds', { key: 'decreaseHoverVerbosityLevel', comment: ['Label for action that will decrease the hover verbosity level.'] }, "Decrease Hover Verbosity Level");
diff --git a/esm/vs/editor/contrib/hover/browser/hoverActions.js b/esm/vs/editor/contrib/hover/browser/hoverActions.js
index 45a117446f60531cf48d2b6ff26103dfa1963e01..411cbb41e5528d1386b8cf370c0401ebaaaff9d8 100644
--- a/esm/vs/editor/contrib/hover/browser/hoverActions.js
+++ b/esm/vs/editor/contrib/hover/browser/hoverActions.js
@@ -22,7 +22,7 @@ export class ShowOrFocusHoverAction extends EditorAction {
     constructor() {
         super({
             id: SHOW_OR_FOCUS_HOVER_ACTION_ID,
-            label: nls.localize({
+            label: nls.localize('vs/editor/contrib/hover/browser/hoverActions', {
                 key: 'showOrFocusHover',
                 comment: [
                     'Label for action that will trigger the showing/focusing of a hover in the editor.',
@@ -31,7 +31,7 @@ export class ShowOrFocusHoverAction extends EditorAction {
                 ]
             }, "Show or Focus Hover"),
             metadata: {
-                description: nls.localize2('showOrFocusHoverDescription', 'Show or focus the editor hover which shows documentation, references, and other content for a symbol at the current cursor position.'),
+                description: nls.localize2('vs/editor/contrib/hover/browser/hoverActions', 'showOrFocusHoverDescription', 'Show or focus the editor hover which shows documentation, references, and other content for a symbol at the current cursor position.'),
                 args: [{
                         name: 'args',
                         schema: {
@@ -41,9 +41,9 @@ export class ShowOrFocusHoverAction extends EditorAction {
                                     description: 'Controls if and when the hover should take focus upon being triggered by this action.',
                                     enum: [HoverFocusBehavior.NoAutoFocus, HoverFocusBehavior.FocusIfVisible, HoverFocusBehavior.AutoFocusImmediately],
                                     enumDescriptions: [
-                                        nls.localize('showOrFocusHover.focus.noAutoFocus', 'The hover will not automatically take focus.'),
-                                        nls.localize('showOrFocusHover.focus.focusIfVisible', 'The hover will take focus only if it is already visible.'),
-                                        nls.localize('showOrFocusHover.focus.autoFocusImmediately', 'The hover will automatically take focus when it appears.'),
+                                        nls.localize('vs/editor/contrib/hover/browser/hoverActions', 'showOrFocusHover.focus.noAutoFocus', 'The hover will not automatically take focus.'),
+                                        nls.localize('vs/editor/contrib/hover/browser/hoverActions', 'showOrFocusHover.focus.focusIfVisible', 'The hover will take focus only if it is already visible.'),
+                                        nls.localize('vs/editor/contrib/hover/browser/hoverActions', 'showOrFocusHover.focus.autoFocusImmediately', 'The hover will automatically take focus when it appears.'),
                                     ],
                                     default: HoverFocusBehavior.FocusIfVisible,
                                 }
@@ -99,7 +99,7 @@ export class ShowDefinitionPreviewHoverAction extends EditorAction {
     constructor() {
         super({
             id: SHOW_DEFINITION_PREVIEW_HOVER_ACTION_ID,
-            label: nls.localize({
+            label: nls.localize('vs/editor/contrib/hover/browser/hoverActions', {
                 key: 'showDefinitionPreviewHover',
                 comment: [
                     'Label for action that will trigger the showing of definition preview hover in the editor.',
@@ -109,7 +109,7 @@ export class ShowDefinitionPreviewHoverAction extends EditorAction {
             alias: 'Show Definition Preview Hover',
             precondition: undefined,
             metadata: {
-                description: nls.localize2('showDefinitionPreviewHoverDescription', 'Show the definition preview hover in the editor.'),
+                description: nls.localize2('vs/editor/contrib/hover/browser/hoverActions', 'showDefinitionPreviewHoverDescription', 'Show the definition preview hover in the editor.'),
             },
         });
     }
@@ -137,7 +137,7 @@ export class ScrollUpHoverAction extends EditorAction {
     constructor() {
         super({
             id: SCROLL_UP_HOVER_ACTION_ID,
-            label: nls.localize({
+            label: nls.localize('vs/editor/contrib/hover/browser/hoverActions', {
                 key: 'scrollUpHover',
                 comment: [
                     'Action that allows to scroll up in the hover widget with the up arrow when the hover widget is focused.'
@@ -151,7 +151,7 @@ export class ScrollUpHoverAction extends EditorAction {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: nls.localize2('scrollUpHoverDescription', 'Scroll up the editor hover.')
+                description: nls.localize2('vs/editor/contrib/hover/browser/hoverActions', 'scrollUpHoverDescription', 'Scroll up the editor hover.')
             },
         });
     }
@@ -167,7 +167,7 @@ export class ScrollDownHoverAction extends EditorAction {
     constructor() {
         super({
             id: SCROLL_DOWN_HOVER_ACTION_ID,
-            label: nls.localize({
+            label: nls.localize('vs/editor/contrib/hover/browser/hoverActions', {
                 key: 'scrollDownHover',
                 comment: [
                     'Action that allows to scroll down in the hover widget with the up arrow when the hover widget is focused.'
@@ -181,7 +181,7 @@ export class ScrollDownHoverAction extends EditorAction {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: nls.localize2('scrollDownHoverDescription', 'Scroll down the editor hover.'),
+                description: nls.localize2('vs/editor/contrib/hover/browser/hoverActions', 'scrollDownHoverDescription', 'Scroll down the editor hover.'),
             },
         });
     }
@@ -197,7 +197,7 @@ export class ScrollLeftHoverAction extends EditorAction {
     constructor() {
         super({
             id: SCROLL_LEFT_HOVER_ACTION_ID,
-            label: nls.localize({
+            label: nls.localize('vs/editor/contrib/hover/browser/hoverActions', {
                 key: 'scrollLeftHover',
                 comment: [
                     'Action that allows to scroll left in the hover widget with the left arrow when the hover widget is focused.'
@@ -211,7 +211,7 @@ export class ScrollLeftHoverAction extends EditorAction {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: nls.localize2('scrollLeftHoverDescription', 'Scroll left the editor hover.'),
+                description: nls.localize2('vs/editor/contrib/hover/browser/hoverActions', 'scrollLeftHoverDescription', 'Scroll left the editor hover.'),
             },
         });
     }
@@ -227,7 +227,7 @@ export class ScrollRightHoverAction extends EditorAction {
     constructor() {
         super({
             id: SCROLL_RIGHT_HOVER_ACTION_ID,
-            label: nls.localize({
+            label: nls.localize('vs/editor/contrib/hover/browser/hoverActions', {
                 key: 'scrollRightHover',
                 comment: [
                     'Action that allows to scroll right in the hover widget with the right arrow when the hover widget is focused.'
@@ -241,7 +241,7 @@ export class ScrollRightHoverAction extends EditorAction {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: nls.localize2('scrollRightHoverDescription', 'Scroll right the editor hover.')
+                description: nls.localize2('vs/editor/contrib/hover/browser/hoverActions', 'scrollRightHoverDescription', 'Scroll right the editor hover.')
             },
         });
     }
@@ -257,7 +257,7 @@ export class PageUpHoverAction extends EditorAction {
     constructor() {
         super({
             id: PAGE_UP_HOVER_ACTION_ID,
-            label: nls.localize({
+            label: nls.localize('vs/editor/contrib/hover/browser/hoverActions', {
                 key: 'pageUpHover',
                 comment: [
                     'Action that allows to page up in the hover widget with the page up command when the hover widget is focused.'
@@ -272,7 +272,7 @@ export class PageUpHoverAction extends EditorAction {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: nls.localize2('pageUpHoverDescription', 'Page up the editor hover.'),
+                description: nls.localize2('vs/editor/contrib/hover/browser/hoverActions', 'pageUpHoverDescription', 'Page up the editor hover.'),
             },
         });
     }
@@ -288,7 +288,7 @@ export class PageDownHoverAction extends EditorAction {
     constructor() {
         super({
             id: PAGE_DOWN_HOVER_ACTION_ID,
-            label: nls.localize({
+            label: nls.localize('vs/editor/contrib/hover/browser/hoverActions', {
                 key: 'pageDownHover',
                 comment: [
                     'Action that allows to page down in the hover widget with the page down command when the hover widget is focused.'
@@ -303,7 +303,7 @@ export class PageDownHoverAction extends EditorAction {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: nls.localize2('pageDownHoverDescription', 'Page down the editor hover.'),
+                description: nls.localize2('vs/editor/contrib/hover/browser/hoverActions', 'pageDownHoverDescription', 'Page down the editor hover.'),
             },
         });
     }
@@ -319,7 +319,7 @@ export class GoToTopHoverAction extends EditorAction {
     constructor() {
         super({
             id: GO_TO_TOP_HOVER_ACTION_ID,
-            label: nls.localize({
+            label: nls.localize('vs/editor/contrib/hover/browser/hoverActions', {
                 key: 'goToTopHover',
                 comment: [
                     'Action that allows to go to the top of the hover widget with the home command when the hover widget is focused.'
@@ -334,7 +334,7 @@ export class GoToTopHoverAction extends EditorAction {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: nls.localize2('goToTopHoverDescription', 'Go to the top of the editor hover.'),
+                description: nls.localize2('vs/editor/contrib/hover/browser/hoverActions', 'goToTopHoverDescription', 'Go to the top of the editor hover.'),
             },
         });
     }
@@ -350,7 +350,7 @@ export class GoToBottomHoverAction extends EditorAction {
     constructor() {
         super({
             id: GO_TO_BOTTOM_HOVER_ACTION_ID,
-            label: nls.localize({
+            label: nls.localize('vs/editor/contrib/hover/browser/hoverActions', {
                 key: 'goToBottomHover',
                 comment: [
                     'Action that allows to go to the bottom in the hover widget with the end command when the hover widget is focused.'
@@ -365,7 +365,7 @@ export class GoToBottomHoverAction extends EditorAction {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: nls.localize2('goToBottomHoverDescription', 'Go to the bottom of the editor hover.')
+                description: nls.localize2('vs/editor/contrib/hover/browser/hoverActions', 'goToBottomHoverDescription', 'Go to the bottom of the editor hover.')
             },
         });
     }
diff --git a/esm/vs/editor/contrib/hover/browser/markdownHoverParticipant.js b/esm/vs/editor/contrib/hover/browser/markdownHoverParticipant.js
index 23ca3346d543b6e784110824500c58f6e888bee2..44bd50174e948ff93e1c869d30aba64bce02b37e 100644
--- a/esm/vs/editor/contrib/hover/browser/markdownHoverParticipant.js
+++ b/esm/vs/editor/contrib/hover/browser/markdownHoverParticipant.js
@@ -37,8 +37,8 @@ import { AsyncIterableObject } from '../../../../base/common/async.js';
 import { getHoverProviderResultsAsAsyncIterable } from './getHover.js';
 import { ICommandService } from '../../../../platform/commands/common/commands.js';
 const $ = dom.$;
-const increaseHoverVerbosityIcon = registerIcon('hover-increase-verbosity', Codicon.add, nls.localize('increaseHoverVerbosity', 'Icon for increaseing hover verbosity.'));
-const decreaseHoverVerbosityIcon = registerIcon('hover-decrease-verbosity', Codicon.remove, nls.localize('decreaseHoverVerbosity', 'Icon for decreasing hover verbosity.'));
+const increaseHoverVerbosityIcon = registerIcon('hover-increase-verbosity', Codicon.add, nls.localize('vs/editor/contrib/hover/browser/markdownHoverParticipant', 'increaseHoverVerbosity', 'Icon for increaseing hover verbosity.'));
+const decreaseHoverVerbosityIcon = registerIcon('hover-decrease-verbosity', Codicon.remove, nls.localize('vs/editor/contrib/hover/browser/markdownHoverParticipant', 'decreaseHoverVerbosity', 'Icon for decreasing hover verbosity.'));
 export class MarkdownHover {
     constructor(owner, range, contents, isBeforeContent, ordinal, source = undefined) {
         this.owner = owner;
@@ -82,7 +82,7 @@ let MarkdownHoverParticipant = class MarkdownHoverParticipant {
         this.hoverOrdinal = 3;
     }
     createLoadingMessage(anchor) {
-        return new MarkdownHover(this, anchor.range, [new MarkdownString().appendText(nls.localize('modesContentHover.loading', "Loading..."))], false, 2000);
+        return new MarkdownHover(this, anchor.range, [new MarkdownString().appendText(nls.localize('vs/editor/contrib/hover/browser/markdownHoverParticipant', 'modesContentHover.loading', "Loading..."))], false, 2000);
     }
     computeSync(anchor, lineDecorations) {
         if (!this._editor.hasModel() || anchor.type !== 1 /* HoverAnchorType.Range */) {
@@ -103,12 +103,12 @@ let MarkdownHoverParticipant = class MarkdownHoverParticipant {
         if (stopRenderingLineAfter >= 0 && lineLength > stopRenderingLineAfter && anchor.range.startColumn >= stopRenderingLineAfter) {
             stopRenderingMessage = true;
             result.push(new MarkdownHover(this, anchor.range, [{
-                    value: nls.localize('stopped rendering', "Rendering paused for long line for performance reasons. This can be configured via `editor.stopRenderingLineAfter`.")
+                    value: nls.localize('vs/editor/contrib/hover/browser/markdownHoverParticipant', 'stopped rendering', "Rendering paused for long line for performance reasons. This can be configured via `editor.stopRenderingLineAfter`.")
                 }], false, index++));
         }
         if (!stopRenderingMessage && typeof maxTokenizationLineLength === 'number' && lineLength >= maxTokenizationLineLength) {
             result.push(new MarkdownHover(this, anchor.range, [{
-                    value: nls.localize('too many characters', "Tokenization is skipped for long lines for performance reasons. This can be configured via `editor.maxTokenizationLineLength`.")
+                    value: nls.localize('vs/editor/contrib/hover/browser/markdownHoverParticipant', 'too many characters', "Tokenization is skipped for long lines for performance reasons. This can be configured via `editor.maxTokenizationLineLength`.")
                 }], false, index++));
         }
         let isBeforeContent = false;
@@ -365,14 +365,14 @@ export function labelForHoverVerbosityAction(keybindingService, action) {
         case HoverVerbosityAction.Increase: {
             const kb = keybindingService.lookupKeybinding(INCREASE_HOVER_VERBOSITY_ACTION_ID);
             return kb ?
-                nls.localize('increaseVerbosityWithKb', "Increase Hover Verbosity ({0})", kb.getLabel()) :
-                nls.localize('increaseVerbosity', "Increase Hover Verbosity");
+                nls.localize('vs/editor/contrib/hover/browser/markdownHoverParticipant', 'increaseVerbosityWithKb', "Increase Hover Verbosity ({0})", kb.getLabel()) :
+                nls.localize('vs/editor/contrib/hover/browser/markdownHoverParticipant', 'increaseVerbosity', "Increase Hover Verbosity");
         }
         case HoverVerbosityAction.Decrease: {
             const kb = keybindingService.lookupKeybinding(DECREASE_HOVER_VERBOSITY_ACTION_ID);
             return kb ?
-                nls.localize('decreaseVerbosityWithKb', "Decrease Hover Verbosity ({0})", kb.getLabel()) :
-                nls.localize('decreaseVerbosity', "Decrease Hover Verbosity");
+                nls.localize('vs/editor/contrib/hover/browser/markdownHoverParticipant', 'decreaseVerbosityWithKb', "Decrease Hover Verbosity ({0})", kb.getLabel()) :
+                nls.localize('vs/editor/contrib/hover/browser/markdownHoverParticipant', 'decreaseVerbosity', "Decrease Hover Verbosity");
         }
     }
 }
diff --git a/esm/vs/editor/contrib/hover/browser/markerHoverParticipant.js b/esm/vs/editor/contrib/hover/browser/markerHoverParticipant.js
index 490fe6e65aac911a1778c816260b1d661ccae20a..008477acb4863abbb6f682e9e9b3d47e7caf50a7 100644
--- a/esm/vs/editor/contrib/hover/browser/markerHoverParticipant.js
+++ b/esm/vs/editor/contrib/hover/browser/markerHoverParticipant.js
@@ -163,7 +163,7 @@ let MarkerHoverParticipant = class MarkerHoverParticipant {
             const markerController = MarkerController.get(this._editor);
             if (markerController) {
                 context.statusBar.addAction({
-                    label: nls.localize('view problem', "View Problem"),
+                    label: nls.localize('vs/editor/contrib/hover/browser/markerHoverParticipant', 'view problem', "View Problem"),
                     commandId: NextMarkerAction.ID,
                     run: () => {
                         context.hide();
@@ -178,14 +178,14 @@ let MarkerHoverParticipant = class MarkerHoverParticipant {
             if (this.recentMarkerCodeActionsInfo) {
                 if (IMarkerData.makeKey(this.recentMarkerCodeActionsInfo.marker) === IMarkerData.makeKey(markerHover.marker)) {
                     if (!this.recentMarkerCodeActionsInfo.hasCodeActions) {
-                        quickfixPlaceholderElement.textContent = nls.localize('noQuickFixes', "No quick fixes available");
+                        quickfixPlaceholderElement.textContent = nls.localize('vs/editor/contrib/hover/browser/markerHoverParticipant', 'noQuickFixes', "No quick fixes available");
                     }
                 }
                 else {
                     this.recentMarkerCodeActionsInfo = undefined;
                 }
             }
-            const updatePlaceholderDisposable = this.recentMarkerCodeActionsInfo && !this.recentMarkerCodeActionsInfo.hasCodeActions ? Disposable.None : disposableTimeout(() => quickfixPlaceholderElement.textContent = nls.localize('checkingForQuickFixes', "Checking for quick fixes..."), 200, disposables);
+            const updatePlaceholderDisposable = this.recentMarkerCodeActionsInfo && !this.recentMarkerCodeActionsInfo.hasCodeActions ? Disposable.None : disposableTimeout(() => quickfixPlaceholderElement.textContent = nls.localize('vs/editor/contrib/hover/browser/markerHoverParticipant', 'checkingForQuickFixes', "Checking for quick fixes..."), 200, disposables);
             if (!quickfixPlaceholderElement.textContent) {
                 // Have some content in here to avoid flickering
                 quickfixPlaceholderElement.textContent = String.fromCharCode(0xA0); // &nbsp;
@@ -197,7 +197,7 @@ let MarkerHoverParticipant = class MarkerHoverParticipant {
                 this.recentMarkerCodeActionsInfo = { marker: markerHover.marker, hasCodeActions: actions.validActions.length > 0 };
                 if (!this.recentMarkerCodeActionsInfo.hasCodeActions) {
                     actions.dispose();
-                    quickfixPlaceholderElement.textContent = nls.localize('noQuickFixes', "No quick fixes available");
+                    quickfixPlaceholderElement.textContent = nls.localize('vs/editor/contrib/hover/browser/markerHoverParticipant', 'noQuickFixes', "No quick fixes available");
                     return;
                 }
                 quickfixPlaceholderElement.style.display = 'none';
@@ -208,7 +208,7 @@ let MarkerHoverParticipant = class MarkerHoverParticipant {
                     }
                 }));
                 context.statusBar.addAction({
-                    label: nls.localize('quick fixes', "Quick Fix..."),
+                    label: nls.localize('vs/editor/contrib/hover/browser/markerHoverParticipant', 'quick fixes', "Quick Fix..."),
                     commandId: quickFixCommandId,
                     run: (target) => {
                         showing = true;
diff --git a/esm/vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace.js b/esm/vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace.js
index 20b8b4fa552445da5927ebeacb6b15e3fff3e054..76dae0c406b13a21a9e3d522153a1d76f3c54eb8 100644
--- a/esm/vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace.js
+++ b/esm/vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace.js
@@ -107,7 +107,7 @@ class InPlaceReplaceUp extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.inPlaceReplace.up',
-            label: nls.localize('InPlaceReplaceAction.previous.label', "Replace with Previous Value"),
+            label: nls.localize('vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace', 'InPlaceReplaceAction.previous.label', "Replace with Previous Value"),
             alias: 'Replace with Previous Value',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -129,7 +129,7 @@ class InPlaceReplaceDown extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.inPlaceReplace.down',
-            label: nls.localize('InPlaceReplaceAction.next.label', "Replace with Next Value"),
+            label: nls.localize('vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace', 'InPlaceReplaceAction.next.label', "Replace with Next Value"),
             alias: 'Replace with Next Value',
             precondition: EditorContextKeys.writable,
             kbOpts: {
diff --git a/esm/vs/editor/contrib/indentation/browser/indentation.js b/esm/vs/editor/contrib/indentation/browser/indentation.js
index 670212fe32dbba0e7383b2de6b77cd3959d6a743..58fdf832db0a8bf1da26000629e43df18405ec93 100644
--- a/esm/vs/editor/contrib/indentation/browser/indentation.js
+++ b/esm/vs/editor/contrib/indentation/browser/indentation.js
@@ -30,11 +30,11 @@ export class IndentationToSpacesAction extends EditorAction {
     constructor() {
         super({
             id: IndentationToSpacesAction.ID,
-            label: nls.localize('indentationToSpaces', "Convert Indentation to Spaces"),
+            label: nls.localize('vs/editor/contrib/indentation/browser/indentation', 'indentationToSpaces', "Convert Indentation to Spaces"),
             alias: 'Convert Indentation to Spaces',
             precondition: EditorContextKeys.writable,
             metadata: {
-                description: nls.localize2('indentationToSpacesDescription', "Convert the tab indentation to spaces."),
+                description: nls.localize2('vs/editor/contrib/indentation/browser/indentation', 'indentationToSpacesDescription', "Convert the tab indentation to spaces."),
             }
         });
     }
@@ -62,11 +62,11 @@ export class IndentationToTabsAction extends EditorAction {
     constructor() {
         super({
             id: IndentationToTabsAction.ID,
-            label: nls.localize('indentationToTabs', "Convert Indentation to Tabs"),
+            label: nls.localize('vs/editor/contrib/indentation/browser/indentation', 'indentationToTabs', "Convert Indentation to Tabs"),
             alias: 'Convert Indentation to Tabs',
             precondition: EditorContextKeys.writable,
             metadata: {
-                description: nls.localize2('indentationToTabsDescription', "Convert the spaces indentation to tabs."),
+                description: nls.localize2('vs/editor/contrib/indentation/browser/indentation', 'indentationToTabsDescription', "Convert the spaces indentation to tabs."),
             }
         });
     }
@@ -109,17 +109,17 @@ export class ChangeIndentationSizeAction extends EditorAction {
             label: n.toString(),
             // add description for tabSize value set in the configuration
             description: (n === creationOpts.tabSize && n === modelOpts.tabSize
-                ? nls.localize('configuredTabSize', "Configured Tab Size")
+                ? nls.localize('vs/editor/contrib/indentation/browser/indentation', 'configuredTabSize', "Configured Tab Size")
                 : n === creationOpts.tabSize
-                    ? nls.localize('defaultTabSize', "Default Tab Size")
+                    ? nls.localize('vs/editor/contrib/indentation/browser/indentation', 'defaultTabSize', "Default Tab Size")
                     : n === modelOpts.tabSize
-                        ? nls.localize('currentTabSize', "Current Tab Size")
+                        ? nls.localize('vs/editor/contrib/indentation/browser/indentation', 'currentTabSize', "Current Tab Size")
                         : undefined)
         }));
         // auto focus the tabSize set for the current editor
         const autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);
         setTimeout(() => {
-            quickInputService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, "Select Tab Size for Current File"), activeItem: picks[autoFocusIndex] }).then(pick => {
+            quickInputService.pick(picks, { placeHolder: nls.localize('vs/editor/contrib/indentation/browser/indentation', { key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, "Select Tab Size for Current File"), activeItem: picks[autoFocusIndex] }).then(pick => {
                 if (pick) {
                     if (model && !model.isDisposed()) {
                         const pickedVal = parseInt(pick.label, 10);
@@ -146,11 +146,11 @@ export class IndentUsingTabs extends ChangeIndentationSizeAction {
     constructor() {
         super(false, false, {
             id: IndentUsingTabs.ID,
-            label: nls.localize('indentUsingTabs', "Indent Using Tabs"),
+            label: nls.localize('vs/editor/contrib/indentation/browser/indentation', 'indentUsingTabs', "Indent Using Tabs"),
             alias: 'Indent Using Tabs',
             precondition: undefined,
             metadata: {
-                description: nls.localize2('indentUsingTabsDescription', "Use indentation with tabs."),
+                description: nls.localize2('vs/editor/contrib/indentation/browser/indentation', 'indentUsingTabsDescription', "Use indentation with tabs."),
             }
         });
     }
@@ -160,11 +160,11 @@ export class IndentUsingSpaces extends ChangeIndentationSizeAction {
     constructor() {
         super(true, false, {
             id: IndentUsingSpaces.ID,
-            label: nls.localize('indentUsingSpaces', "Indent Using Spaces"),
+            label: nls.localize('vs/editor/contrib/indentation/browser/indentation', 'indentUsingSpaces', "Indent Using Spaces"),
             alias: 'Indent Using Spaces',
             precondition: undefined,
             metadata: {
-                description: nls.localize2('indentUsingSpacesDescription', "Use indentation with spaces."),
+                description: nls.localize2('vs/editor/contrib/indentation/browser/indentation', 'indentUsingSpacesDescription', "Use indentation with spaces."),
             }
         });
     }
@@ -174,11 +174,11 @@ export class ChangeTabDisplaySize extends ChangeIndentationSizeAction {
     constructor() {
         super(true, true, {
             id: ChangeTabDisplaySize.ID,
-            label: nls.localize('changeTabDisplaySize', "Change Tab Display Size"),
+            label: nls.localize('vs/editor/contrib/indentation/browser/indentation', 'changeTabDisplaySize', "Change Tab Display Size"),
             alias: 'Change Tab Display Size',
             precondition: undefined,
             metadata: {
-                description: nls.localize2('changeTabDisplaySizeDescription', "Change the space size equivalent of the tab."),
+                description: nls.localize2('vs/editor/contrib/indentation/browser/indentation', 'changeTabDisplaySizeDescription', "Change the space size equivalent of the tab."),
             }
         });
     }
@@ -188,11 +188,11 @@ export class DetectIndentation extends EditorAction {
     constructor() {
         super({
             id: DetectIndentation.ID,
-            label: nls.localize('detectIndentation', "Detect Indentation from Content"),
+            label: nls.localize('vs/editor/contrib/indentation/browser/indentation', 'detectIndentation', "Detect Indentation from Content"),
             alias: 'Detect Indentation from Content',
             precondition: undefined,
             metadata: {
-                description: nls.localize2('detectIndentationDescription', "Detect the indentation from content."),
+                description: nls.localize2('vs/editor/contrib/indentation/browser/indentation', 'detectIndentationDescription', "Detect the indentation from content."),
             }
         });
     }
@@ -210,11 +210,11 @@ export class ReindentLinesAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.reindentlines',
-            label: nls.localize('editor.reindentlines', "Reindent Lines"),
+            label: nls.localize('vs/editor/contrib/indentation/browser/indentation', 'editor.reindentlines', "Reindent Lines"),
             alias: 'Reindent Lines',
             precondition: EditorContextKeys.writable,
             metadata: {
-                description: nls.localize2('editor.reindentlinesDescription', "Reindent the lines of the editor."),
+                description: nls.localize2('vs/editor/contrib/indentation/browser/indentation', 'editor.reindentlinesDescription', "Reindent the lines of the editor."),
             }
         });
     }
@@ -236,11 +236,11 @@ export class ReindentSelectedLinesAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.reindentselectedlines',
-            label: nls.localize('editor.reindentselectedlines', "Reindent Selected Lines"),
+            label: nls.localize('vs/editor/contrib/indentation/browser/indentation', 'editor.reindentselectedlines', "Reindent Selected Lines"),
             alias: 'Reindent Selected Lines',
             precondition: EditorContextKeys.writable,
             metadata: {
-                description: nls.localize2('editor.reindentselectedlinesDescription', "Reindent the selected lines of the editor."),
+                description: nls.localize2('vs/editor/contrib/indentation/browser/indentation', 'editor.reindentselectedlinesDescription', "Reindent the selected lines of the editor."),
             }
         });
     }
diff --git a/esm/vs/editor/contrib/inlayHints/browser/inlayHintsHover.js b/esm/vs/editor/contrib/inlayHints/browser/inlayHintsHover.js
index 220d4988963b353c7a056a83482c62c2fa2e7aa4..cbd9ece6e0a858645395bff85ab2fedac6c6596a 100644
--- a/esm/vs/editor/contrib/inlayHints/browser/inlayHintsHover.js
+++ b/esm/vs/editor/contrib/inlayHints/browser/inlayHintsHover.js
@@ -83,7 +83,7 @@ let InlayHintsHover = class InlayHintsHover extends MarkdownHoverParticipant {
             }
             // (1.2) Inlay dbl-click gesture
             if (isNonEmptyArray(part.item.hint.textEdits)) {
-                executor.emitOne(new MarkdownHover(this, anchor.range, [new MarkdownString().appendText(localize('hint.dbl', "Double-click to insert"))], false, 10001));
+                executor.emitOne(new MarkdownHover(this, anchor.range, [new MarkdownString().appendText(localize('vs/editor/contrib/inlayHints/browser/inlayHintsHover', 'hint.dbl', "Double-click to insert"))], false, 10001));
             }
             // (2) Inlay Label Part Tooltip
             let partTooltip;
@@ -102,19 +102,19 @@ let InlayHintsHover = class InlayHintsHover extends MarkdownHoverParticipant {
                 const useMetaKey = this._editor.getOption(78 /* EditorOption.multiCursorModifier */) === 'altKey';
                 const kb = useMetaKey
                     ? platform.isMacintosh
-                        ? localize('links.navigate.kb.meta.mac', "cmd + click")
-                        : localize('links.navigate.kb.meta', "ctrl + click")
+                        ? localize('vs/editor/contrib/inlayHints/browser/inlayHintsHover', 'links.navigate.kb.meta.mac', "cmd + click")
+                        : localize('vs/editor/contrib/inlayHints/browser/inlayHintsHover', 'links.navigate.kb.meta', "ctrl + click")
                     : platform.isMacintosh
-                        ? localize('links.navigate.kb.alt.mac', "option + click")
-                        : localize('links.navigate.kb.alt', "alt + click");
+                        ? localize('vs/editor/contrib/inlayHints/browser/inlayHintsHover', 'links.navigate.kb.alt.mac', "option + click")
+                        : localize('vs/editor/contrib/inlayHints/browser/inlayHintsHover', 'links.navigate.kb.alt', "alt + click");
                 if (part.part.location && part.part.command) {
-                    linkHint = new MarkdownString().appendText(localize('hint.defAndCommand', 'Go to Definition ({0}), right click for more', kb));
+                    linkHint = new MarkdownString().appendText(localize('vs/editor/contrib/inlayHints/browser/inlayHintsHover', 'hint.defAndCommand', 'Go to Definition ({0}), right click for more', kb));
                 }
                 else if (part.part.location) {
-                    linkHint = new MarkdownString().appendText(localize('hint.def', 'Go to Definition ({0})', kb));
+                    linkHint = new MarkdownString().appendText(localize('vs/editor/contrib/inlayHints/browser/inlayHintsHover', 'hint.def', 'Go to Definition ({0})', kb));
                 }
                 else if (part.part.command) {
-                    linkHint = new MarkdownString(`[${localize('hint.cmd', "Execute Command")}](${asCommandLink(part.part.command)} "${part.part.command.title}") (${kb})`, { isTrusted: true });
+                    linkHint = new MarkdownString(`[${localize('vs/editor/contrib/inlayHints/browser/inlayHintsHover', 'hint.cmd', "Execute Command")}](${asCommandLink(part.part.command)} "${part.part.command.title}") (${kb})`, { isTrusted: true });
                 }
                 if (linkHint) {
                     executor.emitOne(new MarkdownHover(this, anchor.range, [linkHint], false, 10000));
diff --git a/esm/vs/editor/contrib/inlineCompletions/browser/controller/commands.js b/esm/vs/editor/contrib/inlineCompletions/browser/controller/commands.js
index 7c04b7fcc968530360ff630351f1397aa4f9e91b..58f6c0f14447ee329216456ce44b7ed358e46ac8 100644
--- a/esm/vs/editor/contrib/inlineCompletions/browser/controller/commands.js
+++ b/esm/vs/editor/contrib/inlineCompletions/browser/controller/commands.js
@@ -19,7 +19,7 @@ export class ShowNextInlineSuggestionAction extends EditorAction {
     constructor() {
         super({
             id: ShowNextInlineSuggestionAction.ID,
-            label: nls.localize('action.inlineSuggest.showNext', "Show Next Inline Suggestion"),
+            label: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'action.inlineSuggest.showNext', "Show Next Inline Suggestion"),
             alias: 'Show Next Inline Suggestion',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),
             kbOpts: {
@@ -38,7 +38,7 @@ export class ShowPreviousInlineSuggestionAction extends EditorAction {
     constructor() {
         super({
             id: ShowPreviousInlineSuggestionAction.ID,
-            label: nls.localize('action.inlineSuggest.showPrevious', "Show Previous Inline Suggestion"),
+            label: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'action.inlineSuggest.showPrevious', "Show Previous Inline Suggestion"),
             alias: 'Show Previous Inline Suggestion',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),
             kbOpts: {
@@ -56,7 +56,7 @@ export class TriggerInlineSuggestionAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.inlineSuggest.trigger',
-            label: nls.localize('action.inlineSuggest.trigger', "Trigger Inline Suggestion"),
+            label: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'action.inlineSuggest.trigger', "Trigger Inline Suggestion"),
             alias: 'Trigger Inline Suggestion',
             precondition: EditorContextKeys.writable
         });
@@ -74,7 +74,7 @@ export class AcceptNextWordOfInlineCompletion extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.inlineSuggest.acceptNextWord',
-            label: nls.localize('action.inlineSuggest.acceptNextWord', "Accept Next Word Of Inline Suggestion"),
+            label: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'action.inlineSuggest.acceptNextWord', "Accept Next Word Of Inline Suggestion"),
             alias: 'Accept Next Word Of Inline Suggestion',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),
             kbOpts: {
@@ -84,7 +84,7 @@ export class AcceptNextWordOfInlineCompletion extends EditorAction {
             },
             menuOpts: [{
                     menuId: MenuId.InlineSuggestionToolbar,
-                    title: nls.localize('acceptWord', 'Accept Word'),
+                    title: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'acceptWord', 'Accept Word'),
                     group: 'primary',
                     order: 2,
                 }],
@@ -99,7 +99,7 @@ export class AcceptNextLineOfInlineCompletion extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.inlineSuggest.acceptNextLine',
-            label: nls.localize('action.inlineSuggest.acceptNextLine', "Accept Next Line Of Inline Suggestion"),
+            label: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'action.inlineSuggest.acceptNextLine', "Accept Next Line Of Inline Suggestion"),
             alias: 'Accept Next Line Of Inline Suggestion',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),
             kbOpts: {
@@ -107,7 +107,7 @@ export class AcceptNextLineOfInlineCompletion extends EditorAction {
             },
             menuOpts: [{
                     menuId: MenuId.InlineSuggestionToolbar,
-                    title: nls.localize('acceptLine', 'Accept Line'),
+                    title: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'acceptLine', 'Accept Line'),
                     group: 'secondary',
                     order: 2,
                 }],
@@ -122,12 +122,12 @@ export class AcceptInlineCompletion extends EditorAction {
     constructor() {
         super({
             id: inlineSuggestCommitId,
-            label: nls.localize('action.inlineSuggest.accept', "Accept Inline Suggestion"),
+            label: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'action.inlineSuggest.accept', "Accept Inline Suggestion"),
             alias: 'Accept Inline Suggestion',
             precondition: InlineCompletionContextKeys.inlineSuggestionVisible,
             menuOpts: [{
                     menuId: MenuId.InlineSuggestionToolbar,
-                    title: nls.localize('accept', "Accept"),
+                    title: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'accept', "Accept"),
                     group: 'primary',
                     order: 1,
                 }],
@@ -151,7 +151,7 @@ export class HideInlineCompletion extends EditorAction {
     constructor() {
         super({
             id: HideInlineCompletion.ID,
-            label: nls.localize('action.inlineSuggest.hide', "Hide Inline Suggestion"),
+            label: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'action.inlineSuggest.hide', "Hide Inline Suggestion"),
             alias: 'Hide Inline Suggestion',
             precondition: InlineCompletionContextKeys.inlineSuggestionVisible,
             kbOpts: {
@@ -172,7 +172,7 @@ export class ToggleAlwaysShowInlineSuggestionToolbar extends Action2 {
     constructor() {
         super({
             id: ToggleAlwaysShowInlineSuggestionToolbar.ID,
-            title: nls.localize('action.inlineSuggest.alwaysShowToolbar', "Always Show Toolbar"),
+            title: nls.localize('vs/editor/contrib/inlineCompletions/browser/controller/commands', 'action.inlineSuggest.alwaysShowToolbar', "Always Show Toolbar"),
             f1: false,
             precondition: undefined,
             menu: [{
diff --git a/esm/vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys.js b/esm/vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys.js
index 5b8356e997ca92f9f45e45b88972c29996af10bb..4f9813eedd9ef11465298447f56e250eae7df985 100644
--- a/esm/vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys.js
+++ b/esm/vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys.js
@@ -9,10 +9,10 @@ import { RawContextKey } from '../../../../../platform/contextkey/common/context
 import { Disposable } from '../../../../../base/common/lifecycle.js';
 import { localize } from '../../../../../nls.js';
 export class InlineCompletionContextKeys extends Disposable {
-    static { this.inlineSuggestionVisible = new RawContextKey('inlineSuggestionVisible', false, localize('inlineSuggestionVisible', "Whether an inline suggestion is visible")); }
-    static { this.inlineSuggestionHasIndentation = new RawContextKey('inlineSuggestionHasIndentation', false, localize('inlineSuggestionHasIndentation', "Whether the inline suggestion starts with whitespace")); }
-    static { this.inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, localize('inlineSuggestionHasIndentationLessThanTabSize', "Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab")); }
-    static { this.suppressSuggestions = new RawContextKey('inlineSuggestionSuppressSuggestions', undefined, localize('suppressSuggestions', "Whether suggestions should be suppressed for the current suggestion")); }
+    static { this.inlineSuggestionVisible = new RawContextKey('inlineSuggestionVisible', false, localize('vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys', 'inlineSuggestionVisible', "Whether an inline suggestion is visible")); }
+    static { this.inlineSuggestionHasIndentation = new RawContextKey('inlineSuggestionHasIndentation', false, localize('vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys', 'inlineSuggestionHasIndentation', "Whether the inline suggestion starts with whitespace")); }
+    static { this.inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, localize('vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys', 'inlineSuggestionHasIndentationLessThanTabSize', "Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab")); }
+    static { this.suppressSuggestions = new RawContextKey('inlineSuggestionSuppressSuggestions', undefined, localize('vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys', 'suppressSuggestions', "Whether suggestions should be suppressed for the current suggestion")); }
     constructor(contextKeyService, model) {
         super();
         this.contextKeyService = contextKeyService;
diff --git a/esm/vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionsController.js b/esm/vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionsController.js
index 52549cea0cc02949742570e10836087f7f48b78d..0fdbf42858327c57fc6ed03d60f1376920486b09 100644
--- a/esm/vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionsController.js
+++ b/esm/vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionsController.js
@@ -209,7 +209,7 @@ let InlineCompletionsController = class InlineCompletionsController extends Disp
         const accessibleViewKeybinding = this._keybindingService.lookupKeybinding('editor.action.accessibleView');
         let hint;
         if (!accessibleViewShowing && accessibleViewKeybinding && this.editor.getOption(150 /* EditorOption.inlineCompletionsAccessibilityVerbose */)) {
-            hint = localize('showAccessibleViewHint', "Inspect this in the accessible view ({0})", accessibleViewKeybinding.getAriaLabel());
+            hint = localize('vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionsController', 'showAccessibleViewHint', "Inspect this in the accessible view ({0})", accessibleViewKeybinding.getAriaLabel());
         }
         alert(hint ? content + ', ' + hint : content);
     }
diff --git a/esm/vs/editor/contrib/inlineCompletions/browser/hintsWidget/hoverParticipant.js b/esm/vs/editor/contrib/inlineCompletions/browser/hintsWidget/hoverParticipant.js
index 9fde943cc952e72d6576119ed2154a46f549f28c..da0c22213926845f4e98816a070fc0ef8d77d99d 100644
--- a/esm/vs/editor/contrib/inlineCompletions/browser/hintsWidget/hoverParticipant.js
+++ b/esm/vs/editor/contrib/inlineCompletions/browser/hintsWidget/hoverParticipant.js
@@ -117,7 +117,7 @@ let InlineCompletionsHoverParticipant = class InlineCompletionsHoverParticipant
                 hoverContentsElement.className = 'hover-contents code-hover-contents';
                 context.onContentsChanged();
             }));
-            const inlineSuggestionAvailable = nls.localize('inlineSuggestionFollows', "Suggestion:");
+            const inlineSuggestionAvailable = nls.localize('vs/editor/contrib/inlineCompletions/browser/hintsWidget/hoverParticipant', 'inlineSuggestionFollows', "Suggestion:");
             const renderedContents = disposables.add(renderer.render(new MarkdownString().appendText(inlineSuggestionAvailable).appendCodeblock('text', code)));
             hoverContentsElement.replaceChildren(renderedContents.element);
         };
diff --git a/esm/vs/editor/contrib/inlineCompletions/browser/hintsWidget/inlineCompletionsHintsWidget.js b/esm/vs/editor/contrib/inlineCompletions/browser/hintsWidget/inlineCompletionsHintsWidget.js
index a39e76ac2a0660dc70f80e93d47a8fc066f67fd1..51a1b7fec8748dfea2c83a0a785232dbbc9c93b4 100644
--- a/esm/vs/editor/contrib/inlineCompletions/browser/hintsWidget/inlineCompletionsHintsWidget.js
+++ b/esm/vs/editor/contrib/inlineCompletions/browser/hintsWidget/inlineCompletionsHintsWidget.js
@@ -96,8 +96,8 @@ InlineCompletionsHintsWidget = __decorate([
     __param(2, IInstantiationService)
 ], InlineCompletionsHintsWidget);
 export { InlineCompletionsHintsWidget };
-const inlineSuggestionHintsNextIcon = registerIcon('inline-suggestion-hints-next', Codicon.chevronRight, localize('parameterHintsNextIcon', 'Icon for show next parameter hint.'));
-const inlineSuggestionHintsPreviousIcon = registerIcon('inline-suggestion-hints-previous', Codicon.chevronLeft, localize('parameterHintsPreviousIcon', 'Icon for show previous parameter hint.'));
+const inlineSuggestionHintsNextIcon = registerIcon('inline-suggestion-hints-next', Codicon.chevronRight, localize('vs/editor/contrib/inlineCompletions/browser/hintsWidget/inlineCompletionsHintsWidget', 'parameterHintsNextIcon', 'Icon for show next parameter hint.'));
+const inlineSuggestionHintsPreviousIcon = registerIcon('inline-suggestion-hints-previous', Codicon.chevronLeft, localize('vs/editor/contrib/inlineCompletions/browser/hintsWidget/inlineCompletionsHintsWidget', 'parameterHintsPreviousIcon', 'Icon for show previous parameter hint.'));
 let InlineSuggestionHintsContentWidget = class InlineSuggestionHintsContentWidget extends Disposable {
     static { InlineSuggestionHintsContentWidget_1 = this; }
     static { this._dropDownVisible = false; }
@@ -108,7 +108,7 @@ let InlineSuggestionHintsContentWidget = class InlineSuggestionHintsContentWidge
         const kb = this.keybindingService.lookupKeybinding(commandId, this._contextKeyService);
         let tooltip = label;
         if (kb) {
-            tooltip = localize({ key: 'content', comment: ['A label', 'A keybinding'] }, '{0} ({1})', label, kb.getLabel());
+            tooltip = localize('vs/editor/contrib/inlineCompletions/browser/hintsWidget/inlineCompletionsHintsWidget', { key: 'content', comment: ['A label', 'A keybinding'] }, '{0} ({1})', label, kb.getLabel());
         }
         action.tooltip = tooltip;
         return action;
@@ -131,9 +131,9 @@ let InlineSuggestionHintsContentWidget = class InlineSuggestionHintsContentWidge
         this.nodes = h('div.inlineSuggestionsHints', { className: this.withBorder ? '.withBorder' : '' }, [
             h('div@toolBar'),
         ]);
-        this.previousAction = this.createCommandAction(showPreviousInlineSuggestionActionId, localize('previous', 'Previous'), ThemeIcon.asClassName(inlineSuggestionHintsPreviousIcon));
+        this.previousAction = this.createCommandAction(showPreviousInlineSuggestionActionId, localize('vs/editor/contrib/inlineCompletions/browser/hintsWidget/inlineCompletionsHintsWidget', 'previous', 'Previous'), ThemeIcon.asClassName(inlineSuggestionHintsPreviousIcon));
         this.availableSuggestionCountAction = new Action('inlineSuggestionHints.availableSuggestionCount', '', undefined, false);
-        this.nextAction = this.createCommandAction(showNextInlineSuggestionActionId, localize('next', 'Next'), ThemeIcon.asClassName(inlineSuggestionHintsNextIcon));
+        this.nextAction = this.createCommandAction(showNextInlineSuggestionActionId, localize('vs/editor/contrib/inlineCompletions/browser/hintsWidget/inlineCompletionsHintsWidget', 'next', 'Next'), ThemeIcon.asClassName(inlineSuggestionHintsNextIcon));
         // TODO@hediet: deprecate MenuId.InlineCompletionsActions
         this.inlineCompletionsActionsMenus = this._register(this._menuService.createMenu(MenuId.InlineCompletionsActions, this._contextKeyService));
         this.clearAvailableSuggestionCountLabelDebounced = this._register(new RunOnceScheduler(() => {
diff --git a/esm/vs/editor/contrib/inlineEdits/browser/commands.js b/esm/vs/editor/contrib/inlineEdits/browser/commands.js
index 3ce288e2bc4912f6a81c1f5764d6ff54534e0d86..ab9598e5c71ec052671a6938de813c4da0e58193 100644
--- a/esm/vs/editor/contrib/inlineEdits/browser/commands.js
+++ b/esm/vs/editor/contrib/inlineEdits/browser/commands.js
@@ -24,7 +24,7 @@ export class ShowNextInlineEditAction extends EditorAction {
     constructor() {
         super({
             id: ShowNextInlineEditAction.ID,
-            ...labelAndAlias(nls.localize2('action.inlineEdits.showNext', "Show Next Inline Edit")),
+            ...labelAndAlias(nls.localize2('vs/editor/contrib/inlineEdits/browser/commands', 'action.inlineEdits.showNext', "Show Next Inline Edit")),
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, inlineEditVisible),
             kbOpts: {
                 weight: 100,
@@ -42,7 +42,7 @@ export class ShowPreviousInlineEditAction extends EditorAction {
     constructor() {
         super({
             id: ShowPreviousInlineEditAction.ID,
-            ...labelAndAlias(nls.localize2('action.inlineEdits.showPrevious', "Show Previous Inline Edit")),
+            ...labelAndAlias(nls.localize2('vs/editor/contrib/inlineEdits/browser/commands', 'action.inlineEdits.showPrevious', "Show Previous Inline Edit")),
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, inlineEditVisible),
             kbOpts: {
                 weight: 100,
@@ -59,7 +59,7 @@ export class TriggerInlineEditAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.inlineEdits.trigger',
-            ...labelAndAlias(nls.localize2('action.inlineEdits.trigger', "Trigger Inline Edit")),
+            ...labelAndAlias(nls.localize2('vs/editor/contrib/inlineEdits/browser/commands', 'action.inlineEdits.trigger', "Trigger Inline Edit")),
             precondition: EditorContextKeys.writable
         });
     }
@@ -75,11 +75,11 @@ export class AcceptInlineEdit extends EditorAction {
     constructor() {
         super({
             id: inlineEditAcceptId,
-            ...labelAndAlias(nls.localize2('action.inlineEdits.accept', "Accept Inline Edit")),
+            ...labelAndAlias(nls.localize2('vs/editor/contrib/inlineEdits/browser/commands', 'action.inlineEdits.accept', "Accept Inline Edit")),
             precondition: inlineEditVisible,
             menuOpts: {
                 menuId: MenuId.InlineEditsActions,
-                title: nls.localize('inlineEditsActions', "Accept Inline Edit"),
+                title: nls.localize('vs/editor/contrib/inlineEdits/browser/commands', 'inlineEditsActions', "Accept Inline Edit"),
                 group: 'primary',
                 order: 1,
                 icon: Codicon.check,
@@ -108,7 +108,7 @@ export class PinInlineEdit extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.inlineEdits.pin',
-            ...labelAndAlias(nls.localize2('action.inlineEdits.pin', "Pin Inline Edit")),
+            ...labelAndAlias(nls.localize2('vs/editor/contrib/inlineEdits/browser/commands', 'action.inlineEdits.pin', "Pin Inline Edit")),
             precondition: undefined,
             kbOpts: {
                 primary: KeyMod.Shift | KeyCode.Space,
@@ -128,7 +128,7 @@ export class PinInlineEdit extends EditorAction {
 MenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {
     command: {
         id: 'editor.action.inlineEdits.pin',
-        title: nls.localize('Pin', "Pin"),
+        title: nls.localize('vs/editor/contrib/inlineEdits/browser/commands', 'Pin', "Pin"),
         icon: Codicon.pin,
     },
     group: 'primary',
@@ -139,7 +139,7 @@ MenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {
 MenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {
     command: {
         id: 'editor.action.inlineEdits.unpin',
-        title: nls.localize('Unpin', "Unpin"),
+        title: nls.localize('vs/editor/contrib/inlineEdits/browser/commands', 'Unpin', "Unpin"),
         icon: Codicon.pinned,
     },
     group: 'primary',
@@ -151,7 +151,7 @@ export class HideInlineEdit extends EditorAction {
     constructor() {
         super({
             id: HideInlineEdit.ID,
-            ...labelAndAlias(nls.localize2('action.inlineEdits.hide', "Hide Inline Edit")),
+            ...labelAndAlias(nls.localize2('vs/editor/contrib/inlineEdits/browser/commands', 'action.inlineEdits.hide', "Hide Inline Edit")),
             precondition: inlineEditVisible,
             kbOpts: {
                 weight: 100,
diff --git a/esm/vs/editor/contrib/inlineEdits/browser/consts.js b/esm/vs/editor/contrib/inlineEdits/browser/consts.js
index 2dae60bde620e25b13c6798b96694bfb39f1e967..1df6c900d4a4b37e294805126eab12b5868eb1df 100644
--- a/esm/vs/editor/contrib/inlineEdits/browser/consts.js
+++ b/esm/vs/editor/contrib/inlineEdits/browser/consts.js
@@ -7,5 +7,5 @@ import { RawContextKey } from '../../../../platform/contextkey/common/contextkey
 export const inlineEditAcceptId = 'editor.action.inlineEdits.accept';
 export const showPreviousInlineEditActionId = 'editor.action.inlineEdits.showPrevious';
 export const showNextInlineEditActionId = 'editor.action.inlineEdits.showNext';
-export const inlineEditVisible = new RawContextKey('inlineEditsVisible', false, localize('inlineEditsVisible', "Whether an inline edit is visible"));
-export const isPinnedContextKey = new RawContextKey('inlineEditsIsPinned', false, localize('isPinned', "Whether an inline edit is visible"));
+export const inlineEditVisible = new RawContextKey('inlineEditsVisible', false, localize('vs/editor/contrib/inlineEdits/browser/consts', 'inlineEditsVisible', "Whether an inline edit is visible"));
+export const isPinnedContextKey = new RawContextKey('inlineEditsIsPinned', false, localize('vs/editor/contrib/inlineEdits/browser/consts', 'isPinned', "Whether an inline edit is visible"));
diff --git a/esm/vs/editor/contrib/lineSelection/browser/lineSelection.js b/esm/vs/editor/contrib/lineSelection/browser/lineSelection.js
index 285d2231ea65c58d979d1e3562cbbe73c159e33d..832c3f6576a7e9cdd0244aee4aa5780974af0272 100644
--- a/esm/vs/editor/contrib/lineSelection/browser/lineSelection.js
+++ b/esm/vs/editor/contrib/lineSelection/browser/lineSelection.js
@@ -10,7 +10,7 @@ export class ExpandLineSelectionAction extends EditorAction {
     constructor() {
         super({
             id: 'expandLineSelection',
-            label: nls.localize('expandLineSelection', "Expand Line Selection"),
+            label: nls.localize('vs/editor/contrib/lineSelection/browser/lineSelection', 'expandLineSelection', "Expand Line Selection"),
             alias: 'Expand Line Selection',
             precondition: undefined,
             kbOpts: {
diff --git a/esm/vs/editor/contrib/linesOperations/browser/linesOperations.js b/esm/vs/editor/contrib/linesOperations/browser/linesOperations.js
index e650360f4e4b0a2f8f72c901efc6e0a002e2acfd..1aa55a18df03acd385e8a8a1e5d9dfaaca07593d 100644
--- a/esm/vs/editor/contrib/linesOperations/browser/linesOperations.js
+++ b/esm/vs/editor/contrib/linesOperations/browser/linesOperations.js
@@ -63,7 +63,7 @@ class CopyLinesUpAction extends AbstractCopyLinesAction {
     constructor() {
         super(false, {
             id: 'editor.action.copyLinesUpAction',
-            label: nls.localize('lines.copyUp', "Copy Line Up"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.copyUp', "Copy Line Up"),
             alias: 'Copy Line Up',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -75,7 +75,7 @@ class CopyLinesUpAction extends AbstractCopyLinesAction {
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '2_line',
-                title: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, "&&Copy Line Up"),
+                title: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', { key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, "&&Copy Line Up"),
                 order: 1
             }
         });
@@ -85,7 +85,7 @@ class CopyLinesDownAction extends AbstractCopyLinesAction {
     constructor() {
         super(true, {
             id: 'editor.action.copyLinesDownAction',
-            label: nls.localize('lines.copyDown', "Copy Line Down"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.copyDown', "Copy Line Down"),
             alias: 'Copy Line Down',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -97,7 +97,7 @@ class CopyLinesDownAction extends AbstractCopyLinesAction {
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '2_line',
-                title: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, "Co&&py Line Down"),
+                title: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', { key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, "Co&&py Line Down"),
                 order: 2
             }
         });
@@ -107,13 +107,13 @@ export class DuplicateSelectionAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.duplicateSelection',
-            label: nls.localize('duplicateSelection', "Duplicate Selection"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'duplicateSelection', "Duplicate Selection"),
             alias: 'Duplicate Selection',
             precondition: EditorContextKeys.writable,
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '2_line',
-                title: nls.localize({ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, "&&Duplicate Selection"),
+                title: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', { key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, "&&Duplicate Selection"),
                 order: 5
             }
         });
@@ -162,7 +162,7 @@ class MoveLinesUpAction extends AbstractMoveLinesAction {
     constructor() {
         super(false, {
             id: 'editor.action.moveLinesUpAction',
-            label: nls.localize('lines.moveUp', "Move Line Up"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.moveUp', "Move Line Up"),
             alias: 'Move Line Up',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -174,7 +174,7 @@ class MoveLinesUpAction extends AbstractMoveLinesAction {
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '2_line',
-                title: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, "Mo&&ve Line Up"),
+                title: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', { key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, "Mo&&ve Line Up"),
                 order: 3
             }
         });
@@ -184,7 +184,7 @@ class MoveLinesDownAction extends AbstractMoveLinesAction {
     constructor() {
         super(true, {
             id: 'editor.action.moveLinesDownAction',
-            label: nls.localize('lines.moveDown', "Move Line Down"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.moveDown', "Move Line Down"),
             alias: 'Move Line Down',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -196,7 +196,7 @@ class MoveLinesDownAction extends AbstractMoveLinesAction {
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '2_line',
-                title: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, "Move &&Line Down"),
+                title: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', { key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, "Move &&Line Down"),
                 order: 4
             }
         });
@@ -235,7 +235,7 @@ export class SortLinesAscendingAction extends AbstractSortLinesAction {
     constructor() {
         super(false, {
             id: 'editor.action.sortLinesAscending',
-            label: nls.localize('lines.sortAscending', "Sort Lines Ascending"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.sortAscending', "Sort Lines Ascending"),
             alias: 'Sort Lines Ascending',
             precondition: EditorContextKeys.writable
         });
@@ -245,7 +245,7 @@ export class SortLinesDescendingAction extends AbstractSortLinesAction {
     constructor() {
         super(true, {
             id: 'editor.action.sortLinesDescending',
-            label: nls.localize('lines.sortDescending', "Sort Lines Descending"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.sortDescending', "Sort Lines Descending"),
             alias: 'Sort Lines Descending',
             precondition: EditorContextKeys.writable
         });
@@ -255,7 +255,7 @@ export class DeleteDuplicateLinesAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.removeDuplicateLines',
-            label: nls.localize('lines.deleteDuplicates', "Delete Duplicate Lines"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.deleteDuplicates', "Delete Duplicate Lines"),
             alias: 'Delete Duplicate Lines',
             precondition: EditorContextKeys.writable
         });
@@ -306,7 +306,7 @@ export class TrimTrailingWhitespaceAction extends EditorAction {
     constructor() {
         super({
             id: TrimTrailingWhitespaceAction.ID,
-            label: nls.localize('lines.trimTrailingWhitespace', "Trim Trailing Whitespace"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.trimTrailingWhitespace', "Trim Trailing Whitespace"),
             alias: 'Trim Trailing Whitespace',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -341,7 +341,7 @@ export class DeleteLinesAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.deleteLines',
-            label: nls.localize('lines.delete', "Delete Line"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.delete', "Delete Line"),
             alias: 'Delete Line',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -430,7 +430,7 @@ export class IndentLinesAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.indentLines',
-            label: nls.localize('lines.indent', "Indent Line"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.indent', "Indent Line"),
             alias: 'Indent Line',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -454,7 +454,7 @@ class OutdentLinesAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.outdentLines',
-            label: nls.localize('lines.outdent', "Outdent Line"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.outdent', "Outdent Line"),
             alias: 'Outdent Line',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -472,7 +472,7 @@ export class InsertLineBeforeAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.insertLineBefore',
-            label: nls.localize('lines.insertBefore', "Insert Line Above"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.insertBefore', "Insert Line Above"),
             alias: 'Insert Line Above',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -495,7 +495,7 @@ export class InsertLineAfterAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.insertLineAfter',
-            label: nls.localize('lines.insertAfter', "Insert Line Below"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.insertAfter', "Insert Line Below"),
             alias: 'Insert Line Below',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -547,7 +547,7 @@ export class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {
     constructor() {
         super({
             id: 'deleteAllLeft',
-            label: nls.localize('lines.deleteAllLeft', "Delete All Left"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.deleteAllLeft', "Delete All Left"),
             alias: 'Delete All Left',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -617,7 +617,7 @@ export class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {
     constructor() {
         super({
             id: 'deleteAllRight',
-            label: nls.localize('lines.deleteAllRight', "Delete All Right"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.deleteAllRight', "Delete All Right"),
             alias: 'Delete All Right',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -675,7 +675,7 @@ export class JoinLinesAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.joinLines',
-            label: nls.localize('lines.joinLines', "Join Lines"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'lines.joinLines', "Join Lines"),
             alias: 'Join Lines',
             precondition: EditorContextKeys.writable,
             kbOpts: {
@@ -817,7 +817,7 @@ export class TransposeAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.transpose',
-            label: nls.localize('editor.transpose', "Transpose Characters around the Cursor"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'editor.transpose', "Transpose Characters around the Cursor"),
             alias: 'Transpose Characters around the Cursor',
             precondition: EditorContextKeys.writable
         });
@@ -897,7 +897,7 @@ export class UpperCaseAction extends AbstractCaseAction {
     constructor() {
         super({
             id: 'editor.action.transformToUppercase',
-            label: nls.localize('editor.transformToUppercase', "Transform to Uppercase"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'editor.transformToUppercase', "Transform to Uppercase"),
             alias: 'Transform to Uppercase',
             precondition: EditorContextKeys.writable
         });
@@ -910,7 +910,7 @@ export class LowerCaseAction extends AbstractCaseAction {
     constructor() {
         super({
             id: 'editor.action.transformToLowercase',
-            label: nls.localize('editor.transformToLowercase', "Transform to Lowercase"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'editor.transformToLowercase', "Transform to Lowercase"),
             alias: 'Transform to Lowercase',
             precondition: EditorContextKeys.writable
         });
@@ -947,7 +947,7 @@ export class TitleCaseAction extends AbstractCaseAction {
     constructor() {
         super({
             id: 'editor.action.transformToTitlecase',
-            label: nls.localize('editor.transformToTitlecase', "Transform to Title Case"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'editor.transformToTitlecase', "Transform to Title Case"),
             alias: 'Transform to Title Case',
             precondition: EditorContextKeys.writable
         });
@@ -969,7 +969,7 @@ export class SnakeCaseAction extends AbstractCaseAction {
     constructor() {
         super({
             id: 'editor.action.transformToSnakecase',
-            label: nls.localize('editor.transformToSnakecase', "Transform to Snake Case"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'editor.transformToSnakecase', "Transform to Snake Case"),
             alias: 'Transform to Snake Case',
             precondition: EditorContextKeys.writable
         });
@@ -992,7 +992,7 @@ export class CamelCaseAction extends AbstractCaseAction {
     constructor() {
         super({
             id: 'editor.action.transformToCamelcase',
-            label: nls.localize('editor.transformToCamelcase', "Transform to Camel Case"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'editor.transformToCamelcase', "Transform to Camel Case"),
             alias: 'Transform to Camel Case',
             precondition: EditorContextKeys.writable
         });
@@ -1015,7 +1015,7 @@ export class PascalCaseAction extends AbstractCaseAction {
     constructor() {
         super({
             id: 'editor.action.transformToPascalcase',
-            label: nls.localize('editor.transformToPascalcase', "Transform to Pascal Case"),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'editor.transformToPascalcase', "Transform to Pascal Case"),
             alias: 'Transform to Pascal Case',
             precondition: EditorContextKeys.writable
         });
@@ -1048,7 +1048,7 @@ export class KebabCaseAction extends AbstractCaseAction {
     constructor() {
         super({
             id: 'editor.action.transformToKebabcase',
-            label: nls.localize('editor.transformToKebabcase', 'Transform to Kebab Case'),
+            label: nls.localize('vs/editor/contrib/linesOperations/browser/linesOperations', 'editor.transformToKebabcase', 'Transform to Kebab Case'),
             alias: 'Transform to Kebab Case',
             precondition: EditorContextKeys.writable
         });
diff --git a/esm/vs/editor/contrib/linkedEditing/browser/linkedEditing.js b/esm/vs/editor/contrib/linkedEditing/browser/linkedEditing.js
index 62b4ecbc4018d474191bc76344f6334752d0ea77..7e330bd2d32b5713f869575409fa620bbb600eb8 100644
--- a/esm/vs/editor/contrib/linkedEditing/browser/linkedEditing.js
+++ b/esm/vs/editor/contrib/linkedEditing/browser/linkedEditing.js
@@ -292,7 +292,7 @@ export class LinkedEditingAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.linkedEditing',
-            label: nls.localize('linkedEditing.label', "Start Linked Editing"),
+            label: nls.localize('vs/editor/contrib/linkedEditing/browser/linkedEditing', 'linkedEditing.label', "Start Linked Editing"),
             alias: 'Start Linked Editing',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasRenameProvider),
             kbOpts: {
@@ -354,7 +354,7 @@ function getLinkedEditingRanges(providers, model, position, token) {
         }
     }), result => !!result && arrays.isNonEmptyArray(result?.ranges));
 }
-export const editorLinkedEditingBackground = registerColor('editor.linkedEditingBackground', { dark: Color.fromHex('#f00').transparent(0.3), light: Color.fromHex('#f00').transparent(0.3), hcDark: Color.fromHex('#f00').transparent(0.3), hcLight: Color.white }, nls.localize('editorLinkedEditingBackground', 'Background color when the editor auto renames on type.'));
+export const editorLinkedEditingBackground = registerColor('editor.linkedEditingBackground', { dark: Color.fromHex('#f00').transparent(0.3), light: Color.fromHex('#f00').transparent(0.3), hcDark: Color.fromHex('#f00').transparent(0.3), hcLight: Color.white }, nls.localize('vs/editor/contrib/linkedEditing/browser/linkedEditing', 'editorLinkedEditingBackground', 'Background color when the editor auto renames on type.'));
 registerModelAndPositionCommand('_executeLinkedEditingProvider', (_accessor, model, position) => {
     const { linkedEditingRangeProvider } = _accessor.get(ILanguageFeaturesService);
     return getLinkedEditingRanges(linkedEditingRangeProvider, model, position, CancellationToken.None);
diff --git a/esm/vs/editor/contrib/links/browser/links.js b/esm/vs/editor/contrib/links/browser/links.js
index 63d8135333095215f8f5e0b38ccdd7ad5942aa24..ce7d8c07add6551846cffde957a3736079d7a078 100644
--- a/esm/vs/editor/contrib/links/browser/links.js
+++ b/esm/vs/editor/contrib/links/browser/links.js
@@ -220,10 +220,10 @@ let LinkDetector = class LinkDetector extends Disposable {
             const messageOrError = err instanceof Error ? err.message : err;
             // different error cases
             if (messageOrError === 'invalid') {
-                this.notificationService.warn(nls.localize('invalid.url', 'Failed to open this link because it is not well-formed: {0}', link.url.toString()));
+                this.notificationService.warn(nls.localize('vs/editor/contrib/links/browser/links', 'invalid.url', 'Failed to open this link because it is not well-formed: {0}', link.url.toString()));
             }
             else if (messageOrError === 'missing') {
-                this.notificationService.warn(nls.localize('missing.url', 'Failed to open this link because its target is missing.'));
+                this.notificationService.warn(nls.localize('vs/editor/contrib/links/browser/links', 'missing.url', 'Failed to open this link because its target is missing.'));
             }
             else {
                 onUnexpectedError(err);
@@ -317,15 +317,15 @@ function getHoverMessage(link, useMetaKey) {
     const label = link.tooltip
         ? link.tooltip
         : executeCmd
-            ? nls.localize('links.navigate.executeCmd', 'Execute command')
-            : nls.localize('links.navigate.follow', 'Follow link');
+            ? nls.localize('vs/editor/contrib/links/browser/links', 'links.navigate.executeCmd', 'Execute command')
+            : nls.localize('vs/editor/contrib/links/browser/links', 'links.navigate.follow', 'Follow link');
     const kb = useMetaKey
         ? platform.isMacintosh
-            ? nls.localize('links.navigate.kb.meta.mac', "cmd + click")
-            : nls.localize('links.navigate.kb.meta', "ctrl + click")
+            ? nls.localize('vs/editor/contrib/links/browser/links', 'links.navigate.kb.meta.mac', "cmd + click")
+            : nls.localize('vs/editor/contrib/links/browser/links', 'links.navigate.kb.meta', "ctrl + click")
         : platform.isMacintosh
-            ? nls.localize('links.navigate.kb.alt.mac', "option + click")
-            : nls.localize('links.navigate.kb.alt', "alt + click");
+            ? nls.localize('vs/editor/contrib/links/browser/links', 'links.navigate.kb.alt.mac', "option + click")
+            : nls.localize('vs/editor/contrib/links/browser/links', 'links.navigate.kb.alt', "alt + click");
     if (link.url) {
         let nativeLabel = '';
         if (/^command:/i.test(link.url.toString())) {
@@ -333,7 +333,7 @@ function getHoverMessage(link, useMetaKey) {
             const match = link.url.toString().match(/^command:([^?#]+)/);
             if (match) {
                 const commandId = match[1];
-                nativeLabel = nls.localize('tooltip.explanation', "Execute command {0}", commandId);
+                nativeLabel = nls.localize('vs/editor/contrib/links/browser/links', 'tooltip.explanation', "Execute command {0}", commandId);
             }
         }
         const hoverMessage = new MarkdownString('', true)
@@ -349,7 +349,7 @@ class OpenLinkAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.openLink',
-            label: nls.localize('label', "Open Link"),
+            label: nls.localize('vs/editor/contrib/links/browser/links', 'label', "Open Link"),
             alias: 'Open Link',
             precondition: undefined
         });
diff --git a/esm/vs/editor/contrib/message/browser/messageController.js b/esm/vs/editor/contrib/message/browser/messageController.js
index 8f861620c5ed90cad081e2042821ff0c86b9f31d..efee90e106a4e8c5f3a37ca99bdcccb01c024699 100644
--- a/esm/vs/editor/contrib/message/browser/messageController.js
+++ b/esm/vs/editor/contrib/message/browser/messageController.js
@@ -28,7 +28,7 @@ import * as dom from '../../../../base/browser/dom.js';
 let MessageController = class MessageController {
     static { MessageController_1 = this; }
     static { this.ID = 'editor.contrib.messageController'; }
-    static { this.MESSAGE_VISIBLE = new RawContextKey('messageVisible', false, nls.localize('messageVisible', 'Whether the editor is currently showing an inline message')); }
+    static { this.MESSAGE_VISIBLE = new RawContextKey('messageVisible', false, nls.localize('vs/editor/contrib/message/browser/messageController', 'messageVisible', 'Whether the editor is currently showing an inline message')); }
     static get(editor) {
         return editor.getContribution(MessageController_1.ID);
     }
diff --git a/esm/vs/editor/contrib/multicursor/browser/multicursor.js b/esm/vs/editor/contrib/multicursor/browser/multicursor.js
index 681c357c80574e7b1dd1410ed5c6df1fbf4aff55..ebe8625a1e790902e3e66002c268bd9064389ab8 100644
--- a/esm/vs/editor/contrib/multicursor/browser/multicursor.js
+++ b/esm/vs/editor/contrib/multicursor/browser/multicursor.js
@@ -32,7 +32,7 @@ function announceCursorChange(previousCursorState, cursorState) {
     const cursorDiff = cursorState.filter(cs => !previousCursorState.find(pcs => pcs.equals(cs)));
     if (cursorDiff.length >= 1) {
         const cursorPositions = cursorDiff.map(cs => `line ${cs.viewState.position.lineNumber} column ${cs.viewState.position.column}`).join(', ');
-        const msg = cursorDiff.length === 1 ? nls.localize('cursorAdded', "Cursor added: {0}", cursorPositions) : nls.localize('cursorsAdded', "Cursors added: {0}", cursorPositions);
+        const msg = cursorDiff.length === 1 ? nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'cursorAdded', "Cursor added: {0}", cursorPositions) : nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'cursorsAdded', "Cursors added: {0}", cursorPositions);
         status(msg);
     }
 }
@@ -40,7 +40,7 @@ export class InsertCursorAbove extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.insertCursorAbove',
-            label: nls.localize('mutlicursor.insertAbove', "Add Cursor Above"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'mutlicursor.insertAbove', "Add Cursor Above"),
             alias: 'Add Cursor Above',
             precondition: undefined,
             kbOpts: {
@@ -55,7 +55,7 @@ export class InsertCursorAbove extends EditorAction {
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '3_multi',
-                title: nls.localize({ key: 'miInsertCursorAbove', comment: ['&& denotes a mnemonic'] }, "&&Add Cursor Above"),
+                title: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', { key: 'miInsertCursorAbove', comment: ['&& denotes a mnemonic'] }, "&&Add Cursor Above"),
                 order: 2
             }
         });
@@ -83,7 +83,7 @@ export class InsertCursorBelow extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.insertCursorBelow',
-            label: nls.localize('mutlicursor.insertBelow', "Add Cursor Below"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'mutlicursor.insertBelow', "Add Cursor Below"),
             alias: 'Add Cursor Below',
             precondition: undefined,
             kbOpts: {
@@ -98,7 +98,7 @@ export class InsertCursorBelow extends EditorAction {
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '3_multi',
-                title: nls.localize({ key: 'miInsertCursorBelow', comment: ['&& denotes a mnemonic'] }, "A&&dd Cursor Below"),
+                title: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', { key: 'miInsertCursorBelow', comment: ['&& denotes a mnemonic'] }, "A&&dd Cursor Below"),
                 order: 3
             }
         });
@@ -126,7 +126,7 @@ class InsertCursorAtEndOfEachLineSelected extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.insertCursorAtEndOfEachLineSelected',
-            label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', "Add Cursors to Line Ends"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'mutlicursor.insertAtEndOfEachLineSelected', "Add Cursors to Line Ends"),
             alias: 'Add Cursors to Line Ends',
             precondition: undefined,
             kbOpts: {
@@ -137,7 +137,7 @@ class InsertCursorAtEndOfEachLineSelected extends EditorAction {
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '3_multi',
-                title: nls.localize({ key: 'miInsertCursorAtEndOfEachLineSelected', comment: ['&& denotes a mnemonic'] }, "Add C&&ursors to Line Ends"),
+                title: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', { key: 'miInsertCursorAtEndOfEachLineSelected', comment: ['&& denotes a mnemonic'] }, "Add C&&ursors to Line Ends"),
                 order: 4
             }
         });
@@ -174,7 +174,7 @@ class InsertCursorAtEndOfLineSelected extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.addCursorsToBottom',
-            label: nls.localize('mutlicursor.addCursorsToBottom', "Add Cursors To Bottom"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'mutlicursor.addCursorsToBottom', "Add Cursors To Bottom"),
             alias: 'Add Cursors To Bottom',
             precondition: undefined
         });
@@ -201,7 +201,7 @@ class InsertCursorAtTopOfLineSelected extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.addCursorsToTop',
-            label: nls.localize('mutlicursor.addCursorsToTop', "Add Cursors To Top"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'mutlicursor.addCursorsToTop', "Add Cursors To Top"),
             alias: 'Add Cursors To Top',
             precondition: undefined
         });
@@ -579,7 +579,7 @@ export class AddSelectionToNextFindMatchAction extends MultiCursorSelectionContr
     constructor() {
         super({
             id: 'editor.action.addSelectionToNextFindMatch',
-            label: nls.localize('addSelectionToNextFindMatch', "Add Selection To Next Find Match"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'addSelectionToNextFindMatch', "Add Selection To Next Find Match"),
             alias: 'Add Selection To Next Find Match',
             precondition: undefined,
             kbOpts: {
@@ -590,7 +590,7 @@ export class AddSelectionToNextFindMatchAction extends MultiCursorSelectionContr
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '3_multi',
-                title: nls.localize({ key: 'miAddSelectionToNextFindMatch', comment: ['&& denotes a mnemonic'] }, "Add &&Next Occurrence"),
+                title: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', { key: 'miAddSelectionToNextFindMatch', comment: ['&& denotes a mnemonic'] }, "Add &&Next Occurrence"),
                 order: 5
             }
         });
@@ -603,13 +603,13 @@ export class AddSelectionToPreviousFindMatchAction extends MultiCursorSelectionC
     constructor() {
         super({
             id: 'editor.action.addSelectionToPreviousFindMatch',
-            label: nls.localize('addSelectionToPreviousFindMatch', "Add Selection To Previous Find Match"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'addSelectionToPreviousFindMatch', "Add Selection To Previous Find Match"),
             alias: 'Add Selection To Previous Find Match',
             precondition: undefined,
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '3_multi',
-                title: nls.localize({ key: 'miAddSelectionToPreviousFindMatch', comment: ['&& denotes a mnemonic'] }, "Add P&&revious Occurrence"),
+                title: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', { key: 'miAddSelectionToPreviousFindMatch', comment: ['&& denotes a mnemonic'] }, "Add P&&revious Occurrence"),
                 order: 6
             }
         });
@@ -622,7 +622,7 @@ export class MoveSelectionToNextFindMatchAction extends MultiCursorSelectionCont
     constructor() {
         super({
             id: 'editor.action.moveSelectionToNextFindMatch',
-            label: nls.localize('moveSelectionToNextFindMatch', "Move Last Selection To Next Find Match"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'moveSelectionToNextFindMatch', "Move Last Selection To Next Find Match"),
             alias: 'Move Last Selection To Next Find Match',
             precondition: undefined,
             kbOpts: {
@@ -640,7 +640,7 @@ export class MoveSelectionToPreviousFindMatchAction extends MultiCursorSelection
     constructor() {
         super({
             id: 'editor.action.moveSelectionToPreviousFindMatch',
-            label: nls.localize('moveSelectionToPreviousFindMatch', "Move Last Selection To Previous Find Match"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'moveSelectionToPreviousFindMatch', "Move Last Selection To Previous Find Match"),
             alias: 'Move Last Selection To Previous Find Match',
             precondition: undefined
         });
@@ -653,7 +653,7 @@ export class SelectHighlightsAction extends MultiCursorSelectionControllerAction
     constructor() {
         super({
             id: 'editor.action.selectHighlights',
-            label: nls.localize('selectAllOccurrencesOfFindMatch', "Select All Occurrences of Find Match"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'selectAllOccurrencesOfFindMatch', "Select All Occurrences of Find Match"),
             alias: 'Select All Occurrences of Find Match',
             precondition: undefined,
             kbOpts: {
@@ -664,7 +664,7 @@ export class SelectHighlightsAction extends MultiCursorSelectionControllerAction
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '3_multi',
-                title: nls.localize({ key: 'miSelectHighlights', comment: ['&& denotes a mnemonic'] }, "Select All &&Occurrences"),
+                title: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', { key: 'miSelectHighlights', comment: ['&& denotes a mnemonic'] }, "Select All &&Occurrences"),
                 order: 7
             }
         });
@@ -677,7 +677,7 @@ export class CompatChangeAll extends MultiCursorSelectionControllerAction {
     constructor() {
         super({
             id: 'editor.action.changeAll',
-            label: nls.localize('changeAll.label', "Change All Occurrences"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'changeAll.label', "Change All Occurrences"),
             alias: 'Change All Occurrences',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.editorTextFocus),
             kbOpts: {
@@ -930,9 +930,9 @@ export class FocusNextCursor extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.focusNextCursor',
-            label: nls.localize('mutlicursor.focusNextCursor', "Focus Next Cursor"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'mutlicursor.focusNextCursor', "Focus Next Cursor"),
             metadata: {
-                description: nls.localize('mutlicursor.focusNextCursor.description', "Focuses the next cursor"),
+                description: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'mutlicursor.focusNextCursor.description', "Focuses the next cursor"),
                 args: [],
             },
             alias: 'Focus Next Cursor',
@@ -963,9 +963,9 @@ export class FocusPreviousCursor extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.focusPreviousCursor',
-            label: nls.localize('mutlicursor.focusPreviousCursor', "Focus Previous Cursor"),
+            label: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'mutlicursor.focusPreviousCursor', "Focus Previous Cursor"),
             metadata: {
-                description: nls.localize('mutlicursor.focusPreviousCursor.description', "Focuses the previous cursor"),
+                description: nls.localize('vs/editor/contrib/multicursor/browser/multicursor', 'mutlicursor.focusPreviousCursor.description', "Focuses the previous cursor"),
                 args: [],
             },
             alias: 'Focus Previous Cursor',
diff --git a/esm/vs/editor/contrib/parameterHints/browser/parameterHints.js b/esm/vs/editor/contrib/parameterHints/browser/parameterHints.js
index f7108368897309e94b7e72f7261b291a463c4040..58833f9fff9d9cc2d294e6e7cdb56e0e3fa4d94b 100644
--- a/esm/vs/editor/contrib/parameterHints/browser/parameterHints.js
+++ b/esm/vs/editor/contrib/parameterHints/browser/parameterHints.js
@@ -67,7 +67,7 @@ export class TriggerParameterHintsAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.triggerParameterHints',
-            label: nls.localize('parameterHints.trigger.label', "Trigger Parameter Hints"),
+            label: nls.localize('vs/editor/contrib/parameterHints/browser/parameterHints', 'parameterHints.trigger.label', "Trigger Parameter Hints"),
             alias: 'Trigger Parameter Hints',
             precondition: EditorContextKeys.hasSignatureHelpProvider,
             kbOpts: {
diff --git a/esm/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.js b/esm/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.js
index aa1fd6127061695d1200456e9d242f28d86d3a14..adf998689898263f211648d33df0eb799782bbbe 100644
--- a/esm/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.js
+++ b/esm/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.js
@@ -34,8 +34,8 @@ import { ThemeIcon } from '../../../../base/common/themables.js';
 import { StopWatch } from '../../../../base/common/stopwatch.js';
 import { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';
 const $ = dom.$;
-const parameterHintsNextIcon = registerIcon('parameter-hints-next', Codicon.chevronDown, nls.localize('parameterHintsNextIcon', 'Icon for show next parameter hint.'));
-const parameterHintsPreviousIcon = registerIcon('parameter-hints-previous', Codicon.chevronUp, nls.localize('parameterHintsPreviousIcon', 'Icon for show previous parameter hint.'));
+const parameterHintsNextIcon = registerIcon('parameter-hints-next', Codicon.chevronDown, nls.localize('vs/editor/contrib/parameterHints/browser/parameterHintsWidget', 'parameterHintsNextIcon', 'Icon for show next parameter hint.'));
+const parameterHintsPreviousIcon = registerIcon('parameter-hints-previous', Codicon.chevronUp, nls.localize('vs/editor/contrib/parameterHints/browser/parameterHintsWidget', 'parameterHintsPreviousIcon', 'Icon for show previous parameter hint.'));
 let ParameterHintsWidget = class ParameterHintsWidget extends Disposable {
     static { ParameterHintsWidget_1 = this; }
     static { this.ID = 'editor.widget.parameterHintsWidget'; }
@@ -211,7 +211,7 @@ let ParameterHintsWidget = class ParameterHintsWidget extends Disposable {
             // Select method gets called on every user type while parameter hints are visible.
             // We do not want to spam the user with same announcements, so we only announce if the current parameter changed.
             if (this.announcedLabel !== labelToAnnounce) {
-                aria.alert(nls.localize('hint', "{0}, hint", labelToAnnounce));
+                aria.alert(nls.localize('vs/editor/contrib/parameterHints/browser/parameterHintsWidget', 'hint', "{0}, hint", labelToAnnounce));
                 this.announcedLabel = labelToAnnounce;
             }
         }
@@ -317,4 +317,4 @@ ParameterHintsWidget = ParameterHintsWidget_1 = __decorate([
     __param(5, ITelemetryService)
 ], ParameterHintsWidget);
 export { ParameterHintsWidget };
-registerColor('editorHoverWidget.highlightForeground', listHighlightForeground, nls.localize('editorHoverWidgetHighlightForeground', 'Foreground color of the active item in the parameter hint.'));
+registerColor('editorHoverWidget.highlightForeground', listHighlightForeground, nls.localize('vs/editor/contrib/parameterHints/browser/parameterHintsWidget', 'editorHoverWidgetHighlightForeground', 'Foreground color of the active item in the parameter hint.'));
diff --git a/esm/vs/editor/contrib/peekView/browser/peekView.js b/esm/vs/editor/contrib/peekView/browser/peekView.js
index 1a0f17e0c9fcdb2d6e70a1668ba98fdd6183e956..5b440995d40ac3d2aed0e25fecbdd93430356aa0 100644
--- a/esm/vs/editor/contrib/peekView/browser/peekView.js
+++ b/esm/vs/editor/contrib/peekView/browser/peekView.js
@@ -53,7 +53,7 @@ registerSingleton(IPeekViewService, class {
 }, 1 /* InstantiationType.Delayed */);
 export var PeekContext;
 (function (PeekContext) {
-    PeekContext.inPeekEditor = new RawContextKey('inReferenceSearchEditor', true, nls.localize('inReferenceSearchEditor', "Whether the current code editor is embedded inside peek"));
+    PeekContext.inPeekEditor = new RawContextKey('inReferenceSearchEditor', true, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'inReferenceSearchEditor', "Whether the current code editor is embedded inside peek"));
     PeekContext.notInPeekEditor = PeekContext.inPeekEditor.toNegated();
 })(PeekContext || (PeekContext = {}));
 let PeekContextController = class PeekContextController {
@@ -152,7 +152,7 @@ let PeekViewWidget = class PeekViewWidget extends ZoneWidget {
         this._actionbarWidget = new ActionBar(actionsContainer, actionBarOptions);
         this._disposables.add(this._actionbarWidget);
         if (!noCloseAction) {
-            this._actionbarWidget.push(new Action('peekview.close', nls.localize('label.close', "Close"), ThemeIcon.asClassName(Codicon.close), true, () => {
+            this._actionbarWidget.push(new Action('peekview.close', nls.localize('vs/editor/contrib/peekView/browser/peekView', 'label.close', "Close"), ThemeIcon.asClassName(Codicon.close), true, () => {
                 this.dispose();
                 return Promise.resolve();
             }), { label: false, icon: true });
@@ -219,18 +219,18 @@ PeekViewWidget = __decorate([
     __param(2, IInstantiationService)
 ], PeekViewWidget);
 export { PeekViewWidget };
-export const peekViewTitleBackground = registerColor('peekViewTitle.background', { dark: '#252526', light: '#F3F3F3', hcDark: Color.black, hcLight: Color.white }, nls.localize('peekViewTitleBackground', 'Background color of the peek view title area.'));
-export const peekViewTitleForeground = registerColor('peekViewTitleLabel.foreground', { dark: Color.white, light: Color.black, hcDark: Color.white, hcLight: editorForeground }, nls.localize('peekViewTitleForeground', 'Color of the peek view title.'));
-export const peekViewTitleInfoForeground = registerColor('peekViewTitleDescription.foreground', { dark: '#ccccccb3', light: '#616161', hcDark: '#FFFFFF99', hcLight: '#292929' }, nls.localize('peekViewTitleInfoForeground', 'Color of the peek view title info.'));
-export const peekViewBorder = registerColor('peekView.border', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('peekViewBorder', 'Color of the peek view borders and arrow.'));
-export const peekViewResultsBackground = registerColor('peekViewResult.background', { dark: '#252526', light: '#F3F3F3', hcDark: Color.black, hcLight: Color.white }, nls.localize('peekViewResultsBackground', 'Background color of the peek view result list.'));
-export const peekViewResultsMatchForeground = registerColor('peekViewResult.lineForeground', { dark: '#bbbbbb', light: '#646465', hcDark: Color.white, hcLight: editorForeground }, nls.localize('peekViewResultsMatchForeground', 'Foreground color for line nodes in the peek view result list.'));
-export const peekViewResultsFileForeground = registerColor('peekViewResult.fileForeground', { dark: Color.white, light: '#1E1E1E', hcDark: Color.white, hcLight: editorForeground }, nls.localize('peekViewResultsFileForeground', 'Foreground color for file nodes in the peek view result list.'));
-export const peekViewResultsSelectionBackground = registerColor('peekViewResult.selectionBackground', { dark: '#3399ff33', light: '#3399ff33', hcDark: null, hcLight: null }, nls.localize('peekViewResultsSelectionBackground', 'Background color of the selected entry in the peek view result list.'));
-export const peekViewResultsSelectionForeground = registerColor('peekViewResult.selectionForeground', { dark: Color.white, light: '#6C6C6C', hcDark: Color.white, hcLight: editorForeground }, nls.localize('peekViewResultsSelectionForeground', 'Foreground color of the selected entry in the peek view result list.'));
-export const peekViewEditorBackground = registerColor('peekViewEditor.background', { dark: '#001F33', light: '#F2F8FC', hcDark: Color.black, hcLight: Color.white }, nls.localize('peekViewEditorBackground', 'Background color of the peek view editor.'));
-export const peekViewEditorGutterBackground = registerColor('peekViewEditorGutter.background', peekViewEditorBackground, nls.localize('peekViewEditorGutterBackground', 'Background color of the gutter in the peek view editor.'));
-export const peekViewEditorStickyScrollBackground = registerColor('peekViewEditorStickyScroll.background', peekViewEditorBackground, nls.localize('peekViewEditorStickScrollBackground', 'Background color of sticky scroll in the peek view editor.'));
-export const peekViewResultsMatchHighlight = registerColor('peekViewResult.matchHighlightBackground', { dark: '#ea5c004d', light: '#ea5c004d', hcDark: null, hcLight: null }, nls.localize('peekViewResultsMatchHighlight', 'Match highlight color in the peek view result list.'));
-export const peekViewEditorMatchHighlight = registerColor('peekViewEditor.matchHighlightBackground', { dark: '#ff8f0099', light: '#f5d802de', hcDark: null, hcLight: null }, nls.localize('peekViewEditorMatchHighlight', 'Match highlight color in the peek view editor.'));
-export const peekViewEditorMatchHighlightBorder = registerColor('peekViewEditor.matchHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('peekViewEditorMatchHighlightBorder', 'Match highlight border in the peek view editor.'));
+export const peekViewTitleBackground = registerColor('peekViewTitle.background', { dark: '#252526', light: '#F3F3F3', hcDark: Color.black, hcLight: Color.white }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewTitleBackground', 'Background color of the peek view title area.'));
+export const peekViewTitleForeground = registerColor('peekViewTitleLabel.foreground', { dark: Color.white, light: Color.black, hcDark: Color.white, hcLight: editorForeground }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewTitleForeground', 'Color of the peek view title.'));
+export const peekViewTitleInfoForeground = registerColor('peekViewTitleDescription.foreground', { dark: '#ccccccb3', light: '#616161', hcDark: '#FFFFFF99', hcLight: '#292929' }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewTitleInfoForeground', 'Color of the peek view title info.'));
+export const peekViewBorder = registerColor('peekView.border', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewBorder', 'Color of the peek view borders and arrow.'));
+export const peekViewResultsBackground = registerColor('peekViewResult.background', { dark: '#252526', light: '#F3F3F3', hcDark: Color.black, hcLight: Color.white }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewResultsBackground', 'Background color of the peek view result list.'));
+export const peekViewResultsMatchForeground = registerColor('peekViewResult.lineForeground', { dark: '#bbbbbb', light: '#646465', hcDark: Color.white, hcLight: editorForeground }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewResultsMatchForeground', 'Foreground color for line nodes in the peek view result list.'));
+export const peekViewResultsFileForeground = registerColor('peekViewResult.fileForeground', { dark: Color.white, light: '#1E1E1E', hcDark: Color.white, hcLight: editorForeground }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewResultsFileForeground', 'Foreground color for file nodes in the peek view result list.'));
+export const peekViewResultsSelectionBackground = registerColor('peekViewResult.selectionBackground', { dark: '#3399ff33', light: '#3399ff33', hcDark: null, hcLight: null }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewResultsSelectionBackground', 'Background color of the selected entry in the peek view result list.'));
+export const peekViewResultsSelectionForeground = registerColor('peekViewResult.selectionForeground', { dark: Color.white, light: '#6C6C6C', hcDark: Color.white, hcLight: editorForeground }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewResultsSelectionForeground', 'Foreground color of the selected entry in the peek view result list.'));
+export const peekViewEditorBackground = registerColor('peekViewEditor.background', { dark: '#001F33', light: '#F2F8FC', hcDark: Color.black, hcLight: Color.white }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewEditorBackground', 'Background color of the peek view editor.'));
+export const peekViewEditorGutterBackground = registerColor('peekViewEditorGutter.background', peekViewEditorBackground, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewEditorGutterBackground', 'Background color of the gutter in the peek view editor.'));
+export const peekViewEditorStickyScrollBackground = registerColor('peekViewEditorStickyScroll.background', peekViewEditorBackground, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewEditorStickScrollBackground', 'Background color of sticky scroll in the peek view editor.'));
+export const peekViewResultsMatchHighlight = registerColor('peekViewResult.matchHighlightBackground', { dark: '#ea5c004d', light: '#ea5c004d', hcDark: null, hcLight: null }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewResultsMatchHighlight', 'Match highlight color in the peek view result list.'));
+export const peekViewEditorMatchHighlight = registerColor('peekViewEditor.matchHighlightBackground', { dark: '#ff8f0099', light: '#f5d802de', hcDark: null, hcLight: null }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewEditorMatchHighlight', 'Match highlight color in the peek view editor.'));
+export const peekViewEditorMatchHighlightBorder = registerColor('peekViewEditor.matchHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/editor/contrib/peekView/browser/peekView', 'peekViewEditorMatchHighlightBorder', 'Match highlight border in the peek view editor.'));
diff --git a/esm/vs/editor/contrib/placeholderText/browser/placeholderText.contribution.js b/esm/vs/editor/contrib/placeholderText/browser/placeholderText.contribution.js
index 52e10c858ec635a29dd319a22ec445e03129650f..9a523b7f87e06fe61a474c8a4bd26ffd63d70783 100644
--- a/esm/vs/editor/contrib/placeholderText/browser/placeholderText.contribution.js
+++ b/esm/vs/editor/contrib/placeholderText/browser/placeholderText.contribution.js
@@ -10,4 +10,4 @@ import { registerColor } from '../../../../platform/theme/common/colorUtils.js';
 import { PlaceholderTextContribution } from './placeholderTextContribution.js';
 import { wrapInReloadableClass1 } from '../../../../platform/observable/common/wrapInReloadableClass.js';
 registerEditorContribution(PlaceholderTextContribution.ID, wrapInReloadableClass1(() => PlaceholderTextContribution), 0 /* EditorContributionInstantiation.Eager */);
-registerColor('editor.placeholder.foreground', ghostTextForeground, localize('placeholderForeground', 'Foreground color of the placeholder text in the editor.'));
+registerColor('editor.placeholder.foreground', ghostTextForeground, localize('vs/editor/contrib/placeholderText/browser/placeholderText.contribution', 'placeholderForeground', 'Foreground color of the placeholder text in the editor.'));
diff --git a/esm/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.js b/esm/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.js
index deaa01258a099b423004e445991f41e3b75e2dfd..8023121c79229a5d4d4b7b9a24a352077943fdbd 100644
--- a/esm/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.js
+++ b/esm/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.js
@@ -12,7 +12,7 @@ export class AbstractGotoLineQuickAccessProvider extends AbstractEditorNavigatio
         super({ canAcceptInBackground: true });
     }
     provideWithoutTextEditor(picker) {
-        const label = localize('cannotRunGotoLine', "Open a text editor first to go to a line.");
+        const label = localize('vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess', 'cannotRunGotoLine', "Open a text editor first to go to a line.");
         picker.items = [{ label }];
         picker.ariaLabel = label;
         return Disposable.None;
@@ -91,17 +91,17 @@ export class AbstractGotoLineQuickAccessProvider extends AbstractEditorNavigatio
         // Location valid: indicate this as picker label
         if (this.isValidLineNumber(editor, lineNumber)) {
             if (this.isValidColumn(editor, lineNumber, column)) {
-                return localize('gotoLineColumnLabel', "Go to line {0} and character {1}.", lineNumber, column);
+                return localize('vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess', 'gotoLineColumnLabel', "Go to line {0} and character {1}.", lineNumber, column);
             }
-            return localize('gotoLineLabel', "Go to line {0}.", lineNumber);
+            return localize('vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess', 'gotoLineLabel', "Go to line {0}.", lineNumber);
         }
         // Location invalid: show generic label
         const position = editor.getPosition() || { lineNumber: 1, column: 1 };
         const lineCount = this.lineCount(editor);
         if (lineCount > 1) {
-            return localize('gotoLineLabelEmptyWithLimit', "Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.", position.lineNumber, position.column, lineCount);
+            return localize('vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess', 'gotoLineLabelEmptyWithLimit', "Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.", position.lineNumber, position.column, lineCount);
         }
-        return localize('gotoLineLabelEmpty', "Current Line: {0}, Character: {1}. Type a line number to navigate to.", position.lineNumber, position.column);
+        return localize('vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess', 'gotoLineLabelEmpty', "Current Line: {0}, Character: {1}. Type a line number to navigate to.", position.lineNumber, position.column);
     }
     isValidLineNumber(editor, lineNumber) {
         if (!lineNumber || typeof lineNumber !== 'number') {
diff --git a/esm/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.js b/esm/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.js
index 45afb3ac5638e06421d049f3e09cd40228415155..ea9e161fae0d34530e9beffed95e516f8e2e4a32 100644
--- a/esm/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.js
+++ b/esm/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.js
@@ -39,7 +39,7 @@ let AbstractGotoSymbolQuickAccessProvider = class AbstractGotoSymbolQuickAccessP
         this.options.canAcceptInBackground = true;
     }
     provideWithoutTextEditor(picker) {
-        this.provideLabelPick(picker, localize('cannotRunGotoSymbolWithoutEditor', "To go to a symbol, first open a text editor with symbol information."));
+        this.provideLabelPick(picker, localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'cannotRunGotoSymbolWithoutEditor', "To go to a symbol, first open a text editor with symbol information."));
         return Disposable.None;
     }
     provideWithTextEditor(context, picker, token, runOptions) {
@@ -60,7 +60,7 @@ let AbstractGotoSymbolQuickAccessProvider = class AbstractGotoSymbolQuickAccessP
     doProvideWithoutEditorSymbols(context, model, picker, token) {
         const disposables = new DisposableStore();
         // Generic pick for not having any symbol information
-        this.provideLabelPick(picker, localize('cannotRunGotoSymbolWithoutSymbolProvider', "The active text editor does not provide symbol information."));
+        this.provideLabelPick(picker, localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'cannotRunGotoSymbolWithoutSymbolProvider', "The active text editor does not provide symbol information."));
         // Wait for changes to the registry and see if eventually
         // we do get symbols. This can happen if the picker is opened
         // very early after the model has loaded but before the
@@ -146,10 +146,10 @@ let AbstractGotoSymbolQuickAccessProvider = class AbstractGotoSymbolQuickAccessP
                 }
                 else {
                     if (query.original.length > 0) {
-                        this.provideLabelPick(picker, localize('noMatchingSymbolResults', "No matching editor symbols"));
+                        this.provideLabelPick(picker, localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'noMatchingSymbolResults', "No matching editor symbols"));
                     }
                     else {
-                        this.provideLabelPick(picker, localize('noSymbolResults', "No editor symbols"));
+                        this.provideLabelPick(picker, localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'noSymbolResults', "No editor symbols"));
                     }
                 }
             }
@@ -196,7 +196,7 @@ let AbstractGotoSymbolQuickAccessProvider = class AbstractGotoSymbolQuickAccessP
         if (openSideBySideDirection) {
             buttons = [{
                     iconClass: openSideBySideDirection === 'right' ? ThemeIcon.asClassName(Codicon.splitHorizontal) : ThemeIcon.asClassName(Codicon.splitVertical),
-                    tooltip: openSideBySideDirection === 'right' ? localize('openToSide', "Open to the Side") : localize('openToBottom', "Open to the Bottom")
+                    tooltip: openSideBySideDirection === 'right' ? localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'openToSide', "Open to the Side") : localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'openToBottom', "Open to the Bottom")
                 }];
         }
         const filteredSymbolPicks = [];
@@ -312,7 +312,7 @@ let AbstractGotoSymbolQuickAccessProvider = class AbstractGotoSymbolQuickAccessP
         }
         else if (sortedFilteredSymbolPicks.length > 0) {
             symbolPicks = [
-                { label: localize('symbols', "symbols ({0})", filteredSymbolPicks.length), type: 'separator' },
+                { label: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'symbols', "symbols ({0})", filteredSymbolPicks.length), type: 'separator' },
                 ...sortedFilteredSymbolPicks
             ];
         }
@@ -362,32 +362,32 @@ AbstractGotoSymbolQuickAccessProvider = AbstractGotoSymbolQuickAccessProvider_1
 ], AbstractGotoSymbolQuickAccessProvider);
 export { AbstractGotoSymbolQuickAccessProvider };
 // #region NLS Helpers
-const FALLBACK_NLS_SYMBOL_KIND = localize('property', "properties ({0})");
+const FALLBACK_NLS_SYMBOL_KIND = localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'property', "properties ({0})");
 const NLS_SYMBOL_KIND_CACHE = {
-    [5 /* SymbolKind.Method */]: localize('method', "methods ({0})"),
-    [11 /* SymbolKind.Function */]: localize('function', "functions ({0})"),
-    [8 /* SymbolKind.Constructor */]: localize('_constructor', "constructors ({0})"),
-    [12 /* SymbolKind.Variable */]: localize('variable', "variables ({0})"),
-    [4 /* SymbolKind.Class */]: localize('class', "classes ({0})"),
-    [22 /* SymbolKind.Struct */]: localize('struct', "structs ({0})"),
-    [23 /* SymbolKind.Event */]: localize('event', "events ({0})"),
-    [24 /* SymbolKind.Operator */]: localize('operator', "operators ({0})"),
-    [10 /* SymbolKind.Interface */]: localize('interface', "interfaces ({0})"),
-    [2 /* SymbolKind.Namespace */]: localize('namespace', "namespaces ({0})"),
-    [3 /* SymbolKind.Package */]: localize('package', "packages ({0})"),
-    [25 /* SymbolKind.TypeParameter */]: localize('typeParameter', "type parameters ({0})"),
-    [1 /* SymbolKind.Module */]: localize('modules', "modules ({0})"),
-    [6 /* SymbolKind.Property */]: localize('property', "properties ({0})"),
-    [9 /* SymbolKind.Enum */]: localize('enum', "enumerations ({0})"),
-    [21 /* SymbolKind.EnumMember */]: localize('enumMember', "enumeration members ({0})"),
-    [14 /* SymbolKind.String */]: localize('string', "strings ({0})"),
-    [0 /* SymbolKind.File */]: localize('file', "files ({0})"),
-    [17 /* SymbolKind.Array */]: localize('array', "arrays ({0})"),
-    [15 /* SymbolKind.Number */]: localize('number', "numbers ({0})"),
-    [16 /* SymbolKind.Boolean */]: localize('boolean', "booleans ({0})"),
-    [18 /* SymbolKind.Object */]: localize('object', "objects ({0})"),
-    [19 /* SymbolKind.Key */]: localize('key', "keys ({0})"),
-    [7 /* SymbolKind.Field */]: localize('field', "fields ({0})"),
-    [13 /* SymbolKind.Constant */]: localize('constant', "constants ({0})")
+    [5 /* SymbolKind.Method */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'method', "methods ({0})"),
+    [11 /* SymbolKind.Function */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'function', "functions ({0})"),
+    [8 /* SymbolKind.Constructor */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', '_constructor', "constructors ({0})"),
+    [12 /* SymbolKind.Variable */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'variable', "variables ({0})"),
+    [4 /* SymbolKind.Class */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'class', "classes ({0})"),
+    [22 /* SymbolKind.Struct */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'struct', "structs ({0})"),
+    [23 /* SymbolKind.Event */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'event', "events ({0})"),
+    [24 /* SymbolKind.Operator */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'operator', "operators ({0})"),
+    [10 /* SymbolKind.Interface */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'interface', "interfaces ({0})"),
+    [2 /* SymbolKind.Namespace */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'namespace', "namespaces ({0})"),
+    [3 /* SymbolKind.Package */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'package', "packages ({0})"),
+    [25 /* SymbolKind.TypeParameter */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'typeParameter', "type parameters ({0})"),
+    [1 /* SymbolKind.Module */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'modules', "modules ({0})"),
+    [6 /* SymbolKind.Property */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'property', "properties ({0})"),
+    [9 /* SymbolKind.Enum */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'enum', "enumerations ({0})"),
+    [21 /* SymbolKind.EnumMember */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'enumMember', "enumeration members ({0})"),
+    [14 /* SymbolKind.String */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'string', "strings ({0})"),
+    [0 /* SymbolKind.File */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'file', "files ({0})"),
+    [17 /* SymbolKind.Array */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'array', "arrays ({0})"),
+    [15 /* SymbolKind.Number */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'number', "numbers ({0})"),
+    [16 /* SymbolKind.Boolean */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'boolean', "booleans ({0})"),
+    [18 /* SymbolKind.Object */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'object', "objects ({0})"),
+    [19 /* SymbolKind.Key */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'key', "keys ({0})"),
+    [7 /* SymbolKind.Field */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'field', "fields ({0})"),
+    [13 /* SymbolKind.Constant */]: localize('vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess', 'constant', "constants ({0})")
 };
 //#endregion
diff --git a/esm/vs/editor/contrib/readOnlyMessage/browser/contribution.js b/esm/vs/editor/contrib/readOnlyMessage/browser/contribution.js
index f0a567f71e2e75eefdc31327874f6600b9de811a..2e5a352c1a60e5786b94f1053ae4450190b7fe51 100644
--- a/esm/vs/editor/contrib/readOnlyMessage/browser/contribution.js
+++ b/esm/vs/editor/contrib/readOnlyMessage/browser/contribution.js
@@ -20,10 +20,10 @@ export class ReadOnlyMessageController extends Disposable {
             let message = this.editor.getOptions().get(93 /* EditorOption.readOnlyMessage */);
             if (!message) {
                 if (this.editor.isSimpleWidget) {
-                    message = new MarkdownString(nls.localize('editor.simple.readonly', "Cannot edit in read-only input"));
+                    message = new MarkdownString(nls.localize('vs/editor/contrib/readOnlyMessage/browser/contribution', 'editor.simple.readonly', "Cannot edit in read-only input"));
                 }
                 else {
-                    message = new MarkdownString(nls.localize('editor.readonly', "Cannot edit in read-only editor"));
+                    message = new MarkdownString(nls.localize('vs/editor/contrib/readOnlyMessage/browser/contribution', 'editor.readonly', "Cannot edit in read-only editor"));
                 }
             }
             messageController.showMessage(message, this.editor.getPosition());
diff --git a/esm/vs/editor/contrib/rename/browser/rename.js b/esm/vs/editor/contrib/rename/browser/rename.js
index 6c017355ee896fc4947a83b2722bf89e62be2479..01c4a211c8734dfc060a46e57bb4711ff887d8ad 100644
--- a/esm/vs/editor/contrib/rename/browser/rename.js
+++ b/esm/vs/editor/contrib/rename/browser/rename.js
@@ -99,7 +99,7 @@ class RenameSkeleton {
         }
         const result = await provider.provideRenameEdits(this.model, this.position, newName, token);
         if (!result) {
-            return this._provideRenameEdits(newName, i + 1, rejects.concat(nls.localize('no result', "No result.")), token);
+            return this._provideRenameEdits(newName, i + 1, rejects.concat(nls.localize('vs/editor/contrib/rename/browser/rename', 'no result', "No result.")), token);
         }
         else if (result.rejectReason) {
             return this._provideRenameEdits(newName, i + 1, rejects.concat(result.rejectReason), token);
@@ -173,7 +173,7 @@ let RenameController = class RenameController {
             else {
                 trace('resolve rename location failed', e instanceof Error ? e : JSON.stringify(e, null, '\t'));
                 if (typeof e === 'string' || isMarkdownString(e)) {
-                    MessageController.get(this.editor)?.showMessage(e || nls.localize('resolveRenameLocationFailed', "An unknown error occurred while resolving rename location"), position);
+                    MessageController.get(this.editor)?.showMessage(e || nls.localize('vs/editor/contrib/rename/browser/rename', 'resolveRenameLocationFailed', "An unknown error occurred while resolving rename location"), position);
                 }
             }
             return undefined;
@@ -244,23 +244,23 @@ let RenameController = class RenameController {
             this._bulkEditService.apply(renameResult, {
                 editor: this.editor,
                 showPreview: inputFieldResult.wantsPreview,
-                label: nls.localize('label', "Renaming '{0}' to '{1}'", loc?.text, inputFieldResult.newName),
+                label: nls.localize('vs/editor/contrib/rename/browser/rename', 'label', "Renaming '{0}' to '{1}'", loc?.text, inputFieldResult.newName),
                 code: 'undoredo.rename',
-                quotableLabel: nls.localize('quotableLabel', "Renaming {0} to {1}", loc?.text, inputFieldResult.newName),
+                quotableLabel: nls.localize('vs/editor/contrib/rename/browser/rename', 'quotableLabel', "Renaming {0} to {1}", loc?.text, inputFieldResult.newName),
                 respectAutoSaveConfig: true
             }).then(result => {
                 trace('edits applied');
                 if (result.ariaSummary) {
-                    alert(nls.localize('aria', "Successfully renamed '{0}' to '{1}'. Summary: {2}", loc.text, inputFieldResult.newName, result.ariaSummary));
+                    alert(nls.localize('vs/editor/contrib/rename/browser/rename', 'aria', "Successfully renamed '{0}' to '{1}'. Summary: {2}", loc.text, inputFieldResult.newName, result.ariaSummary));
                 }
             }).catch(err => {
                 trace(`error when applying edits ${JSON.stringify(err, null, '\t')}`);
-                this._notificationService.error(nls.localize('rename.failedApply', "Rename failed to apply edits"));
+                this._notificationService.error(nls.localize('vs/editor/contrib/rename/browser/rename', 'rename.failedApply', "Rename failed to apply edits"));
                 this._logService.error(err);
             });
         }, err => {
             trace('error when providing rename edits', JSON.stringify(err, null, '\t'));
-            this._notificationService.error(nls.localize('rename.failed', "Rename failed to compute edits"));
+            this._notificationService.error(nls.localize('vs/editor/contrib/rename/browser/rename', 'rename.failed', "Rename failed to compute edits"));
             this._logService.error(err);
         }).finally(() => {
             cts2.dispose();
@@ -317,7 +317,7 @@ export class RenameAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.rename',
-            label: nls.localize('rename.label', "Rename Symbol"),
+            label: nls.localize('vs/editor/contrib/rename/browser/rename', 'rename.label', "Rename Symbol"),
             alias: 'Rename Symbol',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasRenameProvider),
             kbOpts: {
@@ -398,7 +398,7 @@ registerAction2(class FocusNextRenameSuggestion extends Action2 {
         super({
             id: 'focusNextRenameSuggestion',
             title: {
-                ...nls.localize2('focusNextRenameSuggestion', "Focus Next Rename Suggestion"),
+                ...nls.localize2('vs/editor/contrib/rename/browser/rename', 'focusNextRenameSuggestion', "Focus Next Rename Suggestion"),
             },
             precondition: CONTEXT_RENAME_INPUT_VISIBLE,
             keybinding: [
@@ -426,7 +426,7 @@ registerAction2(class FocusPreviousRenameSuggestion extends Action2 {
         super({
             id: 'focusPreviousRenameSuggestion',
             title: {
-                ...nls.localize2('focusPreviousRenameSuggestion', "Focus Previous Rename Suggestion"),
+                ...nls.localize2('vs/editor/contrib/rename/browser/rename', 'focusPreviousRenameSuggestion', "Focus Previous Rename Suggestion"),
             },
             precondition: CONTEXT_RENAME_INPUT_VISIBLE,
             keybinding: [
@@ -471,7 +471,7 @@ Registry.as(Extensions.Configuration).registerConfiguration({
     properties: {
         'editor.rename.enablePreview': {
             scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,
-            description: nls.localize('enablePreview', "Enable/disable the ability to preview changes before renaming"),
+            description: nls.localize('vs/editor/contrib/rename/browser/rename', 'enablePreview', "Enable/disable the ability to preview changes before renaming"),
             default: true,
             type: 'boolean'
         }
diff --git a/esm/vs/editor/contrib/rename/browser/renameWidget.js b/esm/vs/editor/contrib/rename/browser/renameWidget.js
index b28fbce2150ae18f49ac2d441f8b9608a54c5b96..c546679f5c1cf4af7b64cbdd08ba0cbfa9bdb681 100644
--- a/esm/vs/editor/contrib/rename/browser/renameWidget.js
+++ b/esm/vs/editor/contrib/rename/browser/renameWidget.js
@@ -40,8 +40,8 @@ import { editorWidgetBackground, inputBackground, inputBorder, inputForeground,
 import { IThemeService } from '../../../../platform/theme/common/themeService.js';
 /** for debugging */
 const _sticky = false;
-export const CONTEXT_RENAME_INPUT_VISIBLE = new RawContextKey('renameInputVisible', false, nls.localize('renameInputVisible', "Whether the rename input widget is visible"));
-export const CONTEXT_RENAME_INPUT_FOCUSED = new RawContextKey('renameInputFocused', false, nls.localize('renameInputFocused', "Whether the rename input widget is focused"));
+export const CONTEXT_RENAME_INPUT_VISIBLE = new RawContextKey('renameInputVisible', false, nls.localize('vs/editor/contrib/rename/browser/renameWidget', 'renameInputVisible', "Whether the rename input widget is visible"));
+export const CONTEXT_RENAME_INPUT_FOCUSED = new RawContextKey('renameInputFocused', false, nls.localize('vs/editor/contrib/rename/browser/renameWidget', 'renameInputFocused', "Whether the rename input widget is focused"));
 let RenameWidget = class RenameWidget {
     constructor(_editor, _acceptKeybindings, _themeService, _keybindingService, contextKeyService, _logService) {
         this._editor = _editor;
@@ -164,7 +164,7 @@ let RenameWidget = class RenameWidget {
     }
     beforeRender() {
         const [accept, preview] = this._acceptKeybindings;
-        this._label.innerText = nls.localize({ key: 'label', comment: ['placeholders are keybindings, e.g "F2 to Rename, Shift+F2 to Preview"'] }, "{0} to Rename, {1} to Preview", this._keybindingService.lookupKeybinding(accept)?.getLabel(), this._keybindingService.lookupKeybinding(preview)?.getLabel());
+        this._label.innerText = nls.localize('vs/editor/contrib/rename/browser/renameWidget', { key: 'label', comment: ['placeholders are keybindings, e.g "F2 to Rename, Shift+F2 to Preview"'] }, "{0} to Rename, {1} to Preview", this._keybindingService.lookupKeybinding(accept)?.getLabel(), this._keybindingService.lookupKeybinding(preview)?.getLabel());
         this._domNode.style.minWidth = `200px`; // to prevent from widening when candidates come in
         return null;
     }
@@ -478,7 +478,7 @@ class RenameCandidateListView {
         // adjust list container layout
         this._listContainer.style.height = `${height}px`;
         this._listContainer.style.width = `${width}px`;
-        aria.status(nls.localize('renameSuggestionsReceivedAria', "Received {0} rename suggestions", candidates.length));
+        aria.status(nls.localize('vs/editor/contrib/rename/browser/renameWidget', 'renameSuggestionsReceivedAria', "Received {0} rename suggestions", candidates.length));
     }
     clearCandidates() {
         this._listContainer.style.height = '0px';
@@ -619,13 +619,13 @@ class InputWithButton {
             this._inputNode.className = 'rename-input';
             this._inputNode.type = 'text';
             this._inputNode.style.border = 'none';
-            this._inputNode.setAttribute('aria-label', nls.localize('renameAriaLabel', "Rename input. Type new name and press Enter to commit."));
+            this._inputNode.setAttribute('aria-label', nls.localize('vs/editor/contrib/rename/browser/renameWidget', 'renameAriaLabel', "Rename input. Type new name and press Enter to commit."));
             this._domNode.appendChild(this._inputNode);
             this._buttonNode = document.createElement('div');
             this._buttonNode.className = 'rename-suggestions-button';
             this._buttonNode.setAttribute('tabindex', '0');
-            this._buttonGenHoverText = nls.localize('generateRenameSuggestionsButton', "Generate new name suggestions");
-            this._buttonCancelHoverText = nls.localize('cancelRenameSuggestionsButton', "Cancel");
+            this._buttonGenHoverText = nls.localize('vs/editor/contrib/rename/browser/renameWidget', 'generateRenameSuggestionsButton', "Generate new name suggestions");
+            this._buttonCancelHoverText = nls.localize('vs/editor/contrib/rename/browser/renameWidget', 'cancelRenameSuggestionsButton', "Cancel");
             this._buttonHover = getBaseLayerHoverDelegate().setupManagedHover(getDefaultHoverDelegate('element'), this._buttonNode, this._buttonGenHoverText);
             this._disposables.add(this._buttonHover);
             this._domNode.appendChild(this._buttonNode);
diff --git a/esm/vs/editor/contrib/smartSelect/browser/smartSelect.js b/esm/vs/editor/contrib/smartSelect/browser/smartSelect.js
index 1c92ac26189f61ecb5a3b90de893781cdfc40f3e..24a3a2b6359e21d26778d7000205110a040a81df 100644
--- a/esm/vs/editor/contrib/smartSelect/browser/smartSelect.js
+++ b/esm/vs/editor/contrib/smartSelect/browser/smartSelect.js
@@ -131,7 +131,7 @@ class GrowSelectionAction extends AbstractSmartSelect {
     constructor() {
         super(true, {
             id: 'editor.action.smartSelect.expand',
-            label: nls.localize('smartSelect.expand', "Expand Selection"),
+            label: nls.localize('vs/editor/contrib/smartSelect/browser/smartSelect', 'smartSelect.expand', "Expand Selection"),
             alias: 'Expand Selection',
             precondition: undefined,
             kbOpts: {
@@ -146,7 +146,7 @@ class GrowSelectionAction extends AbstractSmartSelect {
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '1_basic',
-                title: nls.localize({ key: 'miSmartSelectGrow', comment: ['&& denotes a mnemonic'] }, "&&Expand Selection"),
+                title: nls.localize('vs/editor/contrib/smartSelect/browser/smartSelect', { key: 'miSmartSelectGrow', comment: ['&& denotes a mnemonic'] }, "&&Expand Selection"),
                 order: 2
             }
         });
@@ -158,7 +158,7 @@ class ShrinkSelectionAction extends AbstractSmartSelect {
     constructor() {
         super(false, {
             id: 'editor.action.smartSelect.shrink',
-            label: nls.localize('smartSelect.shrink', "Shrink Selection"),
+            label: nls.localize('vs/editor/contrib/smartSelect/browser/smartSelect', 'smartSelect.shrink', "Shrink Selection"),
             alias: 'Shrink Selection',
             precondition: undefined,
             kbOpts: {
@@ -173,7 +173,7 @@ class ShrinkSelectionAction extends AbstractSmartSelect {
             menuOpts: {
                 menuId: MenuId.MenubarSelectionMenu,
                 group: '1_basic',
-                title: nls.localize({ key: 'miSmartSelectShrink', comment: ['&& denotes a mnemonic'] }, "&&Shrink Selection"),
+                title: nls.localize('vs/editor/contrib/smartSelect/browser/smartSelect', { key: 'miSmartSelectShrink', comment: ['&& denotes a mnemonic'] }, "&&Shrink Selection"),
                 order: 3
             }
         });
diff --git a/esm/vs/editor/contrib/snippet/browser/snippetController2.js b/esm/vs/editor/contrib/snippet/browser/snippetController2.js
index 4d7516236c9825f075633e10275161c91d440a89..1e29a5b1cfbe79a68a014f026fee122ed6942469 100644
--- a/esm/vs/editor/contrib/snippet/browser/snippetController2.js
+++ b/esm/vs/editor/contrib/snippet/browser/snippetController2.js
@@ -39,9 +39,9 @@ let SnippetController2 = class SnippetController2 {
     static get(editor) {
         return editor.getContribution(SnippetController2_1.ID);
     }
-    static { this.InSnippetMode = new RawContextKey('inSnippetMode', false, localize('inSnippetMode', "Whether the editor in current in snippet mode")); }
-    static { this.HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('hasNextTabstop', "Whether there is a next tab stop when in snippet mode")); }
-    static { this.HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('hasPrevTabstop', "Whether there is a previous tab stop when in snippet mode")); }
+    static { this.InSnippetMode = new RawContextKey('inSnippetMode', false, localize('vs/editor/contrib/snippet/browser/snippetController2', 'inSnippetMode', "Whether the editor in current in snippet mode")); }
+    static { this.HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('vs/editor/contrib/snippet/browser/snippetController2', 'hasNextTabstop', "Whether there is a next tab stop when in snippet mode")); }
+    static { this.HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('vs/editor/contrib/snippet/browser/snippetController2', 'hasPrevTabstop', "Whether there is a previous tab stop when in snippet mode")); }
     constructor(_editor, _logService, _languageFeaturesService, contextKeyService, _languageConfigurationService) {
         this._editor = _editor;
         this._logService = _logService;
@@ -125,7 +125,7 @@ let SnippetController2 = class SnippetController2 {
                             sortText: 'a'.repeat(i + 1),
                             range: activeChoice.range,
                             filterText: isAnyOfOptions ? `${word}_${option.value}` : undefined,
-                            command: { id: 'jumpToNextSnippetPlaceholder', title: localize('next', 'Go to next placeholder...') }
+                            command: { id: 'jumpToNextSnippetPlaceholder', title: localize('vs/editor/contrib/snippet/browser/snippetController2', 'next', 'Go to next placeholder...') }
                         });
                     }
                     return { suggestions };
diff --git a/esm/vs/editor/contrib/snippet/browser/snippetVariables.js b/esm/vs/editor/contrib/snippet/browser/snippetVariables.js
index febb884de643c3222960907d4f40773b6109319d..d2ba464b809c60ed51076f761ecc895c32394e80 100644
--- a/esm/vs/editor/contrib/snippet/browser/snippetVariables.js
+++ b/esm/vs/editor/contrib/snippet/browser/snippetVariables.js
@@ -238,10 +238,10 @@ export class TimeBasedVariableResolver {
     constructor() {
         this._date = new Date();
     }
-    static { this.dayNames = [nls.localize('Sunday', "Sunday"), nls.localize('Monday', "Monday"), nls.localize('Tuesday', "Tuesday"), nls.localize('Wednesday', "Wednesday"), nls.localize('Thursday', "Thursday"), nls.localize('Friday', "Friday"), nls.localize('Saturday', "Saturday")]; }
-    static { this.dayNamesShort = [nls.localize('SundayShort', "Sun"), nls.localize('MondayShort', "Mon"), nls.localize('TuesdayShort', "Tue"), nls.localize('WednesdayShort', "Wed"), nls.localize('ThursdayShort', "Thu"), nls.localize('FridayShort', "Fri"), nls.localize('SaturdayShort', "Sat")]; }
-    static { this.monthNames = [nls.localize('January', "January"), nls.localize('February', "February"), nls.localize('March', "March"), nls.localize('April', "April"), nls.localize('May', "May"), nls.localize('June', "June"), nls.localize('July', "July"), nls.localize('August', "August"), nls.localize('September', "September"), nls.localize('October', "October"), nls.localize('November', "November"), nls.localize('December', "December")]; }
-    static { this.monthNamesShort = [nls.localize('JanuaryShort', "Jan"), nls.localize('FebruaryShort', "Feb"), nls.localize('MarchShort', "Mar"), nls.localize('AprilShort', "Apr"), nls.localize('MayShort', "May"), nls.localize('JuneShort', "Jun"), nls.localize('JulyShort', "Jul"), nls.localize('AugustShort', "Aug"), nls.localize('SeptemberShort', "Sep"), nls.localize('OctoberShort', "Oct"), nls.localize('NovemberShort', "Nov"), nls.localize('DecemberShort', "Dec")]; }
+    static { this.dayNames = [nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'Sunday', "Sunday"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'Monday', "Monday"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'Tuesday', "Tuesday"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'Wednesday', "Wednesday"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'Thursday', "Thursday"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'Friday', "Friday"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'Saturday', "Saturday")]; }
+    static { this.dayNamesShort = [nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'SundayShort', "Sun"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'MondayShort', "Mon"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'TuesdayShort', "Tue"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'WednesdayShort', "Wed"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'ThursdayShort', "Thu"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'FridayShort', "Fri"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'SaturdayShort', "Sat")]; }
+    static { this.monthNames = [nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'January', "January"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'February', "February"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'March', "March"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'April', "April"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'May', "May"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'June', "June"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'July', "July"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'August', "August"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'September', "September"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'October', "October"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'November', "November"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'December', "December")]; }
+    static { this.monthNamesShort = [nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'JanuaryShort', "Jan"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'FebruaryShort', "Feb"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'MarchShort', "Mar"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'AprilShort', "Apr"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'MayShort', "May"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'JuneShort', "Jun"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'JulyShort', "Jul"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'AugustShort', "Aug"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'SeptemberShort', "Sep"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'OctoberShort', "Oct"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'NovemberShort', "Nov"), nls.localize('vs/editor/contrib/snippet/browser/snippetVariables', 'DecemberShort', "Dec")]; }
     resolve(variable) {
         const { name } = variable;
         if (name === 'CURRENT_YEAR') {
diff --git a/esm/vs/editor/contrib/stickyScroll/browser/stickyScrollActions.js b/esm/vs/editor/contrib/stickyScroll/browser/stickyScrollActions.js
index ed60c82ba4dd13541a5eb83abc1630b15a61cf8a..5455bd4adc28132b9f2afedacfbe707fa984c041 100644
--- a/esm/vs/editor/contrib/stickyScroll/browser/stickyScrollActions.js
+++ b/esm/vs/editor/contrib/stickyScroll/browser/stickyScrollActions.js
@@ -15,17 +15,17 @@ export class ToggleStickyScroll extends Action2 {
         super({
             id: 'editor.action.toggleStickyScroll',
             title: {
-                ...localize2('toggleEditorStickyScroll', "Toggle Editor Sticky Scroll"),
-                mnemonicTitle: localize({ key: 'mitoggleStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Toggle Editor Sticky Scroll"),
+                ...localize2('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', 'toggleEditorStickyScroll', "Toggle Editor Sticky Scroll"),
+                mnemonicTitle: localize('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', { key: 'mitoggleStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Toggle Editor Sticky Scroll"),
             },
             metadata: {
-                description: localize2('toggleEditorStickyScroll.description', "Toggle/enable the editor sticky scroll which shows the nested scopes at the top of the viewport"),
+                description: localize2('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', 'toggleEditorStickyScroll.description', "Toggle/enable the editor sticky scroll which shows the nested scopes at the top of the viewport"),
             },
             category: Categories.View,
             toggled: {
                 condition: ContextKeyExpr.equals('config.editor.stickyScroll.enabled', true),
-                title: localize('stickyScroll', "Sticky Scroll"),
-                mnemonicTitle: localize({ key: 'miStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Sticky Scroll"),
+                title: localize('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', 'stickyScroll', "Sticky Scroll"),
+                mnemonicTitle: localize('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', { key: 'miStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Sticky Scroll"),
             },
             menu: [
                 { id: MenuId.CommandPalette },
@@ -46,8 +46,8 @@ export class FocusStickyScroll extends EditorAction2 {
         super({
             id: 'editor.action.focusStickyScroll',
             title: {
-                ...localize2('focusStickyScroll', "Focus on the editor sticky scroll"),
-                mnemonicTitle: localize({ key: 'mifocusStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Focus Sticky Scroll"),
+                ...localize2('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', 'focusStickyScroll', "Focus on the editor sticky scroll"),
+                mnemonicTitle: localize('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', { key: 'mifocusStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Focus Sticky Scroll"),
             },
             precondition: ContextKeyExpr.and(ContextKeyExpr.has('config.editor.stickyScroll.enabled'), EditorContextKeys.stickyScrollVisible),
             menu: [
@@ -63,7 +63,7 @@ export class SelectNextStickyScrollLine extends EditorAction2 {
     constructor() {
         super({
             id: 'editor.action.selectNextStickyScrollLine',
-            title: localize2('selectNextStickyScrollLine.title', "Select the next editor sticky scroll line"),
+            title: localize2('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', 'selectNextStickyScrollLine.title', "Select the next editor sticky scroll line"),
             precondition: EditorContextKeys.stickyScrollFocused.isEqualTo(true),
             keybinding: {
                 weight,
@@ -79,7 +79,7 @@ export class SelectPreviousStickyScrollLine extends EditorAction2 {
     constructor() {
         super({
             id: 'editor.action.selectPreviousStickyScrollLine',
-            title: localize2('selectPreviousStickyScrollLine.title', "Select the previous sticky scroll line"),
+            title: localize2('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', 'selectPreviousStickyScrollLine.title', "Select the previous sticky scroll line"),
             precondition: EditorContextKeys.stickyScrollFocused.isEqualTo(true),
             keybinding: {
                 weight,
@@ -95,7 +95,7 @@ export class GoToStickyScrollLine extends EditorAction2 {
     constructor() {
         super({
             id: 'editor.action.goToFocusedStickyScrollLine',
-            title: localize2('goToFocusedStickyScrollLine.title', "Go to the focused sticky scroll line"),
+            title: localize2('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', 'goToFocusedStickyScrollLine.title', "Go to the focused sticky scroll line"),
             precondition: EditorContextKeys.stickyScrollFocused.isEqualTo(true),
             keybinding: {
                 weight,
@@ -111,7 +111,7 @@ export class SelectEditor extends EditorAction2 {
     constructor() {
         super({
             id: 'editor.action.selectEditor',
-            title: localize2('selectEditor.title', "Select Editor"),
+            title: localize2('vs/editor/contrib/stickyScroll/browser/stickyScrollActions', 'selectEditor.title', "Select Editor"),
             precondition: EditorContextKeys.stickyScrollFocused.isEqualTo(true),
             keybinding: {
                 weight,
diff --git a/esm/vs/editor/contrib/suggest/browser/suggest.js b/esm/vs/editor/contrib/suggest/browser/suggest.js
index ada36856f107f79918eb3f93a9821686d47b52e1..cff02339ca25794f9f4c142ea49ca4dfd4c69f61 100644
--- a/esm/vs/editor/contrib/suggest/browser/suggest.js
+++ b/esm/vs/editor/contrib/suggest/browser/suggest.js
@@ -21,14 +21,14 @@ import { ILanguageFeaturesService } from '../../../common/services/languageFeatu
 import { historyNavigationVisible } from '../../../../platform/history/browser/contextScopedHistoryWidget.js';
 export const Context = {
     Visible: historyNavigationVisible,
-    HasFocusedSuggestion: new RawContextKey('suggestWidgetHasFocusedSuggestion', false, localize('suggestWidgetHasSelection', "Whether any suggestion is focused")),
-    DetailsVisible: new RawContextKey('suggestWidgetDetailsVisible', false, localize('suggestWidgetDetailsVisible', "Whether suggestion details are visible")),
-    MultipleSuggestions: new RawContextKey('suggestWidgetMultipleSuggestions', false, localize('suggestWidgetMultipleSuggestions', "Whether there are multiple suggestions to pick from")),
-    MakesTextEdit: new RawContextKey('suggestionMakesTextEdit', true, localize('suggestionMakesTextEdit', "Whether inserting the current suggestion yields in a change or has everything already been typed")),
-    AcceptSuggestionsOnEnter: new RawContextKey('acceptSuggestionOnEnter', true, localize('acceptSuggestionOnEnter', "Whether suggestions are inserted when pressing Enter")),
-    HasInsertAndReplaceRange: new RawContextKey('suggestionHasInsertAndReplaceRange', false, localize('suggestionHasInsertAndReplaceRange', "Whether the current suggestion has insert and replace behaviour")),
-    InsertMode: new RawContextKey('suggestionInsertMode', undefined, { type: 'string', description: localize('suggestionInsertMode', "Whether the default behaviour is to insert or replace") }),
-    CanResolve: new RawContextKey('suggestionCanResolve', false, localize('suggestionCanResolve', "Whether the current suggestion supports to resolve further details")),
+    HasFocusedSuggestion: new RawContextKey('suggestWidgetHasFocusedSuggestion', false, localize('vs/editor/contrib/suggest/browser/suggest', 'suggestWidgetHasSelection', "Whether any suggestion is focused")),
+    DetailsVisible: new RawContextKey('suggestWidgetDetailsVisible', false, localize('vs/editor/contrib/suggest/browser/suggest', 'suggestWidgetDetailsVisible', "Whether suggestion details are visible")),
+    MultipleSuggestions: new RawContextKey('suggestWidgetMultipleSuggestions', false, localize('vs/editor/contrib/suggest/browser/suggest', 'suggestWidgetMultipleSuggestions', "Whether there are multiple suggestions to pick from")),
+    MakesTextEdit: new RawContextKey('suggestionMakesTextEdit', true, localize('vs/editor/contrib/suggest/browser/suggest', 'suggestionMakesTextEdit', "Whether inserting the current suggestion yields in a change or has everything already been typed")),
+    AcceptSuggestionsOnEnter: new RawContextKey('acceptSuggestionOnEnter', true, localize('vs/editor/contrib/suggest/browser/suggest', 'acceptSuggestionOnEnter', "Whether suggestions are inserted when pressing Enter")),
+    HasInsertAndReplaceRange: new RawContextKey('suggestionHasInsertAndReplaceRange', false, localize('vs/editor/contrib/suggest/browser/suggest', 'suggestionHasInsertAndReplaceRange', "Whether the current suggestion has insert and replace behaviour")),
+    InsertMode: new RawContextKey('suggestionInsertMode', undefined, { type: 'string', description: localize('vs/editor/contrib/suggest/browser/suggest', 'suggestionInsertMode', "Whether the default behaviour is to insert or replace") }),
+    CanResolve: new RawContextKey('suggestionCanResolve', false, localize('vs/editor/contrib/suggest/browser/suggest', 'suggestionCanResolve', "Whether the current suggestion supports to resolve further details")),
 };
 export const suggestWidgetStatusbarMenu = new MenuId('suggestWidgetStatusBar');
 export class CompletionItem {
diff --git a/esm/vs/editor/contrib/suggest/browser/suggestController.js b/esm/vs/editor/contrib/suggest/browser/suggestController.js
index d31662c83e77339eb4ba074257722fd6facb621c..7dcd76f1f81b32b08adf25992dba5c70294defef 100644
--- a/esm/vs/editor/contrib/suggest/browser/suggestController.js
+++ b/esm/vs/editor/contrib/suggest/browser/suggestController.js
@@ -476,7 +476,7 @@ let SuggestController = class SuggestController {
     }
     _alertCompletionItem(item) {
         if (isNonEmptyArray(item.completion.additionalTextEdits)) {
-            const msg = nls.localize('aria.alert.snippet', "Accepting '{0}' made {1} additional edits", item.textLabel, item.completion.additionalTextEdits.length);
+            const msg = nls.localize('vs/editor/contrib/suggest/browser/suggestController', 'aria.alert.snippet', "Accepting '{0}' made {1} additional edits", item.textLabel, item.completion.additionalTextEdits.length);
             alert(msg);
         }
     }
@@ -656,7 +656,7 @@ export class TriggerSuggestAction extends EditorAction {
     constructor() {
         super({
             id: TriggerSuggestAction.id,
-            label: nls.localize('suggest.trigger.label', "Trigger Suggest"),
+            label: nls.localize('vs/editor/contrib/suggest/browser/suggestController', 'suggest.trigger.label', "Trigger Suggest"),
             alias: 'Trigger Suggest',
             precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCompletionItemProvider, SuggestContext.Visible.toNegated()),
             kbOpts: {
@@ -705,19 +705,19 @@ registerEditorCommand(new SuggestCommand({
         }],
     menuOpts: [{
             menuId: suggestWidgetStatusbarMenu,
-            title: nls.localize('accept.insert', "Insert"),
+            title: nls.localize('vs/editor/contrib/suggest/browser/suggestController', 'accept.insert', "Insert"),
             group: 'left',
             order: 1,
             when: SuggestContext.HasInsertAndReplaceRange.toNegated()
         }, {
             menuId: suggestWidgetStatusbarMenu,
-            title: nls.localize('accept.insert', "Insert"),
+            title: nls.localize('vs/editor/contrib/suggest/browser/suggestController', 'accept.insert', "Insert"),
             group: 'left',
             order: 1,
             when: ContextKeyExpr.and(SuggestContext.HasInsertAndReplaceRange, SuggestContext.InsertMode.isEqualTo('insert'))
         }, {
             menuId: suggestWidgetStatusbarMenu,
-            title: nls.localize('accept.replace', "Replace"),
+            title: nls.localize('vs/editor/contrib/suggest/browser/suggestController', 'accept.replace', "Replace"),
             group: 'left',
             order: 1,
             when: ContextKeyExpr.and(SuggestContext.HasInsertAndReplaceRange, SuggestContext.InsertMode.isEqualTo('replace'))
@@ -740,13 +740,13 @@ registerEditorCommand(new SuggestCommand({
             group: 'left',
             order: 2,
             when: ContextKeyExpr.and(SuggestContext.HasInsertAndReplaceRange, SuggestContext.InsertMode.isEqualTo('insert')),
-            title: nls.localize('accept.replace', "Replace")
+            title: nls.localize('vs/editor/contrib/suggest/browser/suggestController', 'accept.replace', "Replace")
         }, {
             menuId: suggestWidgetStatusbarMenu,
             group: 'left',
             order: 2,
             when: ContextKeyExpr.and(SuggestContext.HasInsertAndReplaceRange, SuggestContext.InsertMode.isEqualTo('replace')),
-            title: nls.localize('accept.insert', "Insert")
+            title: nls.localize('vs/editor/contrib/suggest/browser/suggestController', 'accept.insert', "Insert")
         }]
 }));
 // continue to support the old command
@@ -854,13 +854,13 @@ registerEditorCommand(new SuggestCommand({
             group: 'right',
             order: 1,
             when: ContextKeyExpr.and(SuggestContext.DetailsVisible, SuggestContext.CanResolve),
-            title: nls.localize('detail.more', "Show Less")
+            title: nls.localize('vs/editor/contrib/suggest/browser/suggestController', 'detail.more', "Show Less")
         }, {
             menuId: suggestWidgetStatusbarMenu,
             group: 'right',
             order: 1,
             when: ContextKeyExpr.and(SuggestContext.DetailsVisible.toNegated(), SuggestContext.CanResolve),
-            title: nls.localize('detail.less', "Show More")
+            title: nls.localize('vs/editor/contrib/suggest/browser/suggestController', 'detail.less', "Show More")
         }]
 }));
 registerEditorCommand(new SuggestCommand({
@@ -919,7 +919,7 @@ registerEditorAction(class extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.resetSuggestSize',
-            label: nls.localize('suggest.reset.label', "Reset Suggest Widget Size"),
+            label: nls.localize('vs/editor/contrib/suggest/browser/suggestController', 'suggest.reset.label', "Reset Suggest Widget Size"),
             alias: 'Reset Suggest Widget Size',
             precondition: undefined
         });
diff --git a/esm/vs/editor/contrib/suggest/browser/suggestWidget.js b/esm/vs/editor/contrib/suggest/browser/suggestWidget.js
index 84975081215ef11d48ca34fde9655946acd47917..3008f36ac5cb9288b2417a14b1ad51933814886d 100644
--- a/esm/vs/editor/contrib/suggest/browser/suggestWidget.js
+++ b/esm/vs/editor/contrib/suggest/browser/suggestWidget.js
@@ -41,15 +41,15 @@ import { status } from '../../../../base/browser/ui/aria/aria.js';
 /**
  * Suggest widget colors
  */
-registerColor('editorSuggestWidget.background', editorWidgetBackground, nls.localize('editorSuggestWidgetBackground', 'Background color of the suggest widget.'));
-registerColor('editorSuggestWidget.border', editorWidgetBorder, nls.localize('editorSuggestWidgetBorder', 'Border color of the suggest widget.'));
-const editorSuggestWidgetForeground = registerColor('editorSuggestWidget.foreground', editorForeground, nls.localize('editorSuggestWidgetForeground', 'Foreground color of the suggest widget.'));
-registerColor('editorSuggestWidget.selectedForeground', quickInputListFocusForeground, nls.localize('editorSuggestWidgetSelectedForeground', 'Foreground color of the selected entry in the suggest widget.'));
-registerColor('editorSuggestWidget.selectedIconForeground', quickInputListFocusIconForeground, nls.localize('editorSuggestWidgetSelectedIconForeground', 'Icon foreground color of the selected entry in the suggest widget.'));
-export const editorSuggestWidgetSelectedBackground = registerColor('editorSuggestWidget.selectedBackground', quickInputListFocusBackground, nls.localize('editorSuggestWidgetSelectedBackground', 'Background color of the selected entry in the suggest widget.'));
-registerColor('editorSuggestWidget.highlightForeground', listHighlightForeground, nls.localize('editorSuggestWidgetHighlightForeground', 'Color of the match highlights in the suggest widget.'));
-registerColor('editorSuggestWidget.focusHighlightForeground', listFocusHighlightForeground, nls.localize('editorSuggestWidgetFocusHighlightForeground', 'Color of the match highlights in the suggest widget when an item is focused.'));
-registerColor('editorSuggestWidgetStatus.foreground', transparent(editorSuggestWidgetForeground, .5), nls.localize('editorSuggestWidgetStatusForeground', 'Foreground color of the suggest widget status.'));
+registerColor('editorSuggestWidget.background', editorWidgetBackground, nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'editorSuggestWidgetBackground', 'Background color of the suggest widget.'));
+registerColor('editorSuggestWidget.border', editorWidgetBorder, nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'editorSuggestWidgetBorder', 'Border color of the suggest widget.'));
+const editorSuggestWidgetForeground = registerColor('editorSuggestWidget.foreground', editorForeground, nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'editorSuggestWidgetForeground', 'Foreground color of the suggest widget.'));
+registerColor('editorSuggestWidget.selectedForeground', quickInputListFocusForeground, nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'editorSuggestWidgetSelectedForeground', 'Foreground color of the selected entry in the suggest widget.'));
+registerColor('editorSuggestWidget.selectedIconForeground', quickInputListFocusIconForeground, nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'editorSuggestWidgetSelectedIconForeground', 'Icon foreground color of the selected entry in the suggest widget.'));
+export const editorSuggestWidgetSelectedBackground = registerColor('editorSuggestWidget.selectedBackground', quickInputListFocusBackground, nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'editorSuggestWidgetSelectedBackground', 'Background color of the selected entry in the suggest widget.'));
+registerColor('editorSuggestWidget.highlightForeground', listHighlightForeground, nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'editorSuggestWidgetHighlightForeground', 'Color of the match highlights in the suggest widget.'));
+registerColor('editorSuggestWidget.focusHighlightForeground', listFocusHighlightForeground, nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'editorSuggestWidgetFocusHighlightForeground', 'Color of the match highlights in the suggest widget when an item is focused.'));
+registerColor('editorSuggestWidgetStatus.foreground', transparent(editorSuggestWidgetForeground, .5), nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'editorSuggestWidgetStatusForeground', 'Foreground color of the suggest widget status.'));
 class PersistedWidgetSize {
     constructor(_service, editor) {
         this._service = _service;
@@ -77,8 +77,8 @@ class PersistedWidgetSize {
 }
 let SuggestWidget = class SuggestWidget {
     static { SuggestWidget_1 = this; }
-    static { this.LOADING_MESSAGE = nls.localize('suggestWidget.loading', "Loading..."); }
-    static { this.NO_SUGGESTIONS_MESSAGE = nls.localize('suggestWidget.noSuggestions', "No suggestions."); }
+    static { this.LOADING_MESSAGE = nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'suggestWidget.loading', "Loading..."); }
+    static { this.NO_SUGGESTIONS_MESSAGE = nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'suggestWidget.noSuggestions', "No suggestions."); }
     constructor(editor, _storageService, _contextKeyService, _themeService, instantiationService) {
         this.editor = editor;
         this._storageService = _storageService;
@@ -165,20 +165,20 @@ let SuggestWidget = class SuggestWidget {
             multipleSelectionSupport: false,
             accessibilityProvider: {
                 getRole: () => 'option',
-                getWidgetAriaLabel: () => nls.localize('suggest', "Suggest"),
+                getWidgetAriaLabel: () => nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'suggest', "Suggest"),
                 getWidgetRole: () => 'listbox',
                 getAriaLabel: (item) => {
                     let label = item.textLabel;
                     if (typeof item.completion.label !== 'string') {
                         const { detail, description } = item.completion.label;
                         if (detail && description) {
-                            label = nls.localize('label.full', '{0} {1}, {2}', label, detail, description);
+                            label = nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'label.full', '{0} {1}, {2}', label, detail, description);
                         }
                         else if (detail) {
-                            label = nls.localize('label.detail', '{0} {1}', label, detail);
+                            label = nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'label.detail', '{0} {1}', label, detail);
                         }
                         else if (description) {
-                            label = nls.localize('label.desc', '{0}, {1}', label, description);
+                            label = nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'label.desc', '{0}, {1}', label, description);
                         }
                     }
                     if (!item.isResolved || !this._isDetailsVisible()) {
@@ -186,7 +186,7 @@ let SuggestWidget = class SuggestWidget {
                     }
                     const { documentation, detail } = item.completion;
                     const docs = strings.format('{0}{1}', detail || '', documentation ? (typeof documentation === 'string' ? documentation : documentation.value) : '');
-                    return nls.localize('ariaCurrenttSuggestionReadDetails', "{0}, docs: {1}", label, docs);
+                    return nls.localize('vs/editor/contrib/suggest/browser/suggestWidget', 'ariaCurrenttSuggestionReadDetails', "{0}, docs: {1}", label, docs);
                 },
             }
         });
diff --git a/esm/vs/editor/contrib/suggest/browser/suggestWidgetDetails.js b/esm/vs/editor/contrib/suggest/browser/suggestWidgetDetails.js
index 8ea66455b5dff4b6c0e075de7f6270d615cb86d9..af57c6422d4cf8103d840a0fa1a02986797f4e28 100644
--- a/esm/vs/editor/contrib/suggest/browser/suggestWidgetDetails.js
+++ b/esm/vs/editor/contrib/suggest/browser/suggestWidgetDetails.js
@@ -47,7 +47,7 @@ let SuggestDetailsWidget = class SuggestDetailsWidget {
         this._disposables.add(this._scrollbar);
         this._header = dom.append(this._body, dom.$('.header'));
         this._close = dom.append(this._header, dom.$('span' + ThemeIcon.asCSSSelector(Codicon.close)));
-        this._close.title = nls.localize('details.close', "Close");
+        this._close.title = nls.localize('vs/editor/contrib/suggest/browser/suggestWidgetDetails', 'details.close', "Close");
         this._type = dom.append(this._header, dom.$('p.type'));
         this._docs = dom.append(this._body, dom.$('p.docs'));
         this._configureFont();
@@ -91,7 +91,7 @@ let SuggestDetailsWidget = class SuggestDetailsWidget {
         };
     }
     renderLoading() {
-        this._type.textContent = nls.localize('loading', "Loading...");
+        this._type.textContent = nls.localize('vs/editor/contrib/suggest/browser/suggestWidgetDetails', 'loading', "Loading...");
         this._docs.textContent = '';
         this.domNode.classList.remove('no-docs', 'no-type');
         this.layout(this.size.width, this.getLayoutInfo().lineHeight * 2);
diff --git a/esm/vs/editor/contrib/suggest/browser/suggestWidgetRenderer.js b/esm/vs/editor/contrib/suggest/browser/suggestWidgetRenderer.js
index f2a2bba32c1c5cf2c4fea04bf105b9f7c7e30cf3..16f222af602ac1e6acf03abe851087fa0fcc6916 100644
--- a/esm/vs/editor/contrib/suggest/browser/suggestWidgetRenderer.js
+++ b/esm/vs/editor/contrib/suggest/browser/suggestWidgetRenderer.js
@@ -31,7 +31,7 @@ import { canExpandCompletionItem } from './suggestWidgetDetails.js';
 export function getAriaId(index) {
     return `suggest-aria-id:${index}`;
 }
-const suggestMoreInfoIcon = registerIcon('suggest-more-info', Codicon.chevronRight, nls.localize('suggestMoreInfoIcon', 'Icon for more information in the suggest widget.'));
+const suggestMoreInfoIcon = registerIcon('suggest-more-info', Codicon.chevronRight, nls.localize('vs/editor/contrib/suggest/browser/suggestWidgetRenderer', 'suggestMoreInfoIcon', 'Icon for more information in the suggest widget.'));
 const _completionItemColor = new class ColorExtractor {
     static { this._regexRelaxed = /(#([\da-fA-F]{3}){1,2}|(rgb|hsl)a\(\s*(\d{1,3}%?\s*,\s*){3}(1|0?\.\d+)\)|(rgb|hsl)\(\s*\d{1,3}%?(\s*,\s*\d{1,3}%?){2}\s*\))/; }
     static { this._regexStrict = new RegExp(`^${ColorExtractor._regexRelaxed.source}$`, 'i'); }
@@ -87,7 +87,7 @@ let ItemRenderer = class ItemRenderer {
         const qualifierLabel = append(left, $('span.qualifier-label'));
         const detailsLabel = append(right, $('span.details-label'));
         const readMore = append(right, $('span.readMore' + ThemeIcon.asCSSSelector(suggestMoreInfoIcon)));
-        readMore.title = nls.localize('readMore', "Read More");
+        readMore.title = nls.localize('vs/editor/contrib/suggest/browser/suggestWidgetRenderer', 'readMore', "Read More");
         const configureFont = () => {
             const options = this._editor.getOptions();
             const fontInfo = options.get(50 /* EditorOption.fontInfo */);
diff --git a/esm/vs/editor/contrib/symbolIcons/browser/symbolIcons.js b/esm/vs/editor/contrib/symbolIcons/browser/symbolIcons.js
index b8572e4dde4ed54852605f51cafbda95267504cb..72466e1be49ec0fa7334c60f5bb772a382fe9451 100644
--- a/esm/vs/editor/contrib/symbolIcons/browser/symbolIcons.js
+++ b/esm/vs/editor/contrib/symbolIcons/browser/symbolIcons.js
@@ -5,86 +5,86 @@
 import './symbolIcons.css';
 import { localize } from '../../../../nls.js';
 import { foreground, registerColor } from '../../../../platform/theme/common/colorRegistry.js';
-export const SYMBOL_ICON_ARRAY_FOREGROUND = registerColor('symbolIcon.arrayForeground', foreground, localize('symbolIcon.arrayForeground', 'The foreground color for array symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_BOOLEAN_FOREGROUND = registerColor('symbolIcon.booleanForeground', foreground, localize('symbolIcon.booleanForeground', 'The foreground color for boolean symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_ARRAY_FOREGROUND = registerColor('symbolIcon.arrayForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.arrayForeground', 'The foreground color for array symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_BOOLEAN_FOREGROUND = registerColor('symbolIcon.booleanForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.booleanForeground', 'The foreground color for boolean symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
 export const SYMBOL_ICON_CLASS_FOREGROUND = registerColor('symbolIcon.classForeground', {
     dark: '#EE9D28',
     light: '#D67E00',
     hcDark: '#EE9D28',
     hcLight: '#D67E00'
-}, localize('symbolIcon.classForeground', 'The foreground color for class symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_COLOR_FOREGROUND = registerColor('symbolIcon.colorForeground', foreground, localize('symbolIcon.colorForeground', 'The foreground color for color symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_CONSTANT_FOREGROUND = registerColor('symbolIcon.constantForeground', foreground, localize('symbolIcon.constantForeground', 'The foreground color for constant symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+}, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.classForeground', 'The foreground color for class symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_COLOR_FOREGROUND = registerColor('symbolIcon.colorForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.colorForeground', 'The foreground color for color symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_CONSTANT_FOREGROUND = registerColor('symbolIcon.constantForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.constantForeground', 'The foreground color for constant symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
 export const SYMBOL_ICON_CONSTRUCTOR_FOREGROUND = registerColor('symbolIcon.constructorForeground', {
     dark: '#B180D7',
     light: '#652D90',
     hcDark: '#B180D7',
     hcLight: '#652D90'
-}, localize('symbolIcon.constructorForeground', 'The foreground color for constructor symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+}, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.constructorForeground', 'The foreground color for constructor symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
 export const SYMBOL_ICON_ENUMERATOR_FOREGROUND = registerColor('symbolIcon.enumeratorForeground', {
     dark: '#EE9D28',
     light: '#D67E00',
     hcDark: '#EE9D28',
     hcLight: '#D67E00'
-}, localize('symbolIcon.enumeratorForeground', 'The foreground color for enumerator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+}, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.enumeratorForeground', 'The foreground color for enumerator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
 export const SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND = registerColor('symbolIcon.enumeratorMemberForeground', {
     dark: '#75BEFF',
     light: '#007ACC',
     hcDark: '#75BEFF',
     hcLight: '#007ACC'
-}, localize('symbolIcon.enumeratorMemberForeground', 'The foreground color for enumerator member symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+}, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.enumeratorMemberForeground', 'The foreground color for enumerator member symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
 export const SYMBOL_ICON_EVENT_FOREGROUND = registerColor('symbolIcon.eventForeground', {
     dark: '#EE9D28',
     light: '#D67E00',
     hcDark: '#EE9D28',
     hcLight: '#D67E00'
-}, localize('symbolIcon.eventForeground', 'The foreground color for event symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+}, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.eventForeground', 'The foreground color for event symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
 export const SYMBOL_ICON_FIELD_FOREGROUND = registerColor('symbolIcon.fieldForeground', {
     dark: '#75BEFF',
     light: '#007ACC',
     hcDark: '#75BEFF',
     hcLight: '#007ACC'
-}, localize('symbolIcon.fieldForeground', 'The foreground color for field symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_FILE_FOREGROUND = registerColor('symbolIcon.fileForeground', foreground, localize('symbolIcon.fileForeground', 'The foreground color for file symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_FOLDER_FOREGROUND = registerColor('symbolIcon.folderForeground', foreground, localize('symbolIcon.folderForeground', 'The foreground color for folder symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+}, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.fieldForeground', 'The foreground color for field symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_FILE_FOREGROUND = registerColor('symbolIcon.fileForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.fileForeground', 'The foreground color for file symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_FOLDER_FOREGROUND = registerColor('symbolIcon.folderForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.folderForeground', 'The foreground color for folder symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
 export const SYMBOL_ICON_FUNCTION_FOREGROUND = registerColor('symbolIcon.functionForeground', {
     dark: '#B180D7',
     light: '#652D90',
     hcDark: '#B180D7',
     hcLight: '#652D90'
-}, localize('symbolIcon.functionForeground', 'The foreground color for function symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+}, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.functionForeground', 'The foreground color for function symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
 export const SYMBOL_ICON_INTERFACE_FOREGROUND = registerColor('symbolIcon.interfaceForeground', {
     dark: '#75BEFF',
     light: '#007ACC',
     hcDark: '#75BEFF',
     hcLight: '#007ACC'
-}, localize('symbolIcon.interfaceForeground', 'The foreground color for interface symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_KEY_FOREGROUND = registerColor('symbolIcon.keyForeground', foreground, localize('symbolIcon.keyForeground', 'The foreground color for key symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_KEYWORD_FOREGROUND = registerColor('symbolIcon.keywordForeground', foreground, localize('symbolIcon.keywordForeground', 'The foreground color for keyword symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+}, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.interfaceForeground', 'The foreground color for interface symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_KEY_FOREGROUND = registerColor('symbolIcon.keyForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.keyForeground', 'The foreground color for key symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_KEYWORD_FOREGROUND = registerColor('symbolIcon.keywordForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.keywordForeground', 'The foreground color for keyword symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
 export const SYMBOL_ICON_METHOD_FOREGROUND = registerColor('symbolIcon.methodForeground', {
     dark: '#B180D7',
     light: '#652D90',
     hcDark: '#B180D7',
     hcLight: '#652D90'
-}, localize('symbolIcon.methodForeground', 'The foreground color for method symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_MODULE_FOREGROUND = registerColor('symbolIcon.moduleForeground', foreground, localize('symbolIcon.moduleForeground', 'The foreground color for module symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_NAMESPACE_FOREGROUND = registerColor('symbolIcon.namespaceForeground', foreground, localize('symbolIcon.namespaceForeground', 'The foreground color for namespace symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_NULL_FOREGROUND = registerColor('symbolIcon.nullForeground', foreground, localize('symbolIcon.nullForeground', 'The foreground color for null symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_NUMBER_FOREGROUND = registerColor('symbolIcon.numberForeground', foreground, localize('symbolIcon.numberForeground', 'The foreground color for number symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_OBJECT_FOREGROUND = registerColor('symbolIcon.objectForeground', foreground, localize('symbolIcon.objectForeground', 'The foreground color for object symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_OPERATOR_FOREGROUND = registerColor('symbolIcon.operatorForeground', foreground, localize('symbolIcon.operatorForeground', 'The foreground color for operator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_PACKAGE_FOREGROUND = registerColor('symbolIcon.packageForeground', foreground, localize('symbolIcon.packageForeground', 'The foreground color for package symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_PROPERTY_FOREGROUND = registerColor('symbolIcon.propertyForeground', foreground, localize('symbolIcon.propertyForeground', 'The foreground color for property symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_REFERENCE_FOREGROUND = registerColor('symbolIcon.referenceForeground', foreground, localize('symbolIcon.referenceForeground', 'The foreground color for reference symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_SNIPPET_FOREGROUND = registerColor('symbolIcon.snippetForeground', foreground, localize('symbolIcon.snippetForeground', 'The foreground color for snippet symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_STRING_FOREGROUND = registerColor('symbolIcon.stringForeground', foreground, localize('symbolIcon.stringForeground', 'The foreground color for string symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_STRUCT_FOREGROUND = registerColor('symbolIcon.structForeground', foreground, localize('symbolIcon.structForeground', 'The foreground color for struct symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_TEXT_FOREGROUND = registerColor('symbolIcon.textForeground', foreground, localize('symbolIcon.textForeground', 'The foreground color for text symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_TYPEPARAMETER_FOREGROUND = registerColor('symbolIcon.typeParameterForeground', foreground, localize('symbolIcon.typeParameterForeground', 'The foreground color for type parameter symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
-export const SYMBOL_ICON_UNIT_FOREGROUND = registerColor('symbolIcon.unitForeground', foreground, localize('symbolIcon.unitForeground', 'The foreground color for unit symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+}, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.methodForeground', 'The foreground color for method symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_MODULE_FOREGROUND = registerColor('symbolIcon.moduleForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.moduleForeground', 'The foreground color for module symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_NAMESPACE_FOREGROUND = registerColor('symbolIcon.namespaceForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.namespaceForeground', 'The foreground color for namespace symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_NULL_FOREGROUND = registerColor('symbolIcon.nullForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.nullForeground', 'The foreground color for null symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_NUMBER_FOREGROUND = registerColor('symbolIcon.numberForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.numberForeground', 'The foreground color for number symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_OBJECT_FOREGROUND = registerColor('symbolIcon.objectForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.objectForeground', 'The foreground color for object symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_OPERATOR_FOREGROUND = registerColor('symbolIcon.operatorForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.operatorForeground', 'The foreground color for operator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_PACKAGE_FOREGROUND = registerColor('symbolIcon.packageForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.packageForeground', 'The foreground color for package symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_PROPERTY_FOREGROUND = registerColor('symbolIcon.propertyForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.propertyForeground', 'The foreground color for property symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_REFERENCE_FOREGROUND = registerColor('symbolIcon.referenceForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.referenceForeground', 'The foreground color for reference symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_SNIPPET_FOREGROUND = registerColor('symbolIcon.snippetForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.snippetForeground', 'The foreground color for snippet symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_STRING_FOREGROUND = registerColor('symbolIcon.stringForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.stringForeground', 'The foreground color for string symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_STRUCT_FOREGROUND = registerColor('symbolIcon.structForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.structForeground', 'The foreground color for struct symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_TEXT_FOREGROUND = registerColor('symbolIcon.textForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.textForeground', 'The foreground color for text symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_TYPEPARAMETER_FOREGROUND = registerColor('symbolIcon.typeParameterForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.typeParameterForeground', 'The foreground color for type parameter symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+export const SYMBOL_ICON_UNIT_FOREGROUND = registerColor('symbolIcon.unitForeground', foreground, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.unitForeground', 'The foreground color for unit symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
 export const SYMBOL_ICON_VARIABLE_FOREGROUND = registerColor('symbolIcon.variableForeground', {
     dark: '#75BEFF',
     light: '#007ACC',
     hcDark: '#75BEFF',
     hcLight: '#007ACC',
-}, localize('symbolIcon.variableForeground', 'The foreground color for variable symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
+}, localize('vs/editor/contrib/symbolIcons/browser/symbolIcons', 'symbolIcon.variableForeground', 'The foreground color for variable symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
diff --git a/esm/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js b/esm/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js
index 276af5c8b1dc4fa58b743988e04a3f0303abd18e..e7ea1234e780d50d64d830c0e25f9095c71d7d27 100644
--- a/esm/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js
+++ b/esm/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js
@@ -11,7 +11,7 @@ export class ToggleTabFocusModeAction extends Action2 {
     constructor() {
         super({
             id: ToggleTabFocusModeAction.ID,
-            title: nls.localize2({ key: 'toggle.tabMovesFocus', comment: ['Turn on/off use of tab key for moving focus around VS Code'] }, 'Toggle Tab Key Moves Focus'),
+            title: nls.localize2('vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode', { key: 'toggle.tabMovesFocus', comment: ['Turn on/off use of tab key for moving focus around VS Code'] }, 'Toggle Tab Key Moves Focus'),
             precondition: undefined,
             keybinding: {
                 primary: 2048 /* KeyMod.CtrlCmd */ | 43 /* KeyCode.KeyM */,
@@ -19,7 +19,7 @@ export class ToggleTabFocusModeAction extends Action2 {
                 weight: 100 /* KeybindingWeight.EditorContrib */
             },
             metadata: {
-                description: nls.localize2('tabMovesFocusDescriptions', "Determines whether the tab key moves focus around the workbench or inserts the tab character in the current editor. This is also called tab trapping, tab navigation, or tab focus mode."),
+                description: nls.localize2('vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode', 'tabMovesFocusDescriptions', "Determines whether the tab key moves focus around the workbench or inserts the tab character in the current editor. This is also called tab trapping, tab navigation, or tab focus mode."),
             },
             f1: true
         });
@@ -29,10 +29,10 @@ export class ToggleTabFocusModeAction extends Action2 {
         const newValue = !oldValue;
         TabFocus.setTabFocusMode(newValue);
         if (newValue) {
-            alert(nls.localize('toggle.tabMovesFocus.on', "Pressing Tab will now move focus to the next focusable element"));
+            alert(nls.localize('vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode', 'toggle.tabMovesFocus.on', "Pressing Tab will now move focus to the next focusable element"));
         }
         else {
-            alert(nls.localize('toggle.tabMovesFocus.off', "Pressing Tab will now insert the tab character"));
+            alert(nls.localize('vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode', 'toggle.tabMovesFocus.off', "Pressing Tab will now insert the tab character"));
         }
     }
 }
diff --git a/esm/vs/editor/contrib/tokenization/browser/tokenization.js b/esm/vs/editor/contrib/tokenization/browser/tokenization.js
index 690643fd490a206f8ac8c4908952c710df20aa6f..0ca3964c9f84c7ef8af9f69e1d9ef4292d4c1c6c 100644
--- a/esm/vs/editor/contrib/tokenization/browser/tokenization.js
+++ b/esm/vs/editor/contrib/tokenization/browser/tokenization.js
@@ -9,7 +9,7 @@ class ForceRetokenizeAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.forceRetokenize',
-            label: nls.localize('forceRetokenize', "Developer: Force Retokenize"),
+            label: nls.localize('vs/editor/contrib/tokenization/browser/tokenization', 'forceRetokenize', "Developer: Force Retokenize"),
             alias: 'Developer: Force Retokenize',
             precondition: undefined
         });
diff --git a/esm/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.js b/esm/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.js
index c1450e24c74256dd9216fcc26b3765e47fec5606..47511d5134f4e36f3221e990b879ab87fce37043 100644
--- a/esm/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.js
+++ b/esm/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.js
@@ -35,7 +35,7 @@ import { IOpenerService } from '../../../../platform/opener/common/opener.js';
 import { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';
 import { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';
 import { IWorkspaceTrustManagementService } from '../../../../platform/workspace/common/workspaceTrust.js';
-export const warningIcon = registerIcon('extensions-warning-message', Codicon.warning, nls.localize('warningIcon', 'Icon shown with a warning message in the extensions editor.'));
+export const warningIcon = registerIcon('extensions-warning-message', Codicon.warning, nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'warningIcon', 'Icon shown with a warning message in the extensions editor.'));
 let UnicodeHighlighter = class UnicodeHighlighter extends Disposable {
     static { this.ID = 'editor.contrib.unicodeHighlighter'; }
     constructor(_editor, _editorWorkerService, _workspaceTrustService, instantiationService) {
@@ -55,19 +55,19 @@ let UnicodeHighlighter = class UnicodeHighlighter extends Disposable {
                 let data;
                 if (state.nonBasicAsciiCharacterCount >= max) {
                     data = {
-                        message: nls.localize('unicodeHighlighting.thisDocumentHasManyNonBasicAsciiUnicodeCharacters', 'This document contains many non-basic ASCII unicode characters'),
+                        message: nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlighting.thisDocumentHasManyNonBasicAsciiUnicodeCharacters', 'This document contains many non-basic ASCII unicode characters'),
                         command: new DisableHighlightingOfNonBasicAsciiCharactersAction(),
                     };
                 }
                 else if (state.ambiguousCharacterCount >= max) {
                     data = {
-                        message: nls.localize('unicodeHighlighting.thisDocumentHasManyAmbiguousUnicodeCharacters', 'This document contains many ambiguous unicode characters'),
+                        message: nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlighting.thisDocumentHasManyAmbiguousUnicodeCharacters', 'This document contains many ambiguous unicode characters'),
                         command: new DisableHighlightingOfAmbiguousCharactersAction(),
                     };
                 }
                 else if (state.invisibleCharacterCount >= max) {
                     data = {
-                        message: nls.localize('unicodeHighlighting.thisDocumentHasManyInvisibleUnicodeCharacters', 'This document contains many invisible unicode characters'),
+                        message: nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlighting.thisDocumentHasManyInvisibleUnicodeCharacters', 'This document contains many invisible unicode characters'),
                         command: new DisableHighlightingOfInvisibleCharactersAction(),
                     };
                 }
@@ -336,7 +336,7 @@ class ViewportUnicodeHighlighter extends Disposable {
         };
     }
 }
-const configureUnicodeHighlightOptionsStr = nls.localize('unicodeHighlight.configureUnicodeHighlightOptions', 'Configure Unicode Highlight Options');
+const configureUnicodeHighlightOptionsStr = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.configureUnicodeHighlightOptions', 'Configure Unicode Highlight Options');
 let UnicodeHighlighterHoverParticipant = class UnicodeHighlighterHoverParticipant {
     constructor(_editor, _languageService, _openerService) {
         this._editor = _editor;
@@ -369,18 +369,18 @@ let UnicodeHighlighterHoverParticipant = class UnicodeHighlighterHoverParticipan
             switch (highlightInfo.reason.kind) {
                 case 0 /* UnicodeHighlighterReasonKind.Ambiguous */: {
                     if (isBasicASCII(highlightInfo.reason.confusableWith)) {
-                        reason = nls.localize('unicodeHighlight.characterIsAmbiguousASCII', 'The character {0} could be confused with the ASCII character {1}, which is more common in source code.', codePointStr, formatCodePointMarkdown(highlightInfo.reason.confusableWith.codePointAt(0)));
+                        reason = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.characterIsAmbiguousASCII', 'The character {0} could be confused with the ASCII character {1}, which is more common in source code.', codePointStr, formatCodePointMarkdown(highlightInfo.reason.confusableWith.codePointAt(0)));
                     }
                     else {
-                        reason = nls.localize('unicodeHighlight.characterIsAmbiguous', 'The character {0} could be confused with the character {1}, which is more common in source code.', codePointStr, formatCodePointMarkdown(highlightInfo.reason.confusableWith.codePointAt(0)));
+                        reason = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.characterIsAmbiguous', 'The character {0} could be confused with the character {1}, which is more common in source code.', codePointStr, formatCodePointMarkdown(highlightInfo.reason.confusableWith.codePointAt(0)));
                     }
                     break;
                 }
                 case 1 /* UnicodeHighlighterReasonKind.Invisible */:
-                    reason = nls.localize('unicodeHighlight.characterIsInvisible', 'The character {0} is invisible.', codePointStr);
+                    reason = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.characterIsInvisible', 'The character {0} is invisible.', codePointStr);
                     break;
                 case 2 /* UnicodeHighlighterReasonKind.NonBasicAscii */:
-                    reason = nls.localize('unicodeHighlight.characterIsNonBasicAscii', 'The character {0} is not a basic ASCII character.', codePointStr);
+                    reason = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.characterIsNonBasicAscii', 'The character {0} is not a basic ASCII character.', codePointStr);
                     break;
             }
             if (existedReason.has(reason)) {
@@ -393,7 +393,7 @@ let UnicodeHighlighterHoverParticipant = class UnicodeHighlighterHoverParticipan
                 inComment: highlightInfo.inComment,
                 inString: highlightInfo.inString,
             };
-            const adjustSettings = nls.localize('unicodeHighlight.adjustSettings', 'Adjust settings');
+            const adjustSettings = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.adjustSettings', 'Adjust settings');
             const uri = `command:${ShowExcludeOptions.ID}?${encodeURIComponent(JSON.stringify(adjustSettingsArgs))}`;
             const markdown = new MarkdownString('', true)
                 .appendMarkdown(reason)
@@ -463,11 +463,11 @@ export class DisableHighlightingInCommentsAction extends EditorAction {
     constructor() {
         super({
             id: DisableHighlightingOfAmbiguousCharactersAction.ID,
-            label: nls.localize('action.unicodeHighlight.disableHighlightingInComments', 'Disable highlighting of characters in comments'),
+            label: nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'action.unicodeHighlight.disableHighlightingInComments', 'Disable highlighting of characters in comments'),
             alias: 'Disable highlighting of characters in comments',
             precondition: undefined
         });
-        this.shortLabel = nls.localize('unicodeHighlight.disableHighlightingInComments.shortLabel', 'Disable Highlight In Comments');
+        this.shortLabel = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.disableHighlightingInComments.shortLabel', 'Disable Highlight In Comments');
     }
     async run(accessor, editor, args) {
         const configurationService = accessor?.get(IConfigurationService);
@@ -483,11 +483,11 @@ export class DisableHighlightingInStringsAction extends EditorAction {
     constructor() {
         super({
             id: DisableHighlightingOfAmbiguousCharactersAction.ID,
-            label: nls.localize('action.unicodeHighlight.disableHighlightingInStrings', 'Disable highlighting of characters in strings'),
+            label: nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'action.unicodeHighlight.disableHighlightingInStrings', 'Disable highlighting of characters in strings'),
             alias: 'Disable highlighting of characters in strings',
             precondition: undefined
         });
-        this.shortLabel = nls.localize('unicodeHighlight.disableHighlightingInStrings.shortLabel', 'Disable Highlight In Strings');
+        this.shortLabel = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.disableHighlightingInStrings.shortLabel', 'Disable Highlight In Strings');
     }
     async run(accessor, editor, args) {
         const configurationService = accessor?.get(IConfigurationService);
@@ -504,11 +504,11 @@ export class DisableHighlightingOfAmbiguousCharactersAction extends EditorAction
     constructor() {
         super({
             id: DisableHighlightingOfAmbiguousCharactersAction.ID,
-            label: nls.localize('action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters', 'Disable highlighting of ambiguous characters'),
+            label: nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters', 'Disable highlighting of ambiguous characters'),
             alias: 'Disable highlighting of ambiguous characters',
             precondition: undefined
         });
-        this.shortLabel = nls.localize('unicodeHighlight.disableHighlightingOfAmbiguousCharacters.shortLabel', 'Disable Ambiguous Highlight');
+        this.shortLabel = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.disableHighlightingOfAmbiguousCharacters.shortLabel', 'Disable Ambiguous Highlight');
     }
     async run(accessor, editor, args) {
         const configurationService = accessor?.get(IConfigurationService);
@@ -525,11 +525,11 @@ export class DisableHighlightingOfInvisibleCharactersAction extends EditorAction
     constructor() {
         super({
             id: DisableHighlightingOfInvisibleCharactersAction.ID,
-            label: nls.localize('action.unicodeHighlight.disableHighlightingOfInvisibleCharacters', 'Disable highlighting of invisible characters'),
+            label: nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'action.unicodeHighlight.disableHighlightingOfInvisibleCharacters', 'Disable highlighting of invisible characters'),
             alias: 'Disable highlighting of invisible characters',
             precondition: undefined
         });
-        this.shortLabel = nls.localize('unicodeHighlight.disableHighlightingOfInvisibleCharacters.shortLabel', 'Disable Invisible Highlight');
+        this.shortLabel = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.disableHighlightingOfInvisibleCharacters.shortLabel', 'Disable Invisible Highlight');
     }
     async run(accessor, editor, args) {
         const configurationService = accessor?.get(IConfigurationService);
@@ -546,11 +546,11 @@ export class DisableHighlightingOfNonBasicAsciiCharactersAction extends EditorAc
     constructor() {
         super({
             id: DisableHighlightingOfNonBasicAsciiCharactersAction.ID,
-            label: nls.localize('action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters', 'Disable highlighting of non basic ASCII characters'),
+            label: nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters', 'Disable highlighting of non basic ASCII characters'),
             alias: 'Disable highlighting of non basic ASCII characters',
             precondition: undefined
         });
-        this.shortLabel = nls.localize('unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters.shortLabel', 'Disable Non ASCII Highlight');
+        this.shortLabel = nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters.shortLabel', 'Disable Non ASCII Highlight');
     }
     async run(accessor, editor, args) {
         const configurationService = accessor?.get(IConfigurationService);
@@ -567,7 +567,7 @@ export class ShowExcludeOptions extends EditorAction {
     constructor() {
         super({
             id: ShowExcludeOptions.ID,
-            label: nls.localize('action.unicodeHighlight.showExcludeOptions', "Show Exclude Options"),
+            label: nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'action.unicodeHighlight.showExcludeOptions', "Show Exclude Options"),
             alias: 'Show Exclude Options',
             precondition: undefined
         });
@@ -579,15 +579,15 @@ export class ShowExcludeOptions extends EditorAction {
         const configurationService = accessor.get(IConfigurationService);
         function getExcludeCharFromBeingHighlightedLabel(codePoint) {
             if (InvisibleCharacters.isInvisibleCharacter(codePoint)) {
-                return nls.localize('unicodeHighlight.excludeInvisibleCharFromBeingHighlighted', 'Exclude {0} (invisible character) from being highlighted', codePointToHex(codePoint));
+                return nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.excludeInvisibleCharFromBeingHighlighted', 'Exclude {0} (invisible character) from being highlighted', codePointToHex(codePoint));
             }
-            return nls.localize('unicodeHighlight.excludeCharFromBeingHighlighted', 'Exclude {0} from being highlighted', `${codePointToHex(codePoint)} "${char}"`);
+            return nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', 'unicodeHighlight.excludeCharFromBeingHighlighted', 'Exclude {0} from being highlighted', `${codePointToHex(codePoint)} "${char}"`);
         }
         const options = [];
         if (reason.kind === 0 /* UnicodeHighlighterReasonKind.Ambiguous */) {
             for (const locale of reason.notAmbiguousInLocales) {
                 options.push({
-                    label: nls.localize("unicodeHighlight.allowCommonCharactersInLanguage", "Allow unicode characters that are more common in the language \"{0}\".", locale),
+                    label: nls.localize('vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter', "unicodeHighlight.allowCommonCharactersInLanguage", "Allow unicode characters that are more common in the language \"{0}\".", locale),
                     run: async () => {
                         excludeLocaleFromBeingHighlighted(configurationService, [locale]);
                     },
diff --git a/esm/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.js b/esm/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.js
index cba9bc9f050a739e0b9c056a1c4bd7fffb7e4e47..bb75d3114deacb2e391681c32d6b2a0dc17a6836 100644
--- a/esm/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.js
+++ b/esm/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.js
@@ -85,11 +85,11 @@ let UnusualLineTerminatorsDetector = class UnusualLineTerminatorsDetector extend
         try {
             this._isPresentingDialog = true;
             result = await this._dialogService.confirm({
-                title: nls.localize('unusualLineTerminators.title', "Unusual Line Terminators"),
-                message: nls.localize('unusualLineTerminators.message', "Detected unusual line terminators"),
-                detail: nls.localize('unusualLineTerminators.detail', "The file '{0}' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).\n\nIt is recommended to remove them from the file. This can be configured via `editor.unusualLineTerminators`.", basename(model.uri)),
-                primaryButton: nls.localize({ key: 'unusualLineTerminators.fix', comment: ['&& denotes a mnemonic'] }, "&&Remove Unusual Line Terminators"),
-                cancelButton: nls.localize('unusualLineTerminators.ignore', "Ignore")
+                title: nls.localize('vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators', 'unusualLineTerminators.title', "Unusual Line Terminators"),
+                message: nls.localize('vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators', 'unusualLineTerminators.message', "Detected unusual line terminators"),
+                detail: nls.localize('vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators', 'unusualLineTerminators.detail', "The file '{0}' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).\n\nIt is recommended to remove them from the file. This can be configured via `editor.unusualLineTerminators`.", basename(model.uri)),
+                primaryButton: nls.localize('vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators', { key: 'unusualLineTerminators.fix', comment: ['&& denotes a mnemonic'] }, "&&Remove Unusual Line Terminators"),
+                cancelButton: nls.localize('vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators', 'unusualLineTerminators.ignore', "Ignore")
             });
         }
         finally {
diff --git a/esm/vs/editor/contrib/wordHighlighter/browser/highlightDecorations.js b/esm/vs/editor/contrib/wordHighlighter/browser/highlightDecorations.js
index 46b0bcbe6419179d6282e296693e866fd1b73c6c..0090d9d786ad22b77ca9fee3cb2f03081e82317c 100644
--- a/esm/vs/editor/contrib/wordHighlighter/browser/highlightDecorations.js
+++ b/esm/vs/editor/contrib/wordHighlighter/browser/highlightDecorations.js
@@ -9,15 +9,15 @@ import { DocumentHighlightKind } from '../../../common/languages.js';
 import * as nls from '../../../../nls.js';
 import { activeContrastBorder, editorSelectionHighlight, minimapSelectionOccurrenceHighlight, overviewRulerSelectionHighlightForeground, registerColor } from '../../../../platform/theme/common/colorRegistry.js';
 import { registerThemingParticipant, themeColorFromId } from '../../../../platform/theme/common/themeService.js';
-const wordHighlightBackground = registerColor('editor.wordHighlightBackground', { dark: '#575757B8', light: '#57575740', hcDark: null, hcLight: null }, nls.localize('wordHighlight', 'Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.'), true);
-registerColor('editor.wordHighlightStrongBackground', { dark: '#004972B8', light: '#0e639c40', hcDark: null, hcLight: null }, nls.localize('wordHighlightStrong', 'Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.'), true);
-registerColor('editor.wordHighlightTextBackground', wordHighlightBackground, nls.localize('wordHighlightText', 'Background color of a textual occurrence for a symbol. The color must not be opaque so as not to hide underlying decorations.'), true);
-const wordHighlightBorder = registerColor('editor.wordHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('wordHighlightBorder', 'Border color of a symbol during read-access, like reading a variable.'));
-registerColor('editor.wordHighlightStrongBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('wordHighlightStrongBorder', 'Border color of a symbol during write-access, like writing to a variable.'));
-registerColor('editor.wordHighlightTextBorder', wordHighlightBorder, nls.localize('wordHighlightTextBorder', "Border color of a textual occurrence for a symbol."));
-const overviewRulerWordHighlightForeground = registerColor('editorOverviewRuler.wordHighlightForeground', '#A0A0A0CC', nls.localize('overviewRulerWordHighlightForeground', 'Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
-const overviewRulerWordHighlightStrongForeground = registerColor('editorOverviewRuler.wordHighlightStrongForeground', '#C0A0C0CC', nls.localize('overviewRulerWordHighlightStrongForeground', 'Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
-const overviewRulerWordHighlightTextForeground = registerColor('editorOverviewRuler.wordHighlightTextForeground', overviewRulerSelectionHighlightForeground, nls.localize('overviewRulerWordHighlightTextForeground', 'Overview ruler marker color of a textual occurrence for a symbol. The color must not be opaque so as not to hide underlying decorations.'), true);
+const wordHighlightBackground = registerColor('editor.wordHighlightBackground', { dark: '#575757B8', light: '#57575740', hcDark: null, hcLight: null }, nls.localize('vs/editor/contrib/wordHighlighter/browser/highlightDecorations', 'wordHighlight', 'Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.'), true);
+registerColor('editor.wordHighlightStrongBackground', { dark: '#004972B8', light: '#0e639c40', hcDark: null, hcLight: null }, nls.localize('vs/editor/contrib/wordHighlighter/browser/highlightDecorations', 'wordHighlightStrong', 'Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.'), true);
+registerColor('editor.wordHighlightTextBackground', wordHighlightBackground, nls.localize('vs/editor/contrib/wordHighlighter/browser/highlightDecorations', 'wordHighlightText', 'Background color of a textual occurrence for a symbol. The color must not be opaque so as not to hide underlying decorations.'), true);
+const wordHighlightBorder = registerColor('editor.wordHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/editor/contrib/wordHighlighter/browser/highlightDecorations', 'wordHighlightBorder', 'Border color of a symbol during read-access, like reading a variable.'));
+registerColor('editor.wordHighlightStrongBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/editor/contrib/wordHighlighter/browser/highlightDecorations', 'wordHighlightStrongBorder', 'Border color of a symbol during write-access, like writing to a variable.'));
+registerColor('editor.wordHighlightTextBorder', wordHighlightBorder, nls.localize('vs/editor/contrib/wordHighlighter/browser/highlightDecorations', 'wordHighlightTextBorder', "Border color of a textual occurrence for a symbol."));
+const overviewRulerWordHighlightForeground = registerColor('editorOverviewRuler.wordHighlightForeground', '#A0A0A0CC', nls.localize('vs/editor/contrib/wordHighlighter/browser/highlightDecorations', 'overviewRulerWordHighlightForeground', 'Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
+const overviewRulerWordHighlightStrongForeground = registerColor('editorOverviewRuler.wordHighlightStrongForeground', '#C0A0C0CC', nls.localize('vs/editor/contrib/wordHighlighter/browser/highlightDecorations', 'overviewRulerWordHighlightStrongForeground', 'Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
+const overviewRulerWordHighlightTextForeground = registerColor('editorOverviewRuler.wordHighlightTextForeground', overviewRulerSelectionHighlightForeground, nls.localize('vs/editor/contrib/wordHighlighter/browser/highlightDecorations', 'overviewRulerWordHighlightTextForeground', 'Overview ruler marker color of a textual occurrence for a symbol. The color must not be opaque so as not to hide underlying decorations.'), true);
 const _WRITE_OPTIONS = ModelDecorationOptions.register({
     description: 'word-highlight-strong',
     stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */,
diff --git a/esm/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.js b/esm/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.js
index 6a1c31704b34873d08b2bfed6dbc76a2fca7b096..c39f257068740de77e9e815b735a27839c9c6da4 100644
--- a/esm/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.js
+++ b/esm/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.js
@@ -706,7 +706,7 @@ class NextWordHighlightAction extends WordHighlightNavigationAction {
     constructor() {
         super(true, {
             id: 'editor.action.wordHighlight.next',
-            label: nls.localize('wordHighlight.next.label', "Go to Next Symbol Highlight"),
+            label: nls.localize('vs/editor/contrib/wordHighlighter/browser/wordHighlighter', 'wordHighlight.next.label', "Go to Next Symbol Highlight"),
             alias: 'Go to Next Symbol Highlight',
             precondition: ctxHasWordHighlights,
             kbOpts: {
@@ -721,7 +721,7 @@ class PrevWordHighlightAction extends WordHighlightNavigationAction {
     constructor() {
         super(false, {
             id: 'editor.action.wordHighlight.prev',
-            label: nls.localize('wordHighlight.previous.label', "Go to Previous Symbol Highlight"),
+            label: nls.localize('vs/editor/contrib/wordHighlighter/browser/wordHighlighter', 'wordHighlight.previous.label', "Go to Previous Symbol Highlight"),
             alias: 'Go to Previous Symbol Highlight',
             precondition: ctxHasWordHighlights,
             kbOpts: {
@@ -736,7 +736,7 @@ class TriggerWordHighlightAction extends EditorAction {
     constructor() {
         super({
             id: 'editor.action.wordHighlight.trigger',
-            label: nls.localize('wordHighlight.trigger.label', "Trigger Symbol Highlight"),
+            label: nls.localize('vs/editor/contrib/wordHighlighter/browser/wordHighlighter', 'wordHighlight.trigger.label', "Trigger Symbol Highlight"),
             alias: 'Trigger Symbol Highlight',
             precondition: undefined,
             kbOpts: {
diff --git a/esm/vs/editor/contrib/wordOperations/browser/wordOperations.js b/esm/vs/editor/contrib/wordOperations/browser/wordOperations.js
index 37c988bbd6aea3fc51ab29dee9bf35898e67e9c0..84e2917557280d07352c3f053d4e645e9037ca2e 100644
--- a/esm/vs/editor/contrib/wordOperations/browser/wordOperations.js
+++ b/esm/vs/editor/contrib/wordOperations/browser/wordOperations.js
@@ -395,7 +395,7 @@ export class DeleteInsideWord extends EditorAction {
         super({
             id: 'deleteInsideWord',
             precondition: EditorContextKeys.writable,
-            label: nls.localize('deleteInsideWord', "Delete Word"),
+            label: nls.localize('vs/editor/contrib/wordOperations/browser/wordOperations', 'deleteInsideWord', "Delete Word"),
             alias: 'Delete Word'
         });
     }
diff --git a/esm/vs/nls.js b/esm/vs/nls.js
index 608714ffda2f89415ecda3c2e69bda6b5e70e18e..32c1777bf6f47a2299daef49af4417c1bba28b69 100644
--- a/esm/vs/nls.js
+++ b/esm/vs/nls.js
@@ -7,69 +7,102 @@ import { getNLSLanguage, getNLSMessages } from './nls.messages.js';
 // eslint-disable-next-line local/code-import-patterns
 export { getNLSLanguage, getNLSMessages } from './nls.messages.js';
 const isPseudo = getNLSLanguage() === 'pseudo' || (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);
-function _format(message, args) {
-    let result;
+
+function _format(message = "", args = []) {
+    let result
     if (args.length === 0) {
-        result = message;
-    }
-    else {
+      result = message
+    } else {
+      try {
         result = message.replace(/\{(\d+)\}/g, (match, rest) => {
-            const index = rest[0];
-            const arg = args[index];
-            let result = match;
-            if (typeof arg === 'string') {
-                result = arg;
-            }
-            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {
-                result = String(arg);
-            }
-            return result;
-        });
+          const index = rest[0]
+          const arg = args[index]
+          let result = match
+          if (typeof arg === "string") {
+            result = arg
+          } else if (typeof arg === "number" || typeof arg === "boolean" || arg === void 0 || arg === null) {
+            result = String(arg)
+          }
+          return result
+        })
+      } catch (e) {
+        if (globalThis?.__MONACO__DEBUG__) {
+          console.warn("Localization format error", e)
+        }
+      }
     }
     if (isPseudo) {
-        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]
-        result = '\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\uFF3D';
+      // FF3B and FF3D is the Unicode zenkaku representation for [ and ]
+      result = "\uFF3B" + result.replace(/[aouei]/g, "$&$&") + "\uFF3D"
     }
-    return result;
-}
-/**
- * @skipMangle
- */
-export function localize(data /* | number when built */, message /* | null when built */, ...args) {
-    if (typeof data === 'number') {
-        return _format(lookupMessage(data, message), args);
+    return result || message
+  }
+  
+  export function localize(path, data, defaultMessage, ...args) {
+    const key = typeof data === "object" ? data.key : data
+    const translations = getTranslations()
+    const translation = getTranslation(path, key, defaultMessage)
+  
+    if (!translation) warnMissingTranslation(path, key, defaultMessage)
+  
+    const message = translation || defaultMessage
+  
+    if (typeof data === "number") {
+      return _format(lookupMessage(data, message), args)
     }
-    return _format(message, args);
-}
-/**
- * Only used when built: Looks up the message in the global NLS table.
- * This table is being made available as a global through bootstrapping
- * depending on the target context.
- */
-function lookupMessage(index, fallback) {
-    const message = getNLSMessages()?.[index];
-    if (typeof message !== 'string') {
-        if (typeof fallback === 'string') {
-            return fallback;
-        }
-        throw new Error(`!!! NLS MISSING: ${index} !!!`);
+  
+    return _format(message, args)
+  }
+  
+  /**
+   * Only used when built: Looks up the message in the global NLS table.
+   * This table is being made available as a global through bootstrapping
+   * depending on the target context.
+   */
+  function lookupMessage(index, fallback) {
+    const message = getNLSMessages()?.[index]
+    if (typeof message !== "string") {
+      if (typeof fallback === "string") {
+        return fallback
+      }
+      throw new Error(`!!! NLS MISSING: ${index} !!!`)
     }
-    return message;
-}
-/**
- * @skipMangle
- */
-export function localize2(data /* | number when built */, originalMessage, ...args) {
-    let message;
-    if (typeof data === 'number') {
-        message = lookupMessage(data, originalMessage);
+    return message
+  }
+  
+  export function localize2(path, data, defaultMessage, ...args) {
+    const key = typeof data === "object" ? data.key : data
+    const translations = getTranslations()
+    const translation = getTranslation(path, key, defaultMessage)
+  
+    if (!translation) warnMissingTranslation(path, key, defaultMessage)
+  
+    const message = translation || defaultMessage
+    const value = _format(message, args)
+  
+    return {
+      value,
+      original: defaultMessage === message ? value : _format(defaultMessage, args),
     }
-    else {
-        message = originalMessage;
+  }
+  
+  function getTranslation(path, key, defaultMessage) {
+    try {
+      return translations[path]?.[key]
+    } catch (e) {
+      if (globalThis?.__MONACO__DEBUG__) {
+        console.warn("Translation lookup error", e)
+      }
+      return undefined
     }
-    const value = _format(message, args);
-    return {
-        value,
-        original: originalMessage === message ? value : _format(originalMessage, args)
-    };
-}
+  }
+  
+  function getTranslations() {
+    return globalThis?.__MONACO_TRANSLATIONS__ || {}
+  }
+  
+  function warnMissingTranslation(path, key, defaultMessage) {
+    if (globalThis?.__MONACO__DEBUG__) {
+      console.warn(`No translation found for "${path}.${key}"\n\nUsing default message: "${defaultMessage}"`)
+    }
+  }
\ No newline at end of file
diff --git a/esm/vs/platform/accessibilitySignal/browser/accessibilitySignalService.js b/esm/vs/platform/accessibilitySignal/browser/accessibilitySignalService.js
index 68478ea930dbf4dcdc1338cffce51945d8f19a42..0347e0fa0250b9954d7691dcdd6fda92b6ae1830 100644
--- a/esm/vs/platform/accessibilitySignal/browser/accessibilitySignalService.js
+++ b/esm/vs/platform/accessibilitySignal/browser/accessibilitySignalService.js
@@ -60,163 +60,163 @@ export class AccessibilitySignal {
         return signal;
     }
     static { this.errorAtPosition = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.positionHasError.name', 'Error at Position'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.positionHasError.name', 'Error at Position'),
         sound: Sound.error,
-        announcementMessage: localize('accessibility.signals.positionHasError', 'Error'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.positionHasError', 'Error'),
         settingsKey: 'accessibility.signals.positionHasError',
         delaySettingsKey: 'accessibility.signalOptions.delays.errorAtPosition'
     }); }
     static { this.warningAtPosition = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.positionHasWarning.name', 'Warning at Position'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.positionHasWarning.name', 'Warning at Position'),
         sound: Sound.warning,
-        announcementMessage: localize('accessibility.signals.positionHasWarning', 'Warning'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.positionHasWarning', 'Warning'),
         settingsKey: 'accessibility.signals.positionHasWarning',
         delaySettingsKey: 'accessibility.signalOptions.delays.warningAtPosition'
     }); }
     static { this.errorOnLine = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.lineHasError.name', 'Error on Line'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.lineHasError.name', 'Error on Line'),
         sound: Sound.error,
         legacySoundSettingsKey: 'audioCues.lineHasError',
         legacyAnnouncementSettingsKey: 'accessibility.alert.error',
-        announcementMessage: localize('accessibility.signals.lineHasError', 'Error on Line'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.lineHasError', 'Error on Line'),
         settingsKey: 'accessibility.signals.lineHasError',
     }); }
     static { this.warningOnLine = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.lineHasWarning.name', 'Warning on Line'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.lineHasWarning.name', 'Warning on Line'),
         sound: Sound.warning,
         legacySoundSettingsKey: 'audioCues.lineHasWarning',
         legacyAnnouncementSettingsKey: 'accessibility.alert.warning',
-        announcementMessage: localize('accessibility.signals.lineHasWarning', 'Warning on Line'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.lineHasWarning', 'Warning on Line'),
         settingsKey: 'accessibility.signals.lineHasWarning',
     }); }
     static { this.foldedArea = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.lineHasFoldedArea.name', 'Folded Area on Line'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.lineHasFoldedArea.name', 'Folded Area on Line'),
         sound: Sound.foldedArea,
         legacySoundSettingsKey: 'audioCues.lineHasFoldedArea',
         legacyAnnouncementSettingsKey: 'accessibility.alert.foldedArea',
-        announcementMessage: localize('accessibility.signals.lineHasFoldedArea', 'Folded'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.lineHasFoldedArea', 'Folded'),
         settingsKey: 'accessibility.signals.lineHasFoldedArea',
     }); }
     static { this.break = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.lineHasBreakpoint.name', 'Breakpoint on Line'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.lineHasBreakpoint.name', 'Breakpoint on Line'),
         sound: Sound.break,
         legacySoundSettingsKey: 'audioCues.lineHasBreakpoint',
         legacyAnnouncementSettingsKey: 'accessibility.alert.breakpoint',
-        announcementMessage: localize('accessibility.signals.lineHasBreakpoint', 'Breakpoint'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.lineHasBreakpoint', 'Breakpoint'),
         settingsKey: 'accessibility.signals.lineHasBreakpoint',
     }); }
     static { this.inlineSuggestion = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.lineHasInlineSuggestion.name', 'Inline Suggestion on Line'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.lineHasInlineSuggestion.name', 'Inline Suggestion on Line'),
         sound: Sound.quickFixes,
         legacySoundSettingsKey: 'audioCues.lineHasInlineSuggestion',
         settingsKey: 'accessibility.signals.lineHasInlineSuggestion',
     }); }
     static { this.terminalQuickFix = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.terminalQuickFix.name', 'Terminal Quick Fix'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.terminalQuickFix.name', 'Terminal Quick Fix'),
         sound: Sound.quickFixes,
         legacySoundSettingsKey: 'audioCues.terminalQuickFix',
         legacyAnnouncementSettingsKey: 'accessibility.alert.terminalQuickFix',
-        announcementMessage: localize('accessibility.signals.terminalQuickFix', 'Quick Fix'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.terminalQuickFix', 'Quick Fix'),
         settingsKey: 'accessibility.signals.terminalQuickFix',
     }); }
     static { this.onDebugBreak = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.onDebugBreak.name', 'Debugger Stopped on Breakpoint'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.onDebugBreak.name', 'Debugger Stopped on Breakpoint'),
         sound: Sound.break,
         legacySoundSettingsKey: 'audioCues.onDebugBreak',
         legacyAnnouncementSettingsKey: 'accessibility.alert.onDebugBreak',
-        announcementMessage: localize('accessibility.signals.onDebugBreak', 'Breakpoint'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.onDebugBreak', 'Breakpoint'),
         settingsKey: 'accessibility.signals.onDebugBreak',
     }); }
     static { this.noInlayHints = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.noInlayHints', 'No Inlay Hints on Line'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.noInlayHints', 'No Inlay Hints on Line'),
         sound: Sound.error,
         legacySoundSettingsKey: 'audioCues.noInlayHints',
         legacyAnnouncementSettingsKey: 'accessibility.alert.noInlayHints',
-        announcementMessage: localize('accessibility.signals.noInlayHints', 'No Inlay Hints'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.noInlayHints', 'No Inlay Hints'),
         settingsKey: 'accessibility.signals.noInlayHints',
     }); }
     static { this.taskCompleted = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.taskCompleted', 'Task Completed'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.taskCompleted', 'Task Completed'),
         sound: Sound.taskCompleted,
         legacySoundSettingsKey: 'audioCues.taskCompleted',
         legacyAnnouncementSettingsKey: 'accessibility.alert.taskCompleted',
-        announcementMessage: localize('accessibility.signals.taskCompleted', 'Task Completed'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.taskCompleted', 'Task Completed'),
         settingsKey: 'accessibility.signals.taskCompleted',
     }); }
     static { this.taskFailed = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.taskFailed', 'Task Failed'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.taskFailed', 'Task Failed'),
         sound: Sound.taskFailed,
         legacySoundSettingsKey: 'audioCues.taskFailed',
         legacyAnnouncementSettingsKey: 'accessibility.alert.taskFailed',
-        announcementMessage: localize('accessibility.signals.taskFailed', 'Task Failed'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.taskFailed', 'Task Failed'),
         settingsKey: 'accessibility.signals.taskFailed',
     }); }
     static { this.terminalCommandFailed = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.terminalCommandFailed', 'Terminal Command Failed'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.terminalCommandFailed', 'Terminal Command Failed'),
         sound: Sound.error,
         legacySoundSettingsKey: 'audioCues.terminalCommandFailed',
         legacyAnnouncementSettingsKey: 'accessibility.alert.terminalCommandFailed',
-        announcementMessage: localize('accessibility.signals.terminalCommandFailed', 'Command Failed'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.terminalCommandFailed', 'Command Failed'),
         settingsKey: 'accessibility.signals.terminalCommandFailed',
     }); }
     static { this.terminalCommandSucceeded = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.terminalCommandSucceeded', 'Terminal Command Succeeded'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.terminalCommandSucceeded', 'Terminal Command Succeeded'),
         sound: Sound.success,
-        announcementMessage: localize('accessibility.signals.terminalCommandSucceeded', 'Command Succeeded'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.terminalCommandSucceeded', 'Command Succeeded'),
         settingsKey: 'accessibility.signals.terminalCommandSucceeded',
     }); }
     static { this.terminalBell = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.terminalBell', 'Terminal Bell'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.terminalBell', 'Terminal Bell'),
         sound: Sound.terminalBell,
         legacySoundSettingsKey: 'audioCues.terminalBell',
         legacyAnnouncementSettingsKey: 'accessibility.alert.terminalBell',
-        announcementMessage: localize('accessibility.signals.terminalBell', 'Terminal Bell'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.terminalBell', 'Terminal Bell'),
         settingsKey: 'accessibility.signals.terminalBell',
     }); }
     static { this.notebookCellCompleted = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.notebookCellCompleted', 'Notebook Cell Completed'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.notebookCellCompleted', 'Notebook Cell Completed'),
         sound: Sound.taskCompleted,
         legacySoundSettingsKey: 'audioCues.notebookCellCompleted',
         legacyAnnouncementSettingsKey: 'accessibility.alert.notebookCellCompleted',
-        announcementMessage: localize('accessibility.signals.notebookCellCompleted', 'Notebook Cell Completed'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.notebookCellCompleted', 'Notebook Cell Completed'),
         settingsKey: 'accessibility.signals.notebookCellCompleted',
     }); }
     static { this.notebookCellFailed = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.notebookCellFailed', 'Notebook Cell Failed'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.notebookCellFailed', 'Notebook Cell Failed'),
         sound: Sound.taskFailed,
         legacySoundSettingsKey: 'audioCues.notebookCellFailed',
         legacyAnnouncementSettingsKey: 'accessibility.alert.notebookCellFailed',
-        announcementMessage: localize('accessibility.signals.notebookCellFailed', 'Notebook Cell Failed'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.notebookCellFailed', 'Notebook Cell Failed'),
         settingsKey: 'accessibility.signals.notebookCellFailed',
     }); }
     static { this.diffLineInserted = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.diffLineInserted', 'Diff Line Inserted'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.diffLineInserted', 'Diff Line Inserted'),
         sound: Sound.diffLineInserted,
         legacySoundSettingsKey: 'audioCues.diffLineInserted',
         settingsKey: 'accessibility.signals.diffLineInserted',
     }); }
     static { this.diffLineDeleted = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.diffLineDeleted', 'Diff Line Deleted'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.diffLineDeleted', 'Diff Line Deleted'),
         sound: Sound.diffLineDeleted,
         legacySoundSettingsKey: 'audioCues.diffLineDeleted',
         settingsKey: 'accessibility.signals.diffLineDeleted',
     }); }
     static { this.diffLineModified = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.diffLineModified', 'Diff Line Modified'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.diffLineModified', 'Diff Line Modified'),
         sound: Sound.diffLineModified,
         legacySoundSettingsKey: 'audioCues.diffLineModified',
         settingsKey: 'accessibility.signals.diffLineModified',
     }); }
     static { this.chatRequestSent = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.chatRequestSent', 'Chat Request Sent'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.chatRequestSent', 'Chat Request Sent'),
         sound: Sound.chatRequestSent,
         legacySoundSettingsKey: 'audioCues.chatRequestSent',
         legacyAnnouncementSettingsKey: 'accessibility.alert.chatRequestSent',
-        announcementMessage: localize('accessibility.signals.chatRequestSent', 'Chat Request Sent'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.chatRequestSent', 'Chat Request Sent'),
         settingsKey: 'accessibility.signals.chatRequestSent',
     }); }
     static { this.chatResponseReceived = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.chatResponseReceived', 'Chat Response Received'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.chatResponseReceived', 'Chat Response Received'),
         legacySoundSettingsKey: 'audioCues.chatResponseReceived',
         sound: {
             randomOneOf: [
@@ -229,45 +229,45 @@ export class AccessibilitySignal {
         settingsKey: 'accessibility.signals.chatResponseReceived'
     }); }
     static { this.progress = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.progress', 'Progress'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.progress', 'Progress'),
         sound: Sound.progress,
         legacySoundSettingsKey: 'audioCues.chatResponsePending',
         legacyAnnouncementSettingsKey: 'accessibility.alert.progress',
-        announcementMessage: localize('accessibility.signals.progress', 'Progress'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.progress', 'Progress'),
         settingsKey: 'accessibility.signals.progress'
     }); }
     static { this.clear = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.clear', 'Clear'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.clear', 'Clear'),
         sound: Sound.clear,
         legacySoundSettingsKey: 'audioCues.clear',
         legacyAnnouncementSettingsKey: 'accessibility.alert.clear',
-        announcementMessage: localize('accessibility.signals.clear', 'Clear'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.clear', 'Clear'),
         settingsKey: 'accessibility.signals.clear'
     }); }
     static { this.save = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.save', 'Save'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.save', 'Save'),
         sound: Sound.save,
         legacySoundSettingsKey: 'audioCues.save',
         legacyAnnouncementSettingsKey: 'accessibility.alert.save',
-        announcementMessage: localize('accessibility.signals.save', 'Save'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.save', 'Save'),
         settingsKey: 'accessibility.signals.save'
     }); }
     static { this.format = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.format', 'Format'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.format', 'Format'),
         sound: Sound.format,
         legacySoundSettingsKey: 'audioCues.format',
         legacyAnnouncementSettingsKey: 'accessibility.alert.format',
-        announcementMessage: localize('accessibility.signals.format', 'Format'),
+        announcementMessage: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibility.signals.format', 'Format'),
         settingsKey: 'accessibility.signals.format'
     }); }
     static { this.voiceRecordingStarted = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.voiceRecordingStarted', 'Voice Recording Started'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.voiceRecordingStarted', 'Voice Recording Started'),
         sound: Sound.voiceRecordingStarted,
         legacySoundSettingsKey: 'audioCues.voiceRecordingStarted',
         settingsKey: 'accessibility.signals.voiceRecordingStarted'
     }); }
     static { this.voiceRecordingStopped = AccessibilitySignal.register({
-        name: localize('accessibilitySignals.voiceRecordingStopped', 'Voice Recording Stopped'),
+        name: localize('vs/platform/accessibilitySignal/browser/accessibilitySignalService', 'accessibilitySignals.voiceRecordingStopped', 'Voice Recording Stopped'),
         sound: Sound.voiceRecordingStopped,
         legacySoundSettingsKey: 'audioCues.voiceRecordingStopped',
         settingsKey: 'accessibility.signals.voiceRecordingStopped'
diff --git a/esm/vs/platform/action/common/actionCommonCategories.js b/esm/vs/platform/action/common/actionCommonCategories.js
index e53faa0681c9fb127373cdc71cb83f21cd125751..abbe3cf558b37baef12da73606c86107f35a6b2f 100644
--- a/esm/vs/platform/action/common/actionCommonCategories.js
+++ b/esm/vs/platform/action/common/actionCommonCategories.js
@@ -4,10 +4,10 @@
  *--------------------------------------------------------------------------------------------*/
 import { localize2 } from '../../../nls.js';
 export const Categories = Object.freeze({
-    View: localize2('view', 'View'),
-    Help: localize2('help', 'Help'),
-    Test: localize2('test', 'Test'),
-    File: localize2('file', 'File'),
-    Preferences: localize2('preferences', 'Preferences'),
-    Developer: localize2({ key: 'developer', comment: ['A developer on Code itself or someone diagnosing issues in Code'] }, "Developer"),
+    View: localize2('vs/platform/action/common/actionCommonCategories', 'view', 'View'),
+    Help: localize2('vs/platform/action/common/actionCommonCategories', 'help', 'Help'),
+    Test: localize2('vs/platform/action/common/actionCommonCategories', 'test', 'Test'),
+    File: localize2('vs/platform/action/common/actionCommonCategories', 'file', 'File'),
+    Preferences: localize2('vs/platform/action/common/actionCommonCategories', 'preferences', 'Preferences'),
+    Developer: localize2('vs/platform/action/common/actionCommonCategories', { key: 'developer', comment: ['A developer on Code itself or someone diagnosing issues in Code'] }, "Developer"),
 });
diff --git a/esm/vs/platform/actionWidget/browser/actionList.js b/esm/vs/platform/actionWidget/browser/actionList.js
index d7de1f2bf6413aa2092b5e41b973e0380fc11b63..6797b99a553f52871ff9fe53fe18134724c7945e 100644
--- a/esm/vs/platform/actionWidget/browser/actionList.js
+++ b/esm/vs/platform/actionWidget/browser/actionList.js
@@ -84,10 +84,10 @@ let ActionItemRenderer = class ActionItemRenderer {
         }
         else if (actionTitle && previewTitle) {
             if (this._supportsPreview && element.canPreview) {
-                data.container.title = localize({ key: 'label-preview', comment: ['placeholders are keybindings, e.g "F2 to Apply, Shift+F2 to Preview"'] }, "{0} to Apply, {1} to Preview", actionTitle, previewTitle);
+                data.container.title = localize('vs/platform/actionWidget/browser/actionList', { key: 'label-preview', comment: ['placeholders are keybindings, e.g "F2 to Apply, Shift+F2 to Preview"'] }, "{0} to Apply, {1} to Preview", actionTitle, previewTitle);
             }
             else {
-                data.container.title = localize({ key: 'label', comment: ['placeholder is a keybinding, e.g "F2 to Apply"'] }, "{0} to Apply", actionTitle);
+                data.container.title = localize('vs/platform/actionWidget/browser/actionList', { key: 'label', comment: ['placeholder is a keybinding, e.g "F2 to Apply"'] }, "{0} to Apply", actionTitle);
             }
         }
         else {
@@ -141,13 +141,13 @@ let ActionList = class ActionList extends Disposable {
                     if (element.kind === "action" /* ActionListItemKind.Action */) {
                         let label = element.label ? stripNewlines(element?.label) : '';
                         if (element.disabled) {
-                            label = localize({ key: 'customQuickFixWidget.labels', comment: [`Action widget labels for accessibility.`] }, "{0}, Disabled Reason: {1}", label, element.disabled);
+                            label = localize('vs/platform/actionWidget/browser/actionList', { key: 'customQuickFixWidget.labels', comment: [`Action widget labels for accessibility.`] }, "{0}, Disabled Reason: {1}", label, element.disabled);
                         }
                         return label;
                     }
                     return null;
                 },
-                getWidgetAriaLabel: () => localize({ key: 'customQuickFixWidget', comment: [`An action widget option`] }, "Action Widget"),
+                getWidgetAriaLabel: () => localize('vs/platform/actionWidget/browser/actionList', { key: 'customQuickFixWidget', comment: [`An action widget option`] }, "Action Widget"),
                 getRole: (e) => e.kind === "action" /* ActionListItemKind.Action */ ? 'option' : 'separator',
                 getWidgetRole: () => 'listbox',
             },
diff --git a/esm/vs/platform/actionWidget/browser/actionWidget.js b/esm/vs/platform/actionWidget/browser/actionWidget.js
index 84b2a3982a2dc6c86810987cd62c09d0947c00d4..28756a32e8ea785e92b5a271c14718a0c4fdc21b 100644
--- a/esm/vs/platform/actionWidget/browser/actionWidget.js
+++ b/esm/vs/platform/actionWidget/browser/actionWidget.js
@@ -23,9 +23,9 @@ import { IContextViewService } from '../../contextview/browser/contextView.js';
 import { registerSingleton } from '../../instantiation/common/extensions.js';
 import { createDecorator, IInstantiationService } from '../../instantiation/common/instantiation.js';
 import { inputActiveOptionBackground, registerColor } from '../../theme/common/colorRegistry.js';
-registerColor('actionBar.toggledBackground', inputActiveOptionBackground, localize('actionBar.toggledBackground', 'Background color for toggled action items in action bar.'));
+registerColor('actionBar.toggledBackground', inputActiveOptionBackground, localize('vs/platform/actionWidget/browser/actionWidget', 'actionBar.toggledBackground', 'Background color for toggled action items in action bar.'));
 const ActionWidgetContextKeys = {
-    Visible: new RawContextKey('codeActionMenuVisible', false, localize('codeActionMenuVisible', "Whether the action widget list is visible"))
+    Visible: new RawContextKey('codeActionMenuVisible', false, localize('vs/platform/actionWidget/browser/actionWidget', 'codeActionMenuVisible', "Whether the action widget list is visible"))
 };
 export const IActionWidgetService = createDecorator('actionWidgetService');
 let ActionWidgetService = class ActionWidgetService extends Disposable {
@@ -131,7 +131,7 @@ registerAction2(class extends Action2 {
     constructor() {
         super({
             id: 'hideCodeActionWidget',
-            title: localize2('hideCodeActionWidget.title', "Hide action widget"),
+            title: localize2('vs/platform/actionWidget/browser/actionWidget', 'hideCodeActionWidget.title', "Hide action widget"),
             precondition: ActionWidgetContextKeys.Visible,
             keybinding: {
                 weight,
@@ -148,7 +148,7 @@ registerAction2(class extends Action2 {
     constructor() {
         super({
             id: 'selectPrevCodeAction',
-            title: localize2('selectPrevCodeAction.title', "Select previous action"),
+            title: localize2('vs/platform/actionWidget/browser/actionWidget', 'selectPrevCodeAction.title', "Select previous action"),
             precondition: ActionWidgetContextKeys.Visible,
             keybinding: {
                 weight,
@@ -169,7 +169,7 @@ registerAction2(class extends Action2 {
     constructor() {
         super({
             id: 'selectNextCodeAction',
-            title: localize2('selectNextCodeAction.title', "Select next action"),
+            title: localize2('vs/platform/actionWidget/browser/actionWidget', 'selectNextCodeAction.title', "Select next action"),
             precondition: ActionWidgetContextKeys.Visible,
             keybinding: {
                 weight,
@@ -190,7 +190,7 @@ registerAction2(class extends Action2 {
     constructor() {
         super({
             id: acceptSelectedActionCommand,
-            title: localize2('acceptSelected.title', "Accept selected action"),
+            title: localize2('vs/platform/actionWidget/browser/actionWidget', 'acceptSelected.title', "Accept selected action"),
             precondition: ActionWidgetContextKeys.Visible,
             keybinding: {
                 weight,
@@ -210,7 +210,7 @@ registerAction2(class extends Action2 {
     constructor() {
         super({
             id: previewSelectedActionCommand,
-            title: localize2('previewSelected.title', "Preview selected action"),
+            title: localize2('vs/platform/actionWidget/browser/actionWidget', 'previewSelected.title', "Preview selected action"),
             precondition: ActionWidgetContextKeys.Visible,
             keybinding: {
                 weight,
diff --git a/esm/vs/platform/actions/browser/menuEntryActionViewItem.js b/esm/vs/platform/actions/browser/menuEntryActionViewItem.js
index d3cfb91c772e61b79f6270eddac50c13ea813424..fffaf1ddf73579b5dde59eb803943451d54c1183 100644
--- a/esm/vs/platform/actions/browser/menuEntryActionViewItem.js
+++ b/esm/vs/platform/actions/browser/menuEntryActionViewItem.js
@@ -200,16 +200,16 @@ let MenuEntryActionViewItem = class MenuEntryActionViewItem extends ActionViewIt
         const keybindingLabel = keybinding && keybinding.getLabel();
         const tooltip = this._commandAction.tooltip || this._commandAction.label;
         let title = keybindingLabel
-            ? localize('titleAndKb', "{0} ({1})", tooltip, keybindingLabel)
+            ? localize('vs/platform/actions/browser/menuEntryActionViewItem', 'titleAndKb', "{0} ({1})", tooltip, keybindingLabel)
             : tooltip;
         if (!this._wantsAltCommand && this._menuItemAction.alt?.enabled) {
             const altTooltip = this._menuItemAction.alt.tooltip || this._menuItemAction.alt.label;
             const altKeybinding = this._keybindingService.lookupKeybinding(this._menuItemAction.alt.id, this._contextKeyService);
             const altKeybindingLabel = altKeybinding && altKeybinding.getLabel();
             const altTitleSection = altKeybindingLabel
-                ? localize('titleAndKb', "{0} ({1})", altTooltip, altKeybindingLabel)
+                ? localize('vs/platform/actions/browser/menuEntryActionViewItem', 'titleAndKb', "{0} ({1})", altTooltip, altKeybindingLabel)
                 : altTooltip;
-            title = localize('titleAndKbAndAlt', "{0}\n[{1}] {2}", title, UILabelProvider.modifierLabels[OS].altKey, altTitleSection);
+            title = localize('vs/platform/actions/browser/menuEntryActionViewItem', 'titleAndKbAndAlt', "{0}\n[{1}] {2}", title, UILabelProvider.modifierLabels[OS].altKey, altTitleSection);
         }
         return title;
     }
@@ -284,10 +284,10 @@ export class TextOnlyMenuEntryActionViewItem extends MenuEntryActionViewItem {
         if (this.label) {
             const kb2 = TextOnlyMenuEntryActionViewItem._symbolPrintEnter(kb);
             if (this._options?.conversational) {
-                this.label.textContent = localize({ key: 'content2', comment: ['A label with keybindg like "ESC to dismiss"'] }, '{1} to {0}', this._action.label, kb2);
+                this.label.textContent = localize('vs/platform/actions/browser/menuEntryActionViewItem', { key: 'content2', comment: ['A label with keybindg like "ESC to dismiss"'] }, '{1} to {0}', this._action.label, kb2);
             }
             else {
-                this.label.textContent = localize({ key: 'content', comment: ['A label', 'A keybinding'] }, '{0} ({1})', this._action.label, kb2);
+                this.label.textContent = localize('vs/platform/actions/browser/menuEntryActionViewItem', { key: 'content', comment: ['A label', 'A keybinding'] }, '{0} ({1})', this._action.label, kb2);
             }
         }
     }
diff --git a/esm/vs/platform/actions/browser/toolbar.js b/esm/vs/platform/actions/browser/toolbar.js
index 338d4f49d123bfd38f128c2a11081b79be9b847a..e0b0b81ffe902b5fa1f5084c8e3897a97a42133e 100644
--- a/esm/vs/platform/actions/browser/toolbar.js
+++ b/esm/vs/platform/actions/browser/toolbar.js
@@ -171,7 +171,7 @@ let WorkbenchToolBar = class WorkbenchToolBar extends ToolBar {
                     else {
                         primaryActions.push(toAction({
                             id: 'label',
-                            label: localize('hide', "Hide"),
+                            label: localize('vs/platform/actions/browser/toolbar', 'hide', "Hide"),
                             enabled: false,
                             run() { }
                         }));
@@ -186,7 +186,7 @@ let WorkbenchToolBar = class WorkbenchToolBar extends ToolBar {
                     actions.push(new Separator());
                     actions.push(toAction({
                         id: 'resetThisMenu',
-                        label: localize('resetThisMenu', "Reset Menu"),
+                        label: localize('vs/platform/actions/browser/toolbar', 'resetThisMenu', "Reset Menu"),
                         run: () => this._menuService.resetHiddenStates(menuIds)
                     }));
                 }
diff --git a/esm/vs/platform/actions/common/menuService.js b/esm/vs/platform/actions/common/menuService.js
index 486cf9ae468f9766fc6e789454d3ba0143bd2739..3ac419221da643f79daa69d04bdcc28d852f6235 100644
--- a/esm/vs/platform/actions/common/menuService.js
+++ b/esm/vs/platform/actions/common/menuService.js
@@ -403,7 +403,7 @@ function createMenuHide(menu, command, states) {
     const title = typeof command.title === 'string' ? command.title : command.title.value;
     const hide = toAction({
         id: `hide/${menu.id}/${id}`,
-        label: localize('hide.label', 'Hide \'{0}\'', title),
+        label: localize('vs/platform/actions/common/menuService', 'hide.label', 'Hide \'{0}\'', title),
         run() { states.updateHidden(menu, id, true); }
     });
     const toggle = toAction({
@@ -421,7 +421,7 @@ function createMenuHide(menu, command, states) {
 export function createConfigureKeybindingAction(commandService, keybindingService, commandId, when = undefined, enabled = true) {
     return toAction({
         id: `configureKeybinding/${commandId}`,
-        label: localize('configure keybinding', "Configure Keybinding"),
+        label: localize('vs/platform/actions/common/menuService', 'configure keybinding', "Configure Keybinding"),
         enabled,
         run() {
             // Only set the when clause when there is no keybinding
diff --git a/esm/vs/platform/configuration/common/configurationRegistry.js b/esm/vs/platform/configuration/common/configurationRegistry.js
index f5ee31fd3bdf72f2780a26cbec3b4723886e6748..75117285201bc329555b2a5d0bc130d2b9daaef9 100644
--- a/esm/vs/platform/configuration/common/configurationRegistry.js
+++ b/esm/vs/platform/configuration/common/configurationRegistry.js
@@ -29,7 +29,7 @@ class ConfigurationRegistry {
         this.configurationDefaultsOverrides = new Map();
         this.defaultLanguageConfigurationOverridesNode = {
             id: 'defaultOverrides',
-            title: nls.localize('defaultLanguageConfigurationOverrides.title', "Default Language Configuration Overrides"),
+            title: nls.localize('vs/platform/configuration/common/configurationRegistry', 'defaultLanguageConfigurationOverrides.title', "Default Language Configuration Overrides"),
             properties: {}
         };
         this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];
@@ -103,7 +103,7 @@ class ConfigurationRegistry {
         const property = {
             type: 'object',
             default: newDefaultOverride.value,
-            description: nls.localize('defaultLanguageConfiguration.description', "Configure settings to be overridden for the {0} language.", getLanguageTagSettingPlainKey(key)),
+            description: nls.localize('vs/platform/configuration/common/configurationRegistry', 'defaultLanguageConfiguration.description', "Configure settings to be overridden for the {0} language.", getLanguageTagSettingPlainKey(key)),
             $ref: resourceLanguageSettingsSchemaId,
             defaultDefaultValue: newDefaultOverride.value,
             source,
@@ -285,8 +285,8 @@ class ConfigurationRegistry {
             const overrideIdentifierProperty = `[${overrideIdentifier}]`;
             const resourceLanguagePropertiesSchema = {
                 type: 'object',
-                description: nls.localize('overrideSettings.defaultDescription', "Configure editor settings to be overridden for a language."),
-                errorMessage: nls.localize('overrideSettings.errorMessage', "This setting does not support per-language configuration."),
+                description: nls.localize('vs/platform/configuration/common/configurationRegistry', 'overrideSettings.defaultDescription', "Configure editor settings to be overridden for a language."),
+                errorMessage: nls.localize('vs/platform/configuration/common/configurationRegistry', 'overrideSettings.errorMessage', "This setting does not support per-language configuration."),
                 $ref: resourceLanguageSettingsSchemaId,
             };
             this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);
@@ -301,8 +301,8 @@ class ConfigurationRegistry {
     registerOverridePropertyPatternKey() {
         const resourceLanguagePropertiesSchema = {
             type: 'object',
-            description: nls.localize('overrideSettings.defaultDescription', "Configure editor settings to be overridden for a language."),
-            errorMessage: nls.localize('overrideSettings.errorMessage', "This setting does not support per-language configuration."),
+            description: nls.localize('vs/platform/configuration/common/configurationRegistry', 'overrideSettings.defaultDescription', "Configure editor settings to be overridden for a language."),
+            errorMessage: nls.localize('vs/platform/configuration/common/configurationRegistry', 'overrideSettings.errorMessage', "This setting does not support per-language configuration."),
             $ref: resourceLanguageSettingsSchemaId,
         };
         allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;
@@ -374,16 +374,16 @@ const configurationRegistry = new ConfigurationRegistry();
 Registry.add(Extensions.Configuration, configurationRegistry);
 export function validateProperty(property, schema) {
     if (!property.trim()) {
-        return nls.localize('config.property.empty', "Cannot register an empty property");
+        return nls.localize('vs/platform/configuration/common/configurationRegistry', 'config.property.empty', "Cannot register an empty property");
     }
     if (OVERRIDE_PROPERTY_REGEX.test(property)) {
-        return nls.localize('config.property.languageDefault', "Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.", property);
+        return nls.localize('vs/platform/configuration/common/configurationRegistry', 'config.property.languageDefault', "Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.", property);
     }
     if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {
-        return nls.localize('config.property.duplicate', "Cannot register '{0}'. This property is already registered.", property);
+        return nls.localize('vs/platform/configuration/common/configurationRegistry', 'config.property.duplicate', "Cannot register '{0}'. This property is already registered.", property);
     }
     if (schema.policy?.name && configurationRegistry.getPolicyConfigurations().get(schema.policy?.name) !== undefined) {
-        return nls.localize('config.policy.duplicate', "Cannot register '{0}'. The associated policy {1} is already registered with {2}.", property, schema.policy?.name, configurationRegistry.getPolicyConfigurations().get(schema.policy?.name));
+        return nls.localize('vs/platform/configuration/common/configurationRegistry', 'config.policy.duplicate', "Cannot register '{0}'. The associated policy {1} is already registered with {2}.", property, schema.policy?.name, configurationRegistry.getPolicyConfigurations().get(schema.policy?.name));
     }
     return null;
 }
diff --git a/esm/vs/platform/contextkey/browser/contextKeyService.js b/esm/vs/platform/contextkey/browser/contextKeyService.js
index cf3a5f4be81900b908ced4968994569fd4a87e03..755c06e2b275fb86abdb7fcf577ecfe6694addb5 100644
--- a/esm/vs/platform/contextkey/browser/contextKeyService.js
+++ b/esm/vs/platform/contextkey/browser/contextKeyService.js
@@ -414,7 +414,7 @@ CommandsRegistry.registerCommand({
         return [...RawContextKey.all()].sort((a, b) => a.key.localeCompare(b.key));
     },
     metadata: {
-        description: localize('getContextKeyInfo', "A command that returns information about context keys"),
+        description: localize('vs/platform/contextkey/browser/contextKeyService', 'getContextKeyInfo', "A command that returns information about context keys"),
         args: []
     }
 });
diff --git a/esm/vs/platform/contextkey/common/contextkey.js b/esm/vs/platform/contextkey/common/contextkey.js
index d8f0fd9e0ec9375b16602454a9cde124403dbf87..0b2e4e5408d4ce635eea501bd46e44dd85a90e96 100644
--- a/esm/vs/platform/contextkey/common/contextkey.js
+++ b/esm/vs/platform/contextkey/common/contextkey.js
@@ -23,14 +23,14 @@ const hasOwnProperty = Object.prototype.hasOwnProperty;
 const defaultConfig = {
     regexParsingWithErrorRecovery: true
 };
-const errorEmptyString = localize('contextkey.parser.error.emptyString', "Empty context key expression");
-const hintEmptyString = localize('contextkey.parser.error.emptyString.hint', "Did you forget to write an expression? You can also put 'false' or 'true' to always evaluate to false or true, respectively.");
-const errorNoInAfterNot = localize('contextkey.parser.error.noInAfterNot', "'in' after 'not'.");
-const errorClosingParenthesis = localize('contextkey.parser.error.closingParenthesis', "closing parenthesis ')'");
-const errorUnexpectedToken = localize('contextkey.parser.error.unexpectedToken', "Unexpected token");
-const hintUnexpectedToken = localize('contextkey.parser.error.unexpectedToken.hint', "Did you forget to put && or || before the token?");
-const errorUnexpectedEOF = localize('contextkey.parser.error.unexpectedEOF', "Unexpected end of expression");
-const hintUnexpectedEOF = localize('contextkey.parser.error.unexpectedEOF.hint', "Did you forget to put a context key?");
+const errorEmptyString = localize('vs/platform/contextkey/common/contextkey', 'contextkey.parser.error.emptyString', "Empty context key expression");
+const hintEmptyString = localize('vs/platform/contextkey/common/contextkey', 'contextkey.parser.error.emptyString.hint', "Did you forget to write an expression? You can also put 'false' or 'true' to always evaluate to false or true, respectively.");
+const errorNoInAfterNot = localize('vs/platform/contextkey/common/contextkey', 'contextkey.parser.error.noInAfterNot', "'in' after 'not'.");
+const errorClosingParenthesis = localize('vs/platform/contextkey/common/contextkey', 'contextkey.parser.error.closingParenthesis', "closing parenthesis ')'");
+const errorUnexpectedToken = localize('vs/platform/contextkey/common/contextkey', 'contextkey.parser.error.unexpectedToken', "Unexpected token");
+const hintUnexpectedToken = localize('vs/platform/contextkey/common/contextkey', 'contextkey.parser.error.unexpectedToken.hint', "Did you forget to put && or || before the token?");
+const errorUnexpectedEOF = localize('vs/platform/contextkey/common/contextkey', 'contextkey.parser.error.unexpectedEOF', "Unexpected end of expression");
+const hintUnexpectedEOF = localize('vs/platform/contextkey/common/contextkey', 'contextkey.parser.error.unexpectedEOF.hint', "Did you forget to put a context key?");
 /**
  * A parser for context key expressions.
  *
@@ -375,7 +375,7 @@ export class Parser {
         throw this._errExpectedButGot(message, this._peek());
     }
     _errExpectedButGot(expected, got, additionalInfo) {
-        const message = localize('contextkey.parser.error.expectedButGot', "Expected: {0}\nReceived: '{1}'.", expected, Scanner.getLexeme(got));
+        const message = localize('vs/platform/contextkey/common/contextkey', 'contextkey.parser.error.expectedButGot', "Expected: {0}\nReceived: '{1}'.", expected, Scanner.getLexeme(got));
         const offset = got.offset;
         const lexeme = Scanner.getLexeme(got);
         this._parsingErrors.push({ message, offset, lexeme, additionalInfo });
diff --git a/esm/vs/platform/contextkey/common/contextkeys.js b/esm/vs/platform/contextkey/common/contextkeys.js
index cfa80dd27777405c8b366dd8a6c6f77617cfc627..32845152ac1250c6ed642b2accbce0acb3ec8b23 100644
--- a/esm/vs/platform/contextkey/common/contextkeys.js
+++ b/esm/vs/platform/contextkey/common/contextkeys.js
@@ -5,14 +5,14 @@
 import { isIOS, isLinux, isMacintosh, isMobile, isWeb, isWindows } from '../../../base/common/platform.js';
 import { localize } from '../../../nls.js';
 import { RawContextKey } from './contextkey.js';
-export const IsMacContext = new RawContextKey('isMac', isMacintosh, localize('isMac', "Whether the operating system is macOS"));
-export const IsLinuxContext = new RawContextKey('isLinux', isLinux, localize('isLinux', "Whether the operating system is Linux"));
-export const IsWindowsContext = new RawContextKey('isWindows', isWindows, localize('isWindows', "Whether the operating system is Windows"));
-export const IsWebContext = new RawContextKey('isWeb', isWeb, localize('isWeb', "Whether the platform is a web browser"));
-export const IsMacNativeContext = new RawContextKey('isMacNative', isMacintosh && !isWeb, localize('isMacNative', "Whether the operating system is macOS on a non-browser platform"));
-export const IsIOSContext = new RawContextKey('isIOS', isIOS, localize('isIOS', "Whether the operating system is iOS"));
-export const IsMobileContext = new RawContextKey('isMobile', isMobile, localize('isMobile', "Whether the platform is a mobile web browser"));
+export const IsMacContext = new RawContextKey('isMac', isMacintosh, localize('vs/platform/contextkey/common/contextkeys', 'isMac', "Whether the operating system is macOS"));
+export const IsLinuxContext = new RawContextKey('isLinux', isLinux, localize('vs/platform/contextkey/common/contextkeys', 'isLinux', "Whether the operating system is Linux"));
+export const IsWindowsContext = new RawContextKey('isWindows', isWindows, localize('vs/platform/contextkey/common/contextkeys', 'isWindows', "Whether the operating system is Windows"));
+export const IsWebContext = new RawContextKey('isWeb', isWeb, localize('vs/platform/contextkey/common/contextkeys', 'isWeb', "Whether the platform is a web browser"));
+export const IsMacNativeContext = new RawContextKey('isMacNative', isMacintosh && !isWeb, localize('vs/platform/contextkey/common/contextkeys', 'isMacNative', "Whether the operating system is macOS on a non-browser platform"));
+export const IsIOSContext = new RawContextKey('isIOS', isIOS, localize('vs/platform/contextkey/common/contextkeys', 'isIOS', "Whether the operating system is iOS"));
+export const IsMobileContext = new RawContextKey('isMobile', isMobile, localize('vs/platform/contextkey/common/contextkeys', 'isMobile', "Whether the platform is a mobile web browser"));
 export const IsDevelopmentContext = new RawContextKey('isDevelopment', false, true);
-export const ProductQualityContext = new RawContextKey('productQualityType', '', localize('productQualityType', "Quality type of VS Code"));
+export const ProductQualityContext = new RawContextKey('productQualityType', '', localize('vs/platform/contextkey/common/contextkeys', 'productQualityType', "Quality type of VS Code"));
 export const InputFocusedContextKey = 'inputFocus';
-export const InputFocusedContext = new RawContextKey(InputFocusedContextKey, false, localize('inputFocus', "Whether keyboard focus is inside an input box"));
+export const InputFocusedContext = new RawContextKey(InputFocusedContextKey, false, localize('vs/platform/contextkey/common/contextkeys', 'inputFocus', "Whether keyboard focus is inside an input box"));
diff --git a/esm/vs/platform/contextkey/common/scanner.js b/esm/vs/platform/contextkey/common/scanner.js
index 98cb646dfbf23d1fb6b525f2ed547b2a9c38dc62..a96f631b0a70203277e4e263f02dd24e8bcd888b 100644
--- a/esm/vs/platform/contextkey/common/scanner.js
+++ b/esm/vs/platform/contextkey/common/scanner.js
@@ -7,17 +7,17 @@ import { localize } from '../../../nls.js';
 function hintDidYouMean(...meant) {
     switch (meant.length) {
         case 1:
-            return localize('contextkey.scanner.hint.didYouMean1', "Did you mean {0}?", meant[0]);
+            return localize('vs/platform/contextkey/common/scanner', 'contextkey.scanner.hint.didYouMean1', "Did you mean {0}?", meant[0]);
         case 2:
-            return localize('contextkey.scanner.hint.didYouMean2', "Did you mean {0} or {1}?", meant[0], meant[1]);
+            return localize('vs/platform/contextkey/common/scanner', 'contextkey.scanner.hint.didYouMean2', "Did you mean {0} or {1}?", meant[0], meant[1]);
         case 3:
-            return localize('contextkey.scanner.hint.didYouMean3', "Did you mean {0}, {1} or {2}?", meant[0], meant[1], meant[2]);
+            return localize('vs/platform/contextkey/common/scanner', 'contextkey.scanner.hint.didYouMean3', "Did you mean {0}, {1} or {2}?", meant[0], meant[1], meant[2]);
         default: // we just don't expect that many
             return undefined;
     }
 }
-const hintDidYouForgetToOpenOrCloseQuote = localize('contextkey.scanner.hint.didYouForgetToOpenOrCloseQuote', "Did you forget to open or close the quote?");
-const hintDidYouForgetToEscapeSlash = localize('contextkey.scanner.hint.didYouForgetToEscapeSlash', "Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\/\'.");
+const hintDidYouForgetToOpenOrCloseQuote = localize('vs/platform/contextkey/common/scanner', 'contextkey.scanner.hint.didYouForgetToOpenOrCloseQuote', "Did you forget to open or close the quote?");
+const hintDidYouForgetToEscapeSlash = localize('vs/platform/contextkey/common/scanner', 'contextkey.scanner.hint.didYouForgetToEscapeSlash', "Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\/\'.");
 /**
  * A simple scanner for context keys.
  *
diff --git a/esm/vs/platform/history/browser/contextScopedHistoryWidget.js b/esm/vs/platform/history/browser/contextScopedHistoryWidget.js
index 7fa776c553166b5b52d64c1a6ddd69e922247810..d70aaa5f4147f7cec5f5ffed5ef2287edd93a648 100644
--- a/esm/vs/platform/history/browser/contextScopedHistoryWidget.js
+++ b/esm/vs/platform/history/browser/contextScopedHistoryWidget.js
@@ -18,7 +18,7 @@ import { KeybindingsRegistry } from '../../keybinding/common/keybindingsRegistry
 import { localize } from '../../../nls.js';
 import { DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';
 import { isActiveElement } from '../../../base/browser/dom.js';
-export const historyNavigationVisible = new RawContextKey('suggestWidgetVisible', false, localize('suggestWidgetVisible', "Whether suggestion are visible"));
+export const historyNavigationVisible = new RawContextKey('suggestWidgetVisible', false, localize('vs/platform/history/browser/contextScopedHistoryWidget', 'suggestWidgetVisible', "Whether suggestion are visible"));
 const HistoryNavigationWidgetFocusContext = 'historyNavigationWidgetFocus';
 const HistoryNavigationForwardsEnablementContext = 'historyNavigationForwardsEnabled';
 const HistoryNavigationBackwardsEnablementContext = 'historyNavigationBackwardsEnabled';
diff --git a/esm/vs/platform/keybinding/common/abstractKeybindingService.js b/esm/vs/platform/keybinding/common/abstractKeybindingService.js
index 1ddea8ffa1caf83f4955e78059340334be130ebd..7e2dacbb55a170b7ed9a21192e7a0bc5b339d3e6 100644
--- a/esm/vs/platform/keybinding/common/abstractKeybindingService.js
+++ b/esm/vs/platform/keybinding/common/abstractKeybindingService.js
@@ -95,11 +95,11 @@ export class AbstractKeybindingService extends Disposable {
                 throw illegalState('impossible');
             case 1:
                 // TODO@ulugbekna: revise this message and the one below (at least, fix terminology)
-                this._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', "({0}) was pressed. Waiting for second key of chord...", keypressLabel));
+                this._currentChordStatusMessage = this._notificationService.status(nls.localize('vs/platform/keybinding/common/abstractKeybindingService', 'first.chord', "({0}) was pressed. Waiting for second key of chord...", keypressLabel));
                 break;
             default: {
                 const fullKeypressLabel = this._currentChords.map(({ label }) => label).join(', ');
-                this._currentChordStatusMessage = this._notificationService.status(nls.localize('next.chord', "({0}) was pressed. Waiting for next key of chord...", fullKeypressLabel));
+                this._currentChordStatusMessage = this._notificationService.status(nls.localize('vs/platform/keybinding/common/abstractKeybindingService', 'next.chord', "({0}) was pressed. Waiting for next key of chord...", fullKeypressLabel));
             }
         }
         this._scheduleLeaveChordMode();
@@ -198,7 +198,7 @@ export class AbstractKeybindingService extends Disposable {
                 if (this.inChordMode) {
                     const currentChordsLabel = this._currentChords.map(({ label }) => label).join(', ');
                     this._log(`+ Leaving multi-chord mode: Nothing bound to "${currentChordsLabel}, ${keypressLabel}".`);
-                    this._notificationService.status(nls.localize('missing.chord', "The key combination ({0}, {1}) is not a command.", currentChordsLabel, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });
+                    this._notificationService.status(nls.localize('vs/platform/keybinding/common/abstractKeybindingService', 'missing.chord', "The key combination ({0}, {1}) is not a command.", currentChordsLabel, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });
                     this._leaveChordMode();
                     shouldPreventDefault = true;
                 }
@@ -217,7 +217,7 @@ export class AbstractKeybindingService extends Disposable {
                     if (this.inChordMode) {
                         const currentChordsLabel = this._currentChords.map(({ label }) => label).join(', ');
                         this._log(`+ Leaving chord mode: Nothing bound to "${currentChordsLabel}, ${keypressLabel}".`);
-                        this._notificationService.status(nls.localize('missing.chord', "The key combination ({0}, {1}) is not a command.", currentChordsLabel, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });
+                        this._notificationService.status(nls.localize('vs/platform/keybinding/common/abstractKeybindingService', 'missing.chord', "The key combination ({0}, {1}) is not a command.", currentChordsLabel, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });
                         this._leaveChordMode();
                         shouldPreventDefault = true;
                     }
diff --git a/esm/vs/platform/list/browser/listService.js b/esm/vs/platform/list/browser/listService.js
index 3df5cf68f8a8ab5545c2d64a63abad09b8815425..fa6da1a7985739660c81c2018f110ac382c8819c 100644
--- a/esm/vs/platform/list/browser/listService.js
+++ b/esm/vs/platform/list/browser/listService.js
@@ -904,18 +904,18 @@ const configurationRegistry = Registry.as(ConfigurationExtensions.Configuration)
 configurationRegistry.registerConfiguration({
     id: 'workbench',
     order: 7,
-    title: localize('workbenchConfigurationTitle', "Workbench"),
+    title: localize('vs/platform/list/browser/listService', 'workbenchConfigurationTitle', "Workbench"),
     type: 'object',
     properties: {
         [multiSelectModifierSettingKey]: {
             type: 'string',
             enum: ['ctrlCmd', 'alt'],
             markdownEnumDescriptions: [
-                localize('multiSelectModifier.ctrlCmd', "Maps to `Control` on Windows and Linux and to `Command` on macOS."),
-                localize('multiSelectModifier.alt', "Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
+                localize('vs/platform/list/browser/listService', 'multiSelectModifier.ctrlCmd', "Maps to `Control` on Windows and Linux and to `Command` on macOS."),
+                localize('vs/platform/list/browser/listService', 'multiSelectModifier.alt', "Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
             ],
             default: 'ctrlCmd',
-            description: localize({
+            description: localize('vs/platform/list/browser/listService', {
                 key: 'multiSelectModifier',
                 comment: [
                     '- `ctrlCmd` refers to a value the setting can take and should not be localized.',
@@ -927,7 +927,7 @@ configurationRegistry.registerConfiguration({
             type: 'string',
             enum: ['singleClick', 'doubleClick'],
             default: 'singleClick',
-            description: localize({
+            description: localize('vs/platform/list/browser/listService', {
                 key: 'openModeModifier',
                 comment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']
             }, "Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.")
@@ -935,96 +935,96 @@ configurationRegistry.registerConfiguration({
         [horizontalScrollingKey]: {
             type: 'boolean',
             default: false,
-            description: localize('horizontalScrolling setting', "Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.")
+            description: localize('vs/platform/list/browser/listService', 'horizontalScrolling setting', "Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.")
         },
         [scrollByPageKey]: {
             type: 'boolean',
             default: false,
-            description: localize('list.scrollByPage', "Controls whether clicks in the scrollbar scroll page by page.")
+            description: localize('vs/platform/list/browser/listService', 'list.scrollByPage', "Controls whether clicks in the scrollbar scroll page by page.")
         },
         [treeIndentKey]: {
             type: 'number',
             default: 8,
             minimum: 4,
             maximum: 40,
-            description: localize('tree indent setting', "Controls tree indentation in pixels.")
+            description: localize('vs/platform/list/browser/listService', 'tree indent setting', "Controls tree indentation in pixels.")
         },
         [treeRenderIndentGuidesKey]: {
             type: 'string',
             enum: ['none', 'onHover', 'always'],
             default: 'onHover',
-            description: localize('render tree indent guides', "Controls whether the tree should render indent guides.")
+            description: localize('vs/platform/list/browser/listService', 'render tree indent guides', "Controls whether the tree should render indent guides.")
         },
         [listSmoothScrolling]: {
             type: 'boolean',
             default: false,
-            description: localize('list smoothScrolling setting', "Controls whether lists and trees have smooth scrolling."),
+            description: localize('vs/platform/list/browser/listService', 'list smoothScrolling setting', "Controls whether lists and trees have smooth scrolling."),
         },
         [mouseWheelScrollSensitivityKey]: {
             type: 'number',
             default: 1,
-            markdownDescription: localize('Mouse Wheel Scroll Sensitivity', "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.")
+            markdownDescription: localize('vs/platform/list/browser/listService', 'Mouse Wheel Scroll Sensitivity', "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.")
         },
         [fastScrollSensitivityKey]: {
             type: 'number',
             default: 5,
-            markdownDescription: localize('Fast Scroll Sensitivity', "Scrolling speed multiplier when pressing `Alt`.")
+            markdownDescription: localize('vs/platform/list/browser/listService', 'Fast Scroll Sensitivity', "Scrolling speed multiplier when pressing `Alt`.")
         },
         [defaultFindModeSettingKey]: {
             type: 'string',
             enum: ['highlight', 'filter'],
             enumDescriptions: [
-                localize('defaultFindModeSettingKey.highlight', "Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements."),
-                localize('defaultFindModeSettingKey.filter', "Filter elements when searching.")
+                localize('vs/platform/list/browser/listService', 'defaultFindModeSettingKey.highlight', "Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements."),
+                localize('vs/platform/list/browser/listService', 'defaultFindModeSettingKey.filter', "Filter elements when searching.")
             ],
             default: 'highlight',
-            description: localize('defaultFindModeSettingKey', "Controls the default find mode for lists and trees in the workbench.")
+            description: localize('vs/platform/list/browser/listService', 'defaultFindModeSettingKey', "Controls the default find mode for lists and trees in the workbench.")
         },
         [keyboardNavigationSettingKey]: {
             type: 'string',
             enum: ['simple', 'highlight', 'filter'],
             enumDescriptions: [
-                localize('keyboardNavigationSettingKey.simple', "Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes."),
-                localize('keyboardNavigationSettingKey.highlight', "Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements."),
-                localize('keyboardNavigationSettingKey.filter', "Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.")
+                localize('vs/platform/list/browser/listService', 'keyboardNavigationSettingKey.simple', "Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes."),
+                localize('vs/platform/list/browser/listService', 'keyboardNavigationSettingKey.highlight', "Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements."),
+                localize('vs/platform/list/browser/listService', 'keyboardNavigationSettingKey.filter', "Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.")
             ],
             default: 'highlight',
-            description: localize('keyboardNavigationSettingKey', "Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter."),
+            description: localize('vs/platform/list/browser/listService', 'keyboardNavigationSettingKey', "Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter."),
             deprecated: true,
-            deprecationMessage: localize('keyboardNavigationSettingKeyDeprecated', "Please use 'workbench.list.defaultFindMode' and	'workbench.list.typeNavigationMode' instead.")
+            deprecationMessage: localize('vs/platform/list/browser/listService', 'keyboardNavigationSettingKeyDeprecated', "Please use 'workbench.list.defaultFindMode' and	'workbench.list.typeNavigationMode' instead.")
         },
         [defaultFindMatchTypeSettingKey]: {
             type: 'string',
             enum: ['fuzzy', 'contiguous'],
             enumDescriptions: [
-                localize('defaultFindMatchTypeSettingKey.fuzzy', "Use fuzzy matching when searching."),
-                localize('defaultFindMatchTypeSettingKey.contiguous', "Use contiguous matching when searching.")
+                localize('vs/platform/list/browser/listService', 'defaultFindMatchTypeSettingKey.fuzzy', "Use fuzzy matching when searching."),
+                localize('vs/platform/list/browser/listService', 'defaultFindMatchTypeSettingKey.contiguous', "Use contiguous matching when searching.")
             ],
             default: 'fuzzy',
-            description: localize('defaultFindMatchTypeSettingKey', "Controls the type of matching used when searching lists and trees in the workbench.")
+            description: localize('vs/platform/list/browser/listService', 'defaultFindMatchTypeSettingKey', "Controls the type of matching used when searching lists and trees in the workbench.")
         },
         [treeExpandMode]: {
             type: 'string',
             enum: ['singleClick', 'doubleClick'],
             default: 'singleClick',
-            description: localize('expand mode', "Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable."),
+            description: localize('vs/platform/list/browser/listService', 'expand mode', "Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable."),
         },
         [treeStickyScroll]: {
             type: 'boolean',
             default: true,
-            description: localize('sticky scroll', "Controls whether sticky scrolling is enabled in trees."),
+            description: localize('vs/platform/list/browser/listService', 'sticky scroll', "Controls whether sticky scrolling is enabled in trees."),
         },
         [treeStickyScrollMaxElements]: {
             type: 'number',
             minimum: 1,
             default: 7,
-            markdownDescription: localize('sticky scroll maximum items', "Controls the number of sticky elements displayed in the tree when {0} is enabled.", '`#workbench.tree.enableStickyScroll#`'),
+            markdownDescription: localize('vs/platform/list/browser/listService', 'sticky scroll maximum items', "Controls the number of sticky elements displayed in the tree when {0} is enabled.", '`#workbench.tree.enableStickyScroll#`'),
         },
         [typeNavigationModeSettingKey]: {
             type: 'string',
             enum: ['automatic', 'trigger'],
             default: 'automatic',
-            markdownDescription: localize('typeNavigationMode2', "Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run."),
+            markdownDescription: localize('vs/platform/list/browser/listService', 'typeNavigationMode2', "Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run."),
         }
     }
 });
diff --git a/esm/vs/platform/markers/common/markers.js b/esm/vs/platform/markers/common/markers.js
index 3a2838acc93ee8609189cdfabf17b99be16e45f6..9363da7b130f797c30b49f484c760c181ee7a836 100644
--- a/esm/vs/platform/markers/common/markers.js
+++ b/esm/vs/platform/markers/common/markers.js
@@ -18,9 +18,9 @@ export var MarkerSeverity;
     }
     MarkerSeverity.compare = compare;
     const _displayStrings = Object.create(null);
-    _displayStrings[MarkerSeverity.Error] = localize('sev.error', "Error");
-    _displayStrings[MarkerSeverity.Warning] = localize('sev.warning', "Warning");
-    _displayStrings[MarkerSeverity.Info] = localize('sev.info', "Info");
+    _displayStrings[MarkerSeverity.Error] = localize('vs/platform/markers/common/markers', 'sev.error', "Error");
+    _displayStrings[MarkerSeverity.Warning] = localize('vs/platform/markers/common/markers', 'sev.warning', "Warning");
+    _displayStrings[MarkerSeverity.Info] = localize('vs/platform/markers/common/markers', 'sev.info', "Info");
     function toString(a) {
         return _displayStrings[a] || '';
     }
diff --git a/esm/vs/platform/quickinput/browser/commandsQuickAccess.js b/esm/vs/platform/quickinput/browser/commandsQuickAccess.js
index a73e3207a47285c1c888d392695cc6423354553c..14eb5c2a203dee3f0516a6a85d31a1a224275f1b 100644
--- a/esm/vs/platform/quickinput/browser/commandsQuickAccess.js
+++ b/esm/vs/platform/quickinput/browser/commandsQuickAccess.js
@@ -155,22 +155,22 @@ let AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvi
             const commandPick = filteredCommandPicks[i];
             // Separator: recently used
             if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {
-                commandPicks.push({ type: 'separator', label: localize('recentlyUsed', "recently used") });
+                commandPicks.push({ type: 'separator', label: localize('vs/platform/quickinput/browser/commandsQuickAccess', 'recentlyUsed', "recently used") });
                 addOtherSeparator = true;
             }
             if (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {
-                commandPicks.push({ type: 'separator', label: localize('suggested', "similar commands") });
+                commandPicks.push({ type: 'separator', label: localize('vs/platform/quickinput/browser/commandsQuickAccess', 'suggested', "similar commands") });
                 addSuggestedSeparator = false;
             }
             // Separator: commonly used
             if (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && this.options.suggestedCommandIds?.has(commandPick.commandId)) {
-                commandPicks.push({ type: 'separator', label: localize('commonlyUsed', "commonly used") });
+                commandPicks.push({ type: 'separator', label: localize('vs/platform/quickinput/browser/commandsQuickAccess', 'commonlyUsed', "commonly used") });
                 addOtherSeparator = true;
                 addCommonlyUsedSeparator = false;
             }
             // Separator: other commands
             if (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !this.options.suggestedCommandIds?.has(commandPick.commandId)) {
-                commandPicks.push({ type: 'separator', label: localize('morecCommands', "other commands") });
+                commandPicks.push({ type: 'separator', label: localize('vs/platform/quickinput/browser/commandsQuickAccess', 'morecCommands', "other commands") });
                 addOtherSeparator = false;
             }
             // Command
@@ -190,7 +190,7 @@ let AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvi
                 // Basically, if we haven't already added a separator, we add one before the additional picks so long
                 // as one hasn't been added to the start of the array.
                 if (addSuggestedSeparator && commandPicks[0]?.type !== 'separator') {
-                    commandPicks.unshift({ type: 'separator', label: localize('suggested', "similar commands") });
+                    commandPicks.unshift({ type: 'separator', label: localize('vs/platform/quickinput/browser/commandsQuickAccess', 'suggested', "similar commands") });
                 }
                 return commandPicks;
             })()
@@ -202,7 +202,7 @@ let AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvi
         }
         const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);
         const ariaLabel = keybinding ?
-            localize('commandPickAriaLabelWithKeybinding', "{0}, {1}", commandPick.label, keybinding.getAriaLabel()) :
+            localize('vs/platform/quickinput/browser/commandsQuickAccess', 'commandPickAriaLabelWithKeybinding', "{0}, {1}", commandPick.label, keybinding.getAriaLabel()) :
             commandPick.label;
         return {
             ...commandPick,
@@ -225,7 +225,7 @@ let AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvi
                 }
                 catch (error) {
                     if (!isCancellationError(error)) {
-                        this.dialogService.error(localize('canNotRun', "Command '{0}' resulted in an error", commandPick.label), toErrorMessage(error));
+                        this.dialogService.error(localize('vs/platform/quickinput/browser/commandsQuickAccess', 'canNotRun', "Command '{0}' resulted in an error", commandPick.label), toErrorMessage(error));
                     }
                 }
             }
diff --git a/esm/vs/platform/quickinput/browser/helpQuickAccess.js b/esm/vs/platform/quickinput/browser/helpQuickAccess.js
index fe4091705537859e74b1ab5591312c0477de5c3e..5c3807c6a7a13606984559d2a71953637e4f842e 100644
--- a/esm/vs/platform/quickinput/browser/helpQuickAccess.js
+++ b/esm/vs/platform/quickinput/browser/helpQuickAccess.js
@@ -62,7 +62,7 @@ let HelpQuickAccessProvider = class HelpQuickAccessProvider {
                 prefix,
                 label,
                 keybinding: helpEntry.commandId ? this.keybindingService.lookupKeybinding(helpEntry.commandId) : undefined,
-                ariaLabel: localize('helpPickAriaLabel', "{0}, {1}", label, helpEntry.description),
+                ariaLabel: localize('vs/platform/quickinput/browser/helpQuickAccess', 'helpPickAriaLabel', "{0}, {1}", label, helpEntry.description),
                 description: helpEntry.description
             };
         });
diff --git a/esm/vs/platform/quickinput/browser/quickInput.js b/esm/vs/platform/quickinput/browser/quickInput.js
index 4df569e96e7d8379d1fe33f98ee44b1bd69ff5b8..d05b59cb7d53ace60b40aacea5ab9ecb6e375753 100644
--- a/esm/vs/platform/quickinput/browser/quickInput.js
+++ b/esm/vs/platform/quickinput/browser/quickInput.js
@@ -30,20 +30,20 @@ import { IConfigurationService } from '../../configuration/common/configuration.
 import { IHoverService, WorkbenchHoverDelegate } from '../../hover/browser/hover.js';
 import { ContextKeyExpr, RawContextKey } from '../../contextkey/common/contextkey.js';
 export const inQuickInputContextKeyValue = 'inQuickInput';
-export const InQuickInputContextKey = new RawContextKey(inQuickInputContextKeyValue, false, localize('inQuickInput', "Whether keyboard focus is inside the quick input control"));
+export const InQuickInputContextKey = new RawContextKey(inQuickInputContextKeyValue, false, localize('vs/platform/quickinput/browser/quickInput', 'inQuickInput', "Whether keyboard focus is inside the quick input control"));
 export const inQuickInputContext = ContextKeyExpr.has(inQuickInputContextKeyValue);
 export const quickInputTypeContextKeyValue = 'quickInputType';
-export const QuickInputTypeContextKey = new RawContextKey(quickInputTypeContextKeyValue, undefined, localize('quickInputType', "The type of the currently visible quick input"));
+export const QuickInputTypeContextKey = new RawContextKey(quickInputTypeContextKeyValue, undefined, localize('vs/platform/quickinput/browser/quickInput', 'quickInputType', "The type of the currently visible quick input"));
 export const endOfQuickInputBoxContextKeyValue = 'cursorAtEndOfQuickInputBox';
-export const EndOfQuickInputBoxContextKey = new RawContextKey(endOfQuickInputBoxContextKeyValue, false, localize('cursorAtEndOfQuickInputBox', "Whether the cursor in the quick input is at the end of the input box"));
+export const EndOfQuickInputBoxContextKey = new RawContextKey(endOfQuickInputBoxContextKeyValue, false, localize('vs/platform/quickinput/browser/quickInput', 'cursorAtEndOfQuickInputBox', "Whether the cursor in the quick input is at the end of the input box"));
 export const endOfQuickInputBoxContext = ContextKeyExpr.has(endOfQuickInputBoxContextKeyValue);
 export const backButton = {
     iconClass: ThemeIcon.asClassName(Codicon.quickInputBack),
-    tooltip: localize('quickInput.back', "Back"),
+    tooltip: localize('vs/platform/quickinput/browser/quickInput', 'quickInput.back', "Back"),
     handle: -1 // TODO
 };
 class QuickInput extends Disposable {
-    static { this.noPromptMessage = localize('inputModeEntry', "Press 'Enter' to confirm your input or 'Escape' to cancel"); }
+    static { this.noPromptMessage = localize('vs/platform/quickinput/browser/quickInput', 'inputModeEntry', "Press 'Enter' to confirm your input or 'Escape' to cancel"); }
     constructor(ui) {
         super();
         this.ui = ui;
@@ -308,7 +308,7 @@ class QuickInput extends Disposable {
     }
     getSteps() {
         if (this.step && this.totalSteps) {
-            return localize('quickInput.steps', "{0}/{1}", this.step, this.totalSteps);
+            return localize('vs/platform/quickinput/browser/quickInput', 'quickInput.steps', "{0}/{1}", this.step, this.totalSteps);
         }
         if (this.step) {
             return String(this.step);
@@ -380,7 +380,7 @@ export class QuickPick extends QuickInput {
         this.onDidTriggerItemButton = this.onDidTriggerItemButtonEmitter.event;
         this.onDidTriggerSeparatorButton = this.onDidTriggerSeparatorButtonEmitter.event;
     }
-    static { this.DEFAULT_ARIA_LABEL = localize('quickInputBox.ariaLabel', "Type to narrow down results."); }
+    static { this.DEFAULT_ARIA_LABEL = localize('vs/platform/quickinput/browser/quickInput', 'quickInputBox.ariaLabel', "Type to narrow down results."); }
     get quickNavigate() {
         return this._quickNavigate;
     }
diff --git a/esm/vs/platform/quickinput/browser/quickInputActions.js b/esm/vs/platform/quickinput/browser/quickInputActions.js
index d643714e61a8dfbb085d6cc3085ff13bd8cd43c3..d29f6b280a93b06b350ac487c3e10eb8ad25727c 100644
--- a/esm/vs/platform/quickinput/browser/quickInputActions.js
+++ b/esm/vs/platform/quickinput/browser/quickInputActions.js
@@ -12,7 +12,7 @@ import { IQuickInputService, QuickPickFocus } from '../common/quickInput.js';
 const defaultCommandAndKeybindingRule = {
     weight: 200 /* KeybindingWeight.WorkbenchContrib */,
     when: ContextKeyExpr.and(ContextKeyExpr.equals(quickInputTypeContextKeyValue, "quickPick" /* QuickInputType.QuickPick */), inQuickInputContext),
-    metadata: { description: localize('quickPick', "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well.") }
+    metadata: { description: localize('vs/platform/quickinput/browser/quickInputActions', 'quickPick', "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well.") }
 };
 function registerQuickPickCommandAndKeybindingRule(rule, options = {}) {
     KeybindingsRegistry.registerCommandAndKeybindingRule({
@@ -71,8 +71,8 @@ registerQuickPickCommandAndKeybindingRule({ id: 'quickInput.previous', primary:
 // In this case, we want that modifier key+up/down to navigate to the next/previous item, not the next/previous separator.
 // To handle this, we have a separate command for navigating to the next/previous separator when we are not in quick access mode.
 // If, however, we are in quick access mode, and you hold down an additional modifier key, we will navigate to the next/previous separator.
-const nextSeparatorFallbackDesc = localize('quickInput.nextSeparatorWithQuickAccessFallback', "If we're in quick access mode, this will navigate to the next item. If we are not in quick access mode, this will navigate to the next separator.");
-const prevSeparatorFallbackDesc = localize('quickInput.previousSeparatorWithQuickAccessFallback', "If we're in quick access mode, this will navigate to the previous item. If we are not in quick access mode, this will navigate to the previous separator.");
+const nextSeparatorFallbackDesc = localize('vs/platform/quickinput/browser/quickInputActions', 'quickInput.nextSeparatorWithQuickAccessFallback', "If we're in quick access mode, this will navigate to the next item. If we are not in quick access mode, this will navigate to the next separator.");
+const prevSeparatorFallbackDesc = localize('vs/platform/quickinput/browser/quickInputActions', 'quickInput.previousSeparatorWithQuickAccessFallback', "If we're in quick access mode, this will navigate to the previous item. If we are not in quick access mode, this will navigate to the previous separator.");
 if (isMacintosh) {
     registerQuickPickCommandAndKeybindingRule({
         id: 'quickInput.nextSeparatorWithQuickAccessFallback',
diff --git a/esm/vs/platform/quickinput/browser/quickInputController.js b/esm/vs/platform/quickinput/browser/quickInputController.js
index 38b7fb79cc7336c7fbc2e72c806a9262d19d4d49..b79fc4df6769297aeea3e75306c00907a332896b 100644
--- a/esm/vs/platform/quickinput/browser/quickInputController.js
+++ b/esm/vs/platform/quickinput/browser/quickInputController.js
@@ -105,7 +105,7 @@ let QuickInputController = class QuickInputController extends Disposable {
         const headerContainer = dom.append(container, $('.quick-input-header'));
         const checkAll = dom.append(headerContainer, $('input.quick-input-check-all'));
         checkAll.type = 'checkbox';
-        checkAll.setAttribute('aria-label', localize('quickInput.checkAll', "Toggle all checkboxes"));
+        checkAll.setAttribute('aria-label', localize('vs/platform/quickinput/browser/quickInputController', 'quickInput.checkAll', "Toggle all checkboxes"));
         this._register(dom.addStandardDisposableListener(checkAll, dom.EventType.CHANGE, e => {
             const checked = checkAll.checked;
             list.setAllVisibleChecked(checked);
@@ -123,21 +123,21 @@ let QuickInputController = class QuickInputController extends Disposable {
         const visibleCountContainer = dom.append(filterContainer, $('.quick-input-visible-count'));
         visibleCountContainer.setAttribute('aria-live', 'polite');
         visibleCountContainer.setAttribute('aria-atomic', 'true');
-        const visibleCount = new CountBadge(visibleCountContainer, { countFormat: localize({ key: 'quickInput.visibleCount', comment: ['This tells the user how many items are shown in a list of items to select from. The items can be anything. Currently not visible, but read by screen readers.'] }, "{0} Results") }, this.styles.countBadge);
+        const visibleCount = new CountBadge(visibleCountContainer, { countFormat: localize('vs/platform/quickinput/browser/quickInputController', { key: 'quickInput.visibleCount', comment: ['This tells the user how many items are shown in a list of items to select from. The items can be anything. Currently not visible, but read by screen readers.'] }, "{0} Results") }, this.styles.countBadge);
         const countContainer = dom.append(filterContainer, $('.quick-input-count'));
         countContainer.setAttribute('aria-live', 'polite');
-        const count = new CountBadge(countContainer, { countFormat: localize({ key: 'quickInput.countSelected', comment: ['This tells the user how many items are selected in a list of items to select from. The items can be anything.'] }, "{0} Selected") }, this.styles.countBadge);
+        const count = new CountBadge(countContainer, { countFormat: localize('vs/platform/quickinput/browser/quickInputController', { key: 'quickInput.countSelected', comment: ['This tells the user how many items are selected in a list of items to select from. The items can be anything.'] }, "{0} Selected") }, this.styles.countBadge);
         const inlineActionBar = this._register(new ActionBar(headerContainer, { hoverDelegate: this.options.hoverDelegate }));
         inlineActionBar.domNode.classList.add('quick-input-inline-action-bar');
         const okContainer = dom.append(headerContainer, $('.quick-input-action'));
         const ok = this._register(new Button(okContainer, this.styles.button));
-        ok.label = localize('ok', "OK");
+        ok.label = localize('vs/platform/quickinput/browser/quickInputController', 'ok', "OK");
         this._register(ok.onDidClick(e => {
             this.onDidAcceptEmitter.fire();
         }));
         const customButtonContainer = dom.append(headerContainer, $('.quick-input-action'));
         const customButton = this._register(new Button(customButtonContainer, { ...this.styles.button, supportIcons: true }));
-        customButton.label = localize('custom', "Custom");
+        customButton.label = localize('vs/platform/quickinput/browser/quickInputController', 'custom', "Custom");
         this._register(customButton.onDidClick(e => {
             this.onDidCustomEmitter.fire();
         }));
@@ -469,7 +469,7 @@ let QuickInputController = class QuickInputController extends Disposable {
         ui.ignoreFocusOut = false;
         ui.inputBox.toggles = undefined;
         const backKeybindingLabel = this.options.backKeybindingLabel();
-        backButton.tooltip = backKeybindingLabel ? localize('quickInput.backWithKeybinding', "Back ({0})", backKeybindingLabel) : localize('quickInput.back', "Back");
+        backButton.tooltip = backKeybindingLabel ? localize('vs/platform/quickinput/browser/quickInputController', 'quickInput.backWithKeybinding', "Back ({0})", backKeybindingLabel) : localize('vs/platform/quickinput/browser/quickInputController', 'quickInput.back', "Back");
         ui.container.style.display = '';
         this.updateLayout();
         ui.inputBox.setFocus();
diff --git a/esm/vs/platform/quickinput/browser/quickInputTree.js b/esm/vs/platform/quickinput/browser/quickInputTree.js
index 13ebe9fa8762178d07721491d136e9bbf2499608..c2d9ebf4d32bc2cd6878085516bc09724b7cde67 100644
--- a/esm/vs/platform/quickinput/browser/quickInputTree.js
+++ b/esm/vs/platform/quickinput/browser/quickInputTree.js
@@ -202,7 +202,7 @@ class QuickInputItemDelegate {
 }
 class QuickInputAccessibilityProvider {
     getWidgetAriaLabel() {
-        return localize('quickInput', "Quick Input");
+        return localize('vs/platform/quickinput/browser/quickInputTree', 'quickInput', "Quick Input");
     }
     getAriaLabel(element) {
         return element.separator?.label
diff --git a/esm/vs/platform/quickinput/browser/quickInputUtils.js b/esm/vs/platform/quickinput/browser/quickInputUtils.js
index a749c63dba4cda3d083083192a77a131855c6db5..7fb4a00192061dae2647239c186e5ff484475769 100644
--- a/esm/vs/platform/quickinput/browser/quickInputUtils.js
+++ b/esm/vs/platform/quickinput/browser/quickInputUtils.js
@@ -56,7 +56,7 @@ export function renderQuickInputDescription(description, container, actionHandle
         else {
             let title = node.title;
             if (!title && node.href.startsWith('command:')) {
-                title = localize('executeCommand', "Click to execute command '{0}'", node.href.substring('command:'.length));
+                title = localize('vs/platform/quickinput/browser/quickInputUtils', 'executeCommand', "Click to execute command '{0}'", node.href.substring('command:'.length));
             }
             else if (!title) {
                 title = node.href;
diff --git a/esm/vs/platform/theme/common/colorUtils.js b/esm/vs/platform/theme/common/colorUtils.js
index ea2e65c12374dc28de3c347d40e2fc502816b832..6f50450801667604cac04cc7cf9820af32d96aa2 100644
--- a/esm/vs/platform/theme/common/colorUtils.js
+++ b/esm/vs/platform/theme/common/colorUtils.js
@@ -49,13 +49,13 @@ class ColorRegistry {
         }
         if (needsTransparency) {
             propertySchema.pattern = '^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$';
-            propertySchema.patternErrorMessage = nls.localize('transparecyRequired', 'This color must be transparent or it will obscure content');
+            propertySchema.patternErrorMessage = nls.localize('vs/platform/theme/common/colorUtils', 'transparecyRequired', 'This color must be transparent or it will obscure content');
         }
         this.colorSchema.properties[id] = {
             description,
             oneOf: [
                 propertySchema,
-                { type: 'string', const: DEFAULT_COLOR_CONFIG_VALUE, description: nls.localize('useDefault', 'Use the default color.') }
+                { type: 'string', const: DEFAULT_COLOR_CONFIG_VALUE, description: nls.localize('vs/platform/theme/common/colorUtils', 'useDefault', 'Use the default color.') }
             ]
         };
         this.colorReferenceSchema.enum.push(id);
diff --git a/esm/vs/platform/theme/common/colors/baseColors.js b/esm/vs/platform/theme/common/colors/baseColors.js
index 8d0c6d654d05a155752b4ceeac871491733e819f..34b768ebb9ef81f7658de6bd33af03a5dd5fe215 100644
--- a/esm/vs/platform/theme/common/colors/baseColors.js
+++ b/esm/vs/platform/theme/common/colors/baseColors.js
@@ -6,24 +6,24 @@ import * as nls from '../../../../nls.js';
 // Import the effects we need
 import { Color } from '../../../../base/common/color.js';
 import { registerColor, transparent } from '../colorUtils.js';
-export const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('foreground', "Overall foreground color. This color is only used if not overridden by a component."));
-export const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('disabledForeground', "Overall foreground for disabled elements. This color is only used if not overridden by a component."));
-export const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('errorForeground', "Overall foreground color for error messages. This color is only used if not overridden by a component."));
-export const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', "Foreground color for description text providing additional information, for example for a label."));
-export const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('iconForeground', "The default color for icons in the workbench."));
-export const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' }, nls.localize('focusBorder', "Overall border color for focused elements. This color is only used if not overridden by a component."));
-export const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('contrastBorder', "An extra border around elements to separate them from others for greater contrast."));
-export const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('activeContrastBorder', "An extra border around active elements to separate them from others for greater contrast."));
-export const selectionBackground = registerColor('selection.background', null, nls.localize('selectionBackground', "The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor."));
+export const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'foreground', "Overall foreground color. This color is only used if not overridden by a component."));
+export const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'disabledForeground', "Overall foreground for disabled elements. This color is only used if not overridden by a component."));
+export const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'errorForeground', "Overall foreground color for error messages. This color is only used if not overridden by a component."));
+export const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('vs/platform/theme/common/colors/baseColors', 'descriptionForeground', "Foreground color for description text providing additional information, for example for a label."));
+export const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'iconForeground', "The default color for icons in the workbench."));
+export const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'focusBorder', "Overall border color for focused elements. This color is only used if not overridden by a component."));
+export const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'contrastBorder', "An extra border around elements to separate them from others for greater contrast."));
+export const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('vs/platform/theme/common/colors/baseColors', 'activeContrastBorder', "An extra border around active elements to separate them from others for greater contrast."));
+export const selectionBackground = registerColor('selection.background', null, nls.localize('vs/platform/theme/common/colors/baseColors', 'selectionBackground', "The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor."));
 // ------ text link
-export const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkForeground', "Foreground color for links in text."));
-export const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkActiveForeground', "Foreground color for links in text when clicked on and on mouse hover."));
-export const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, nls.localize('textSeparatorForeground', "Color for text separators."));
+export const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'textLinkForeground', "Foreground color for links in text."));
+export const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'textLinkActiveForeground', "Foreground color for links in text when clicked on and on mouse hover."));
+export const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'textSeparatorForeground', "Color for text separators."));
 // ------ text preformat
-export const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#000000', hcLight: '#FFFFFF' }, nls.localize('textPreformatForeground', "Foreground color for preformatted text segments."));
-export const textPreformatBackground = registerColor('textPreformat.background', { light: '#0000001A', dark: '#FFFFFF1A', hcDark: '#FFFFFF', hcLight: '#09345f' }, nls.localize('textPreformatBackground', "Background color for preformatted text segments."));
+export const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#000000', hcLight: '#FFFFFF' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'textPreformatForeground', "Foreground color for preformatted text segments."));
+export const textPreformatBackground = registerColor('textPreformat.background', { light: '#0000001A', dark: '#FFFFFF1A', hcDark: '#FFFFFF', hcLight: '#09345f' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'textPreformatBackground', "Background color for preformatted text segments."));
 // ------ text block quote
-export const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#f2f2f2', dark: '#222222', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('textBlockQuoteBackground', "Background color for block quotes in text."));
-export const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, nls.localize('textBlockQuoteBorder', "Border color for block quotes in text."));
+export const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#f2f2f2', dark: '#222222', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'textBlockQuoteBackground', "Background color for block quotes in text."));
+export const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'textBlockQuoteBorder', "Border color for block quotes in text."));
 // ------ text code block
-export const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, nls.localize('textCodeBlockBackground', "Background color for code blocks in text."));
+export const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, nls.localize('vs/platform/theme/common/colors/baseColors', 'textCodeBlockBackground', "Background color for code blocks in text."));
diff --git a/esm/vs/platform/theme/common/colors/chartsColors.js b/esm/vs/platform/theme/common/colors/chartsColors.js
index e97e8965b789a73e65e10a34ed924f75aa339185..4366ffd2e6316892b839b3d870d125a72b9d6e00 100644
--- a/esm/vs/platform/theme/common/colors/chartsColors.js
+++ b/esm/vs/platform/theme/common/colors/chartsColors.js
@@ -7,11 +7,11 @@ import { registerColor, transparent } from '../colorUtils.js';
 import { foreground } from './baseColors.js';
 import { editorErrorForeground, editorInfoForeground, editorWarningForeground } from './editorColors.js';
 import { minimapFindMatch } from './minimapColors.js';
-export const chartsForeground = registerColor('charts.foreground', foreground, nls.localize('chartsForeground', "The foreground color used in charts."));
-export const chartsLines = registerColor('charts.lines', transparent(foreground, .5), nls.localize('chartsLines', "The color used for horizontal lines in charts."));
-export const chartsRed = registerColor('charts.red', editorErrorForeground, nls.localize('chartsRed', "The red color used in chart visualizations."));
-export const chartsBlue = registerColor('charts.blue', editorInfoForeground, nls.localize('chartsBlue', "The blue color used in chart visualizations."));
-export const chartsYellow = registerColor('charts.yellow', editorWarningForeground, nls.localize('chartsYellow', "The yellow color used in chart visualizations."));
-export const chartsOrange = registerColor('charts.orange', minimapFindMatch, nls.localize('chartsOrange', "The orange color used in chart visualizations."));
-export const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('chartsGreen', "The green color used in chart visualizations."));
-export const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('chartsPurple', "The purple color used in chart visualizations."));
+export const chartsForeground = registerColor('charts.foreground', foreground, nls.localize('vs/platform/theme/common/colors/chartsColors', 'chartsForeground', "The foreground color used in charts."));
+export const chartsLines = registerColor('charts.lines', transparent(foreground, .5), nls.localize('vs/platform/theme/common/colors/chartsColors', 'chartsLines', "The color used for horizontal lines in charts."));
+export const chartsRed = registerColor('charts.red', editorErrorForeground, nls.localize('vs/platform/theme/common/colors/chartsColors', 'chartsRed', "The red color used in chart visualizations."));
+export const chartsBlue = registerColor('charts.blue', editorInfoForeground, nls.localize('vs/platform/theme/common/colors/chartsColors', 'chartsBlue', "The blue color used in chart visualizations."));
+export const chartsYellow = registerColor('charts.yellow', editorWarningForeground, nls.localize('vs/platform/theme/common/colors/chartsColors', 'chartsYellow', "The yellow color used in chart visualizations."));
+export const chartsOrange = registerColor('charts.orange', minimapFindMatch, nls.localize('vs/platform/theme/common/colors/chartsColors', 'chartsOrange', "The orange color used in chart visualizations."));
+export const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('vs/platform/theme/common/colors/chartsColors', 'chartsGreen', "The green color used in chart visualizations."));
+export const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('vs/platform/theme/common/colors/chartsColors', 'chartsPurple', "The purple color used in chart visualizations."));
diff --git a/esm/vs/platform/theme/common/colors/editorColors.js b/esm/vs/platform/theme/common/colors/editorColors.js
index 14fdd1dd99f0bcd7327f0096da57a8b1a7910591..15dcfb800c08b4c2923b467fa4937cede821e9e1 100644
--- a/esm/vs/platform/theme/common/colors/editorColors.js
+++ b/esm/vs/platform/theme/common/colors/editorColors.js
@@ -10,96 +10,96 @@ import { registerColor, transparent, lessProminent, darken, lighten } from '../c
 import { foreground, contrastBorder, activeContrastBorder } from './baseColors.js';
 import { scrollbarShadow, badgeBackground } from './miscColors.js';
 // ----- editor
-export const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('editorBackground', "Editor background color."));
-export const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('editorForeground', "Editor default foreground color."));
-export const editorStickyScrollBackground = registerColor('editorStickyScroll.background', editorBackground, nls.localize('editorStickyScrollBackground', "Background color of sticky scroll in the editor"));
-export const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', "Background color of sticky scroll on hover in the editor"));
-export const editorStickyScrollBorder = registerColor('editorStickyScroll.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorStickyScrollBorder', "Border color of sticky scroll in the editor"));
-export const editorStickyScrollShadow = registerColor('editorStickyScroll.shadow', scrollbarShadow, nls.localize('editorStickyScrollShadow', " Shadow color of sticky scroll in the editor"));
-export const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));
-export const editorWidgetForeground = registerColor('editorWidget.foreground', foreground, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));
-export const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));
-export const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', null, nls.localize('editorWidgetResizeBorder', "Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget."));
-export const editorErrorBackground = registerColor('editorError.background', null, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));
-export const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));
-export const editorWarningBackground = registerColor('editorWarning.background', null, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));
-export const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));
-export const editorInfoBackground = registerColor('editorInfo.background', null, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));
-export const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));
-export const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));
-export const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));
-export const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));
+export const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorBackground', "Editor background color."));
+export const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorForeground', "Editor default foreground color."));
+export const editorStickyScrollBackground = registerColor('editorStickyScroll.background', editorBackground, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorStickyScrollBackground', "Background color of sticky scroll in the editor"));
+export const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorStickyScrollHoverBackground', "Background color of sticky scroll on hover in the editor"));
+export const editorStickyScrollBorder = registerColor('editorStickyScroll.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorStickyScrollBorder', "Border color of sticky scroll in the editor"));
+export const editorStickyScrollShadow = registerColor('editorStickyScroll.shadow', scrollbarShadow, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorStickyScrollShadow', " Shadow color of sticky scroll in the editor"));
+export const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));
+export const editorWidgetForeground = registerColor('editorWidget.foreground', foreground, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));
+export const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));
+export const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorWidgetResizeBorder', "Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget."));
+export const editorErrorBackground = registerColor('editorError.background', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorError.foreground', 'Foreground color of error squigglies in the editor.'));
+export const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'errorBorder', 'If set, color of double underlines for errors in the editor.'));
+export const editorWarningBackground = registerColor('editorWarning.background', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));
+export const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('vs/platform/theme/common/colors/editorColors', 'warningBorder', 'If set, color of double underlines for warnings in the editor.'));
+export const editorInfoBackground = registerColor('editorInfo.background', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));
+export const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'infoBorder', 'If set, color of double underlines for infos in the editor.'));
+export const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));
+export const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'hintBorder', 'If set, color of double underlines for hints in the editor.'));
+export const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'activeLinkForeground', 'Color of active links.'));
 // ----- editor selection
-export const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', "Color of the editor selection."));
-export const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('editorSelectionForeground', "Color of the selected text for high contrast."));
-export const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', "Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations."), true);
-export const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', "Border color for regions with the same content as the selection."));
+export const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorSelectionBackground', "Color of the editor selection."));
+export const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorSelectionForeground', "Color of the selected text for high contrast."));
+export const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorInactiveSelection', "Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations."), true);
+export const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorSelectionHighlightBorder', "Border color for regions with the same content as the selection."));
 // ----- editor find
-export const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', "Color of the current search match."));
-export const editorFindMatchForeground = registerColor('editor.findMatchForeground', null, nls.localize('editorFindMatchForeground', "Text color of the current search match."));
-export const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', "Color of the other search matches. The color must not be opaque so as not to hide underlying decorations."), true);
-export const editorFindMatchHighlightForeground = registerColor('editor.findMatchHighlightForeground', null, nls.localize('findMatchHighlightForeground', "Foreground color of the other search matches."), true);
-export const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', "Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true);
-export const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorFindMatchBorder', "Border color of the current search match."));
-export const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('findMatchHighlightBorder', "Border color of the other search matches."));
-export const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', "Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true);
+export const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorFindMatch', "Color of the current search match."));
+export const editorFindMatchForeground = registerColor('editor.findMatchForeground', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorFindMatchForeground', "Text color of the current search match."));
+export const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'findMatchHighlight', "Color of the other search matches. The color must not be opaque so as not to hide underlying decorations."), true);
+export const editorFindMatchHighlightForeground = registerColor('editor.findMatchHighlightForeground', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'findMatchHighlightForeground', "Foreground color of the other search matches."), true);
+export const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'findRangeHighlight', "Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true);
+export const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorFindMatchBorder', "Border color of the current search match."));
+export const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'findMatchHighlightBorder', "Border color of the other search matches."));
+export const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('vs/platform/theme/common/colors/editorColors', 'findRangeHighlightBorder', "Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true);
 // ----- editor hover
-export const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const editorHoverBackground = registerColor('editorHoverWidget.background', editorWidgetBackground, nls.localize('hoverBackground', 'Background color of the editor hover.'));
-export const editorHoverForeground = registerColor('editorHoverWidget.foreground', editorWidgetForeground, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));
-export const editorHoverBorder = registerColor('editorHoverWidget.border', editorWidgetBorder, nls.localize('hoverBorder', 'Border color of the editor hover.'));
-export const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('statusBarBackground', "Background color of the editor hover status bar."));
+export const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const editorHoverBackground = registerColor('editorHoverWidget.background', editorWidgetBackground, nls.localize('vs/platform/theme/common/colors/editorColors', 'hoverBackground', 'Background color of the editor hover.'));
+export const editorHoverForeground = registerColor('editorHoverWidget.foreground', editorWidgetForeground, nls.localize('vs/platform/theme/common/colors/editorColors', 'hoverForeground', 'Foreground color of the editor hover.'));
+export const editorHoverBorder = registerColor('editorHoverWidget.border', editorWidgetBorder, nls.localize('vs/platform/theme/common/colors/editorColors', 'hoverBorder', 'Border color of the editor hover.'));
+export const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('vs/platform/theme/common/colors/editorColors', 'statusBarBackground', "Background color of the editor hover status bar."));
 // ----- editor inlay hint
-export const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: '#969696', light: '#969696', hcDark: Color.white, hcLight: Color.black }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));
-export const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .10), light: transparent(badgeBackground, .10), hcDark: transparent(Color.white, .10), hcLight: transparent(badgeBackground, .10) }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));
-export const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', editorInlayHintForeground, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));
-export const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', editorInlayHintBackground, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));
-export const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', editorInlayHintForeground, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));
-export const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', editorInlayHintBackground, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));
+export const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: '#969696', light: '#969696', hcDark: Color.white, hcLight: Color.black }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorInlayHintForeground', 'Foreground color of inline hints'));
+export const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .10), light: transparent(badgeBackground, .10), hcDark: transparent(Color.white, .10), hcLight: transparent(badgeBackground, .10) }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorInlayHintBackground', 'Background color of inline hints'));
+export const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', editorInlayHintForeground, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));
+export const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', editorInlayHintBackground, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));
+export const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', editorInlayHintForeground, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));
+export const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', editorInlayHintBackground, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));
 // ----- editor lightbulb
-export const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', "The color used for the lightbulb actions icon."));
-export const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', "The color used for the lightbulb auto fix actions icon."));
-export const editorLightBulbAiForeground = registerColor('editorLightBulbAi.foreground', editorLightBulbForeground, nls.localize('editorLightBulbAiForeground', "The color used for the lightbulb AI icon."));
+export const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorLightBulbForeground', "The color used for the lightbulb actions icon."));
+export const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorLightBulbAutoFixForeground', "The color used for the lightbulb auto fix actions icon."));
+export const editorLightBulbAiForeground = registerColor('editorLightBulbAi.foreground', editorLightBulbForeground, nls.localize('vs/platform/theme/common/colors/editorColors', 'editorLightBulbAiForeground', "The color used for the lightbulb AI icon."));
 // ----- editor snippet
-export const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', "Highlight background color of a snippet tabstop."));
-export const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', null, nls.localize('snippetTabstopHighlightBorder', "Highlight border color of a snippet tabstop."));
-export const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', null, nls.localize('snippetFinalTabstopHighlightBackground', "Highlight background color of the final tabstop of a snippet."));
-export const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', "Highlight border color of the final tabstop of a snippet."));
+export const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('vs/platform/theme/common/colors/editorColors', 'snippetTabstopHighlightBackground', "Highlight background color of a snippet tabstop."));
+export const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'snippetTabstopHighlightBorder', "Highlight border color of a snippet tabstop."));
+export const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'snippetFinalTabstopHighlightBackground', "Highlight background color of the final tabstop of a snippet."));
+export const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'snippetFinalTabstopHighlightBorder', "Highlight border color of the final tabstop of a snippet."));
 // ----- diff editor
 export const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));
 export const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));
-export const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', null, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));
-export const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', null, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));
-export const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', null, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));
-export const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', null, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));
-export const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));
-export const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));
-export const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));
-export const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', "Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views."));
-export const diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground', 'sideBar.background', nls.localize('diffEditor.unchangedRegionBackground', "The background color of unchanged blocks in the diff editor."));
-export const diffUnchangedRegionForeground = registerColor('diffEditor.unchangedRegionForeground', 'foreground', nls.localize('diffEditor.unchangedRegionForeground', "The foreground color of unchanged blocks in the diff editor."));
-export const diffUnchangedTextBackground = registerColor('diffEditor.unchangedCodeBackground', { dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedCodeBackground', "The background color of unchanged code in the diff editor."));
+export const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));
+export const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));
+export const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));
+export const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', null, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));
+export const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));
+export const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorRemovedOutline', 'Outline color for text that got removed.'));
+export const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditorBorder', 'Border color between the two text editors.'));
+export const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffDiagonalFill', "Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views."));
+export const diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground', 'sideBar.background', nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditor.unchangedRegionBackground', "The background color of unchanged blocks in the diff editor."));
+export const diffUnchangedRegionForeground = registerColor('diffEditor.unchangedRegionForeground', 'foreground', nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditor.unchangedRegionForeground', "The foreground color of unchanged blocks in the diff editor."));
+export const diffUnchangedTextBackground = registerColor('diffEditor.unchangedCodeBackground', { dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'diffEditor.unchangedCodeBackground', "The background color of unchanged code in the diff editor."));
 // ----- widget
-export const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));
-export const widgetBorder = registerColor('widget.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));
+export const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));
+export const widgetBorder = registerColor('widget.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));
 // ----- toolbar
-export const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', "Toolbar background when hovering over actions using the mouse"));
-export const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('toolbarHoverOutline', "Toolbar outline when hovering over actions using the mouse"));
-export const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', "Toolbar background when holding the mouse over actions"));
+export const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'toolbarHoverBackground', "Toolbar background when hovering over actions using the mouse"));
+export const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'toolbarHoverOutline', "Toolbar outline when hovering over actions using the mouse"));
+export const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'toolbarActiveBackground', "Toolbar background when holding the mouse over actions"));
 // ----- breadcumbs
-export const breadcrumbsForeground = registerColor('breadcrumb.foreground', transparent(foreground, 0.8), nls.localize('breadcrumbsFocusForeground', "Color of focused breadcrumb items."));
-export const breadcrumbsBackground = registerColor('breadcrumb.background', editorBackground, nls.localize('breadcrumbsBackground', "Background color of breadcrumb items."));
-export const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', "Color of focused breadcrumb items."));
-export const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', "Color of selected breadcrumb items."));
-export const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', editorWidgetBackground, nls.localize('breadcrumbsSelectedBackground', "Background color of breadcrumb item picker."));
+export const breadcrumbsForeground = registerColor('breadcrumb.foreground', transparent(foreground, 0.8), nls.localize('vs/platform/theme/common/colors/editorColors', 'breadcrumbsFocusForeground', "Color of focused breadcrumb items."));
+export const breadcrumbsBackground = registerColor('breadcrumb.background', editorBackground, nls.localize('vs/platform/theme/common/colors/editorColors', 'breadcrumbsBackground', "Background color of breadcrumb items."));
+export const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('vs/platform/theme/common/colors/editorColors', 'breadcrumbsFocusForeground', "Color of focused breadcrumb items."));
+export const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('vs/platform/theme/common/colors/editorColors', 'breadcrumbsSelectedForeground', "Color of selected breadcrumb items."));
+export const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', editorWidgetBackground, nls.localize('vs/platform/theme/common/colors/editorColors', 'breadcrumbsSelectedBackground', "Background color of breadcrumb item picker."));
 // ----- merge
 const headerTransparency = 0.5;
 const currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);
@@ -107,19 +107,19 @@ const incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparenc
 const commonBaseColor = Color.fromHex('#606060').transparent(0.4);
 const contentTransparency = 0.4;
 const rulerTransparency = 1;
-export const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', transparent(mergeCurrentHeaderBackground, contentTransparency), nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', transparent(mergeIncomingHeaderBackground, contentTransparency), nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const mergeCommonContentBackground = registerColor('merge.commonContentBackground', transparent(mergeCommonHeaderBackground, contentTransparency), nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));
-export const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));
-export const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));
-export const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));
-export const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '#AB5A00' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);
-export const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', '#A0A0A0CC', nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', transparent(mergeCurrentHeaderBackground, contentTransparency), nls.localize('vs/platform/theme/common/colors/editorColors', 'mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', transparent(mergeIncomingHeaderBackground, contentTransparency), nls.localize('vs/platform/theme/common/colors/editorColors', 'mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/editorColors', 'mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const mergeCommonContentBackground = registerColor('merge.commonContentBackground', transparent(mergeCommonHeaderBackground, contentTransparency), nls.localize('vs/platform/theme/common/colors/editorColors', 'mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));
+export const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));
+export const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));
+export const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('vs/platform/theme/common/colors/editorColors', 'overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));
+export const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '#AB5A00' }, nls.localize('vs/platform/theme/common/colors/editorColors', 'overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);
+export const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', '#A0A0A0CC', nls.localize('vs/platform/theme/common/colors/editorColors', 'overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
 // ----- problems
-export const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', editorErrorForeground, nls.localize('problemsErrorIconForeground', "The color used for the problems error icon."));
-export const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', editorWarningForeground, nls.localize('problemsWarningIconForeground', "The color used for the problems warning icon."));
-export const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', editorInfoForeground, nls.localize('problemsInfoIconForeground', "The color used for the problems info icon."));
+export const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', editorErrorForeground, nls.localize('vs/platform/theme/common/colors/editorColors', 'problemsErrorIconForeground', "The color used for the problems error icon."));
+export const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', editorWarningForeground, nls.localize('vs/platform/theme/common/colors/editorColors', 'problemsWarningIconForeground', "The color used for the problems warning icon."));
+export const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', editorInfoForeground, nls.localize('vs/platform/theme/common/colors/editorColors', 'problemsInfoIconForeground', "The color used for the problems info icon."));
diff --git a/esm/vs/platform/theme/common/colors/inputColors.js b/esm/vs/platform/theme/common/colors/inputColors.js
index 17f903c61e05867401a2e002211ba3bc2a3b1d72..7d60a01d865f66b646f3fdb37b70ee37cb2fb34f 100644
--- a/esm/vs/platform/theme/common/colors/inputColors.js
+++ b/esm/vs/platform/theme/common/colors/inputColors.js
@@ -10,54 +10,54 @@ import { registerColor, transparent, lighten, darken } from '../colorUtils.js';
 import { foreground, contrastBorder, focusBorder, iconForeground } from './baseColors.js';
 import { editorWidgetBackground } from './editorColors.js';
 // ----- input
-export const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('inputBoxBackground', "Input box background."));
-export const inputForeground = registerColor('input.foreground', foreground, nls.localize('inputBoxForeground', "Input box foreground."));
-export const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxBorder', "Input box border."));
-export const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', "Border color of activated options in input fields."));
-export const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('inputOption.hoverBackground', "Background color of activated options in input fields."));
-export const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('inputOption.activeBackground', "Background hover color of options in input fields."));
-export const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, nls.localize('inputOption.activeForeground', "Foreground color of activated options in input fields."));
-export const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', "Input box foreground color for placeholder text."));
+export const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputBoxBackground', "Input box background."));
+export const inputForeground = registerColor('input.foreground', foreground, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputBoxForeground', "Input box foreground."));
+export const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputBoxBorder', "Input box border."));
+export const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputBoxActiveOptionBorder', "Border color of activated options in input fields."));
+export const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputOption.hoverBackground', "Background color of activated options in input fields."));
+export const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputOption.activeBackground', "Background hover color of options in input fields."));
+export const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputOption.activeForeground', "Foreground color of activated options in input fields."));
+export const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputPlaceholderForeground', "Input box foreground color for placeholder text."));
 // ----- input validation
-export const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationInfoBackground', "Input validation background color for information severity."));
-export const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationInfoForeground', "Input validation foreground color for information severity."));
-export const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationInfoBorder', "Input validation border color for information severity."));
-export const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationWarningBackground', "Input validation background color for warning severity."));
-export const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationWarningForeground', "Input validation foreground color for warning severity."));
-export const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationWarningBorder', "Input validation border color for warning severity."));
-export const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationErrorBackground', "Input validation background color for error severity."));
-export const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationErrorForeground', "Input validation foreground color for error severity."));
-export const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationErrorBorder', "Input validation border color for error severity."));
+export const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputValidationInfoBackground', "Input validation background color for information severity."));
+export const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputValidationInfoForeground', "Input validation foreground color for information severity."));
+export const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputValidationInfoBorder', "Input validation border color for information severity."));
+export const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputValidationWarningBackground', "Input validation background color for warning severity."));
+export const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputValidationWarningForeground', "Input validation foreground color for warning severity."));
+export const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputValidationWarningBorder', "Input validation border color for warning severity."));
+export const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputValidationErrorBackground', "Input validation background color for error severity."));
+export const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputValidationErrorForeground', "Input validation foreground color for error severity."));
+export const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/inputColors', 'inputValidationErrorBorder', "Input validation border color for error severity."));
 // ----- select
-export const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownBackground', "Dropdown background."));
-export const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownListBackground', "Dropdown list background."));
-export const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, nls.localize('dropdownForeground', "Dropdown foreground."));
-export const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('dropdownBorder', "Dropdown border."));
+export const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/inputColors', 'dropdownBackground', "Dropdown background."));
+export const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/inputColors', 'dropdownListBackground', "Dropdown list background."));
+export const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, nls.localize('vs/platform/theme/common/colors/inputColors', 'dropdownForeground', "Dropdown foreground."));
+export const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/inputColors', 'dropdownBorder', "Dropdown border."));
 // ------ button
-export const buttonForeground = registerColor('button.foreground', Color.white, nls.localize('buttonForeground', "Button foreground color."));
-export const buttonSeparator = registerColor('button.separator', transparent(buttonForeground, .4), nls.localize('buttonSeparator', "Button separator color."));
-export const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('buttonBackground', "Button background color."));
-export const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: buttonBackground, hcLight: buttonBackground }, nls.localize('buttonHoverBackground', "Button background color when hovering."));
-export const buttonBorder = registerColor('button.border', contrastBorder, nls.localize('buttonBorder', "Button border color."));
-export const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('buttonSecondaryForeground', "Secondary button foreground color."));
-export const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('buttonSecondaryBackground', "Secondary button background color."));
-export const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonSecondaryHoverBackground', "Secondary button background color when hovering."));
+export const buttonForeground = registerColor('button.foreground', Color.white, nls.localize('vs/platform/theme/common/colors/inputColors', 'buttonForeground', "Button foreground color."));
+export const buttonSeparator = registerColor('button.separator', transparent(buttonForeground, .4), nls.localize('vs/platform/theme/common/colors/inputColors', 'buttonSeparator', "Button separator color."));
+export const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/inputColors', 'buttonBackground', "Button background color."));
+export const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: buttonBackground, hcLight: buttonBackground }, nls.localize('vs/platform/theme/common/colors/inputColors', 'buttonHoverBackground', "Button background color when hovering."));
+export const buttonBorder = registerColor('button.border', contrastBorder, nls.localize('vs/platform/theme/common/colors/inputColors', 'buttonBorder', "Button border color."));
+export const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('vs/platform/theme/common/colors/inputColors', 'buttonSecondaryForeground', "Secondary button foreground color."));
+export const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/inputColors', 'buttonSecondaryBackground', "Secondary button background color."));
+export const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/inputColors', 'buttonSecondaryHoverBackground', "Secondary button background color when hovering."));
 // ------ radio
-export const radioActiveForeground = registerColor('radio.activeForeground', inputActiveOptionForeground, nls.localize('radioActiveForeground', "Foreground color of active radio option."));
-export const radioActiveBackground = registerColor('radio.activeBackground', inputActiveOptionBackground, nls.localize('radioBackground', "Background color of active radio option."));
-export const radioActiveBorder = registerColor('radio.activeBorder', inputActiveOptionBorder, nls.localize('radioActiveBorder', "Border color of the active radio option."));
-export const radioInactiveForeground = registerColor('radio.inactiveForeground', null, nls.localize('radioInactiveForeground', "Foreground color of inactive radio option."));
-export const radioInactiveBackground = registerColor('radio.inactiveBackground', null, nls.localize('radioInactiveBackground', "Background color of inactive radio option."));
-export const radioInactiveBorder = registerColor('radio.inactiveBorder', { light: transparent(radioActiveForeground, .2), dark: transparent(radioActiveForeground, .2), hcDark: transparent(radioActiveForeground, .4), hcLight: transparent(radioActiveForeground, .2) }, nls.localize('radioInactiveBorder', "Border color of the inactive radio option."));
-export const radioInactiveHoverBackground = registerColor('radio.inactiveHoverBackground', inputActiveOptionHoverBackground, nls.localize('radioHoverBackground', "Background color of inactive active radio option when hovering."));
+export const radioActiveForeground = registerColor('radio.activeForeground', inputActiveOptionForeground, nls.localize('vs/platform/theme/common/colors/inputColors', 'radioActiveForeground', "Foreground color of active radio option."));
+export const radioActiveBackground = registerColor('radio.activeBackground', inputActiveOptionBackground, nls.localize('vs/platform/theme/common/colors/inputColors', 'radioBackground', "Background color of active radio option."));
+export const radioActiveBorder = registerColor('radio.activeBorder', inputActiveOptionBorder, nls.localize('vs/platform/theme/common/colors/inputColors', 'radioActiveBorder', "Border color of the active radio option."));
+export const radioInactiveForeground = registerColor('radio.inactiveForeground', null, nls.localize('vs/platform/theme/common/colors/inputColors', 'radioInactiveForeground', "Foreground color of inactive radio option."));
+export const radioInactiveBackground = registerColor('radio.inactiveBackground', null, nls.localize('vs/platform/theme/common/colors/inputColors', 'radioInactiveBackground', "Background color of inactive radio option."));
+export const radioInactiveBorder = registerColor('radio.inactiveBorder', { light: transparent(radioActiveForeground, .2), dark: transparent(radioActiveForeground, .2), hcDark: transparent(radioActiveForeground, .4), hcLight: transparent(radioActiveForeground, .2) }, nls.localize('vs/platform/theme/common/colors/inputColors', 'radioInactiveBorder', "Border color of the inactive radio option."));
+export const radioInactiveHoverBackground = registerColor('radio.inactiveHoverBackground', inputActiveOptionHoverBackground, nls.localize('vs/platform/theme/common/colors/inputColors', 'radioHoverBackground', "Background color of inactive active radio option when hovering."));
 // ------ checkbox
-export const checkboxBackground = registerColor('checkbox.background', selectBackground, nls.localize('checkbox.background', "Background color of checkbox widget."));
-export const checkboxSelectBackground = registerColor('checkbox.selectBackground', editorWidgetBackground, nls.localize('checkbox.select.background', "Background color of checkbox widget when the element it's in is selected."));
-export const checkboxForeground = registerColor('checkbox.foreground', selectForeground, nls.localize('checkbox.foreground', "Foreground color of checkbox widget."));
-export const checkboxBorder = registerColor('checkbox.border', selectBorder, nls.localize('checkbox.border', "Border color of checkbox widget."));
-export const checkboxSelectBorder = registerColor('checkbox.selectBorder', iconForeground, nls.localize('checkbox.select.border', "Border color of checkbox widget when the element it's in is selected."));
+export const checkboxBackground = registerColor('checkbox.background', selectBackground, nls.localize('vs/platform/theme/common/colors/inputColors', 'checkbox.background', "Background color of checkbox widget."));
+export const checkboxSelectBackground = registerColor('checkbox.selectBackground', editorWidgetBackground, nls.localize('vs/platform/theme/common/colors/inputColors', 'checkbox.select.background', "Background color of checkbox widget when the element it's in is selected."));
+export const checkboxForeground = registerColor('checkbox.foreground', selectForeground, nls.localize('vs/platform/theme/common/colors/inputColors', 'checkbox.foreground', "Foreground color of checkbox widget."));
+export const checkboxBorder = registerColor('checkbox.border', selectBorder, nls.localize('vs/platform/theme/common/colors/inputColors', 'checkbox.border', "Border color of checkbox widget."));
+export const checkboxSelectBorder = registerColor('checkbox.selectBorder', iconForeground, nls.localize('vs/platform/theme/common/colors/inputColors', 'checkbox.select.border', "Border color of checkbox widget when the element it's in is selected."));
 // ------ keybinding label
-export const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('keybindingLabelBackground', "Keybinding label background color. The keybinding label is used to represent a keyboard shortcut."));
-export const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('keybindingLabelForeground', "Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut."));
-export const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('keybindingLabelBorder', "Keybinding label border color. The keybinding label is used to represent a keyboard shortcut."));
-export const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('keybindingLabelBottomBorder', "Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut."));
+export const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('vs/platform/theme/common/colors/inputColors', 'keybindingLabelBackground', "Keybinding label background color. The keybinding label is used to represent a keyboard shortcut."));
+export const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('vs/platform/theme/common/colors/inputColors', 'keybindingLabelForeground', "Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut."));
+export const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/inputColors', 'keybindingLabelBorder', "Keybinding label border color. The keybinding label is used to represent a keyboard shortcut."));
+export const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('vs/platform/theme/common/colors/inputColors', 'keybindingLabelBottomBorder', "Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut."));
diff --git a/esm/vs/platform/theme/common/colors/listColors.js b/esm/vs/platform/theme/common/colors/listColors.js
index 4dd69146c12033e31bd16f54be7e4a57cc260412..31106c643f4c18d5af2dd0d473f02004e022bbeb 100644
--- a/esm/vs/platform/theme/common/colors/listColors.js
+++ b/esm/vs/platform/theme/common/colors/listColors.js
@@ -9,42 +9,42 @@ import { registerColor, darken, lighten, transparent, ifDefinedThenElse } from '
 // Import the colors we need
 import { foreground, contrastBorder, activeContrastBorder, focusBorder, iconForeground } from './baseColors.js';
 import { editorWidgetBackground, editorFindMatchHighlightBorder, editorFindMatchHighlight, widgetShadow, editorWidgetForeground } from './editorColors.js';
-export const listFocusBackground = registerColor('list.focusBackground', null, nls.localize('listFocusBackground', "List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
-export const listFocusForeground = registerColor('list.focusForeground', null, nls.localize('listFocusForeground', "List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
-export const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('listFocusOutline', "List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
-export const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', null, nls.localize('listFocusAndSelectionOutline', "List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not."));
-export const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
-export const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
-export const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', null, nls.localize('listActiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
-export const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
-export const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', null, nls.localize('listInactiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
-export const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', null, nls.localize('listInactiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
-export const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', null, nls.localize('listInactiveFocusBackground', "List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
-export const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', null, nls.localize('listInactiveFocusOutline', "List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
-export const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: Color.white.transparent(0.1), hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', "List/Tree background when hovering over items using the mouse."));
-export const listHoverForeground = registerColor('list.hoverForeground', null, nls.localize('listHoverForeground', "List/Tree foreground when hovering over items using the mouse."));
-export const listDropOverBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', "List/Tree drag and drop background when moving items over other items when using the mouse."));
-export const listDropBetweenBackground = registerColor('list.dropBetweenBackground', { dark: iconForeground, light: iconForeground, hcDark: null, hcLight: null }, nls.localize('listDropBetweenBackground', "List/Tree drag and drop border color when moving items between items when using the mouse."));
-export const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));
-export const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));
-export const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));
-export const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));
-export const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));
-export const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));
-export const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));
-export const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));
-export const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', widgetShadow, nls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));
-export const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));
-export const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));
-export const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', "List/Tree foreground color for items that are deemphasized."));
+export const listFocusBackground = registerColor('list.focusBackground', null, nls.localize('vs/platform/theme/common/colors/listColors', 'listFocusBackground', "List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
+export const listFocusForeground = registerColor('list.focusForeground', null, nls.localize('vs/platform/theme/common/colors/listColors', 'listFocusForeground', "List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
+export const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/platform/theme/common/colors/listColors', 'listFocusOutline', "List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
+export const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', null, nls.localize('vs/platform/theme/common/colors/listColors', 'listFocusAndSelectionOutline', "List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not."));
+export const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('vs/platform/theme/common/colors/listColors', 'listActiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
+export const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/listColors', 'listActiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
+export const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', null, nls.localize('vs/platform/theme/common/colors/listColors', 'listActiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
+export const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('vs/platform/theme/common/colors/listColors', 'listInactiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
+export const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', null, nls.localize('vs/platform/theme/common/colors/listColors', 'listInactiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
+export const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', null, nls.localize('vs/platform/theme/common/colors/listColors', 'listInactiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
+export const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', null, nls.localize('vs/platform/theme/common/colors/listColors', 'listInactiveFocusBackground', "List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
+export const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', null, nls.localize('vs/platform/theme/common/colors/listColors', 'listInactiveFocusOutline', "List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
+export const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: Color.white.transparent(0.1), hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('vs/platform/theme/common/colors/listColors', 'listHoverBackground', "List/Tree background when hovering over items using the mouse."));
+export const listHoverForeground = registerColor('list.hoverForeground', null, nls.localize('vs/platform/theme/common/colors/listColors', 'listHoverForeground', "List/Tree foreground when hovering over items using the mouse."));
+export const listDropOverBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/listColors', 'listDropBackground', "List/Tree drag and drop background when moving items over other items when using the mouse."));
+export const listDropBetweenBackground = registerColor('list.dropBetweenBackground', { dark: iconForeground, light: iconForeground, hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/listColors', 'listDropBetweenBackground', "List/Tree drag and drop border color when moving items between items when using the mouse."));
+export const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, nls.localize('vs/platform/theme/common/colors/listColors', 'highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));
+export const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('vs/platform/theme/common/colors/listColors', 'listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));
+export const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('vs/platform/theme/common/colors/listColors', 'invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));
+export const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/listColors', 'listErrorForeground', 'Foreground color of list items containing errors.'));
+export const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/listColors', 'listWarningForeground', 'Foreground color of list items containing warnings.'));
+export const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('vs/platform/theme/common/colors/listColors', 'listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));
+export const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('vs/platform/theme/common/colors/listColors', 'listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));
+export const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/listColors', 'listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));
+export const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', widgetShadow, nls.localize('vs/platform/theme/common/colors/listColors', 'listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));
+export const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/listColors', 'listFilterMatchHighlight', 'Background color of the filtered match.'));
+export const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/platform/theme/common/colors/listColors', 'listFilterMatchHighlightBorder', 'Border color of the filtered match.'));
+export const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('vs/platform/theme/common/colors/listColors', 'listDeemphasizedForeground', "List/Tree foreground color for items that are deemphasized."));
 // ------ tree
-export const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', "Tree stroke color for the indentation guides."));
-export const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke', transparent(treeIndentGuidesStroke, 0.4), nls.localize('treeInactiveIndentGuidesStroke', "Tree stroke color for the indentation guides that are not active."));
+export const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('vs/platform/theme/common/colors/listColors', 'treeIndentGuidesStroke', "Tree stroke color for the indentation guides."));
+export const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke', transparent(treeIndentGuidesStroke, 0.4), nls.localize('vs/platform/theme/common/colors/listColors', 'treeInactiveIndentGuidesStroke', "Tree stroke color for the indentation guides that are not active."));
 // ------ table
-export const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', "Table border color between columns."));
-export const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', "Background color for odd table rows."));
+export const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/listColors', 'tableColumnsBorder', "Table border color between columns."));
+export const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/listColors', 'tableOddRowsBackgroundColor', "Background color for odd table rows."));
 // ------ action list
-export const editorActionListBackground = registerColor('editorActionList.background', editorWidgetBackground, nls.localize('editorActionListBackground', "Action List background color."));
-export const editorActionListForeground = registerColor('editorActionList.foreground', editorWidgetForeground, nls.localize('editorActionListForeground', "Action List foreground color."));
-export const editorActionListFocusForeground = registerColor('editorActionList.focusForeground', listActiveSelectionForeground, nls.localize('editorActionListFocusForeground', "Action List foreground color for the focused item."));
-export const editorActionListFocusBackground = registerColor('editorActionList.focusBackground', listActiveSelectionBackground, nls.localize('editorActionListFocusBackground', "Action List background color for the focused item."));
+export const editorActionListBackground = registerColor('editorActionList.background', editorWidgetBackground, nls.localize('vs/platform/theme/common/colors/listColors', 'editorActionListBackground', "Action List background color."));
+export const editorActionListForeground = registerColor('editorActionList.foreground', editorWidgetForeground, nls.localize('vs/platform/theme/common/colors/listColors', 'editorActionListForeground', "Action List foreground color."));
+export const editorActionListFocusForeground = registerColor('editorActionList.focusForeground', listActiveSelectionForeground, nls.localize('vs/platform/theme/common/colors/listColors', 'editorActionListFocusForeground', "Action List foreground color for the focused item."));
+export const editorActionListFocusBackground = registerColor('editorActionList.focusBackground', listActiveSelectionBackground, nls.localize('vs/platform/theme/common/colors/listColors', 'editorActionListFocusBackground', "Action List background color for the focused item."));
diff --git a/esm/vs/platform/theme/common/colors/menuColors.js b/esm/vs/platform/theme/common/colors/menuColors.js
index b91abbdb571b9ac24e34a02455cc1eff71c77613..aa85ccd827a05206f65a6f5ea2d6d168bd00f3ae 100644
--- a/esm/vs/platform/theme/common/colors/menuColors.js
+++ b/esm/vs/platform/theme/common/colors/menuColors.js
@@ -9,10 +9,10 @@ import { registerColor } from '../colorUtils.js';
 import { contrastBorder, activeContrastBorder } from './baseColors.js';
 import { selectForeground, selectBackground } from './inputColors.js';
 import { listActiveSelectionBackground, listActiveSelectionForeground } from './listColors.js';
-export const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuBorder', "Border color of menus."));
-export const menuForeground = registerColor('menu.foreground', selectForeground, nls.localize('menuForeground', "Foreground color of menu items."));
-export const menuBackground = registerColor('menu.background', selectBackground, nls.localize('menuBackground', "Background color of menu items."));
-export const menuSelectionForeground = registerColor('menu.selectionForeground', listActiveSelectionForeground, nls.localize('menuSelectionForeground', "Foreground color of the selected menu item in menus."));
-export const menuSelectionBackground = registerColor('menu.selectionBackground', listActiveSelectionBackground, nls.localize('menuSelectionBackground', "Background color of the selected menu item in menus."));
-export const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('menuSelectionBorder', "Border color of the selected menu item in menus."));
-export const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuSeparatorBackground', "Color of a separator menu item in menus."));
+export const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/menuColors', 'menuBorder', "Border color of menus."));
+export const menuForeground = registerColor('menu.foreground', selectForeground, nls.localize('vs/platform/theme/common/colors/menuColors', 'menuForeground', "Foreground color of menu items."));
+export const menuBackground = registerColor('menu.background', selectBackground, nls.localize('vs/platform/theme/common/colors/menuColors', 'menuBackground', "Background color of menu items."));
+export const menuSelectionForeground = registerColor('menu.selectionForeground', listActiveSelectionForeground, nls.localize('vs/platform/theme/common/colors/menuColors', 'menuSelectionForeground', "Foreground color of the selected menu item in menus."));
+export const menuSelectionBackground = registerColor('menu.selectionBackground', listActiveSelectionBackground, nls.localize('vs/platform/theme/common/colors/menuColors', 'menuSelectionBackground', "Background color of the selected menu item in menus."));
+export const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('vs/platform/theme/common/colors/menuColors', 'menuSelectionBorder', "Border color of the selected menu item in menus."));
+export const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/menuColors', 'menuSeparatorBackground', "Color of a separator menu item in menus."));
diff --git a/esm/vs/platform/theme/common/colors/minimapColors.js b/esm/vs/platform/theme/common/colors/minimapColors.js
index d4447edfd2e13150386dbc9950caf37a86f51965..b2661dfa4d2b3baf2c0580b3cac132420467c124 100644
--- a/esm/vs/platform/theme/common/colors/minimapColors.js
+++ b/esm/vs/platform/theme/common/colors/minimapColors.js
@@ -9,14 +9,14 @@ import { registerColor, transparent } from '../colorUtils.js';
 // Import the colors we need
 import { editorInfoForeground, editorWarningForeground, editorWarningBorder, editorInfoBorder } from './editorColors.js';
 import { scrollbarSliderBackground, scrollbarSliderHoverBackground, scrollbarSliderActiveBackground } from './miscColors.js';
-export const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);
-export const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);
-export const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);
-export const minimapInfo = registerColor('minimap.infoHighlight', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('minimapInfo', 'Minimap marker color for infos.'));
-export const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));
-export const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('minimapError', 'Minimap marker color for errors.'));
-export const minimapBackground = registerColor('minimap.background', null, nls.localize('minimapBackground', "Minimap background color."));
-export const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', Color.fromHex('#000f'), nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, "#000000c0" will render the elements with 75% opacity.'));
-export const minimapSliderBackground = registerColor('minimapSlider.background', transparent(scrollbarSliderBackground, 0.5), nls.localize('minimapSliderBackground', "Minimap slider background color."));
-export const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', transparent(scrollbarSliderHoverBackground, 0.5), nls.localize('minimapSliderHoverBackground', "Minimap slider background color when hovering."));
-export const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', transparent(scrollbarSliderActiveBackground, 0.5), nls.localize('minimapSliderActiveBackground', "Minimap slider background color when clicked on."));
+export const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/minimapColors', 'minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);
+export const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/minimapColors', 'minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);
+export const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/minimapColors', 'minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);
+export const minimapInfo = registerColor('minimap.infoHighlight', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('vs/platform/theme/common/colors/minimapColors', 'minimapInfo', 'Minimap marker color for infos.'));
+export const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('vs/platform/theme/common/colors/minimapColors', 'overviewRuleWarning', 'Minimap marker color for warnings.'));
+export const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('vs/platform/theme/common/colors/minimapColors', 'minimapError', 'Minimap marker color for errors.'));
+export const minimapBackground = registerColor('minimap.background', null, nls.localize('vs/platform/theme/common/colors/minimapColors', 'minimapBackground', "Minimap background color."));
+export const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', Color.fromHex('#000f'), nls.localize('vs/platform/theme/common/colors/minimapColors', 'minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, "#000000c0" will render the elements with 75% opacity.'));
+export const minimapSliderBackground = registerColor('minimapSlider.background', transparent(scrollbarSliderBackground, 0.5), nls.localize('vs/platform/theme/common/colors/minimapColors', 'minimapSliderBackground', "Minimap slider background color."));
+export const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', transparent(scrollbarSliderHoverBackground, 0.5), nls.localize('vs/platform/theme/common/colors/minimapColors', 'minimapSliderHoverBackground', "Minimap slider background color when hovering."));
+export const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', transparent(scrollbarSliderActiveBackground, 0.5), nls.localize('vs/platform/theme/common/colors/minimapColors', 'minimapSliderActiveBackground', "Minimap slider background color when clicked on."));
diff --git a/esm/vs/platform/theme/common/colors/miscColors.js b/esm/vs/platform/theme/common/colors/miscColors.js
index b9bc3e0c7a98c053900756c4f0c38f987fe35f81..90fdd2ef5cd5c50ac28c27e16f0d9d4699be850b 100644
--- a/esm/vs/platform/theme/common/colors/miscColors.js
+++ b/esm/vs/platform/theme/common/colors/miscColors.js
@@ -9,14 +9,14 @@ import { registerColor, transparent } from '../colorUtils.js';
 // Import the colors we need
 import { contrastBorder, focusBorder } from './baseColors.js';
 // ----- sash
-export const sashHoverBorder = registerColor('sash.hoverBorder', focusBorder, nls.localize('sashActiveBorder', "Border color of active sashes."));
+export const sashHoverBorder = registerColor('sash.hoverBorder', focusBorder, nls.localize('vs/platform/theme/common/colors/miscColors', 'sashActiveBorder', "Border color of active sashes."));
 // ----- badge
-export const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', "Badge background color. Badges are small information labels, e.g. for search results count."));
-export const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('badgeForeground', "Badge foreground color. Badges are small information labels, e.g. for search results count."));
+export const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/miscColors', 'badgeBackground', "Badge background color. Badges are small information labels, e.g. for search results count."));
+export const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/miscColors', 'badgeForeground', "Badge foreground color. Badges are small information labels, e.g. for search results count."));
 // ----- scrollbar
-export const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', "Scrollbar shadow to indicate that the view is scrolled."));
-export const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', "Scrollbar slider background color."));
-export const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', "Scrollbar slider background color when hovering."));
-export const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', "Scrollbar slider background color when clicked on."));
+export const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/miscColors', 'scrollbarShadow', "Scrollbar shadow to indicate that the view is scrolled."));
+export const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('vs/platform/theme/common/colors/miscColors', 'scrollbarSliderBackground', "Scrollbar slider background color."));
+export const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('vs/platform/theme/common/colors/miscColors', 'scrollbarSliderHoverBackground', "Scrollbar slider background color when hovering."));
+export const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/miscColors', 'scrollbarSliderActiveBackground', "Scrollbar slider background color when clicked on."));
 // ----- progress bar
-export const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('progressBarBackground', "Background color of the progress bar that can show for long running operations."));
+export const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('vs/platform/theme/common/colors/miscColors', 'progressBarBackground', "Background color of the progress bar that can show for long running operations."));
diff --git a/esm/vs/platform/theme/common/colors/quickpickColors.js b/esm/vs/platform/theme/common/colors/quickpickColors.js
index 68004f7973ce9536312353103334c2a838e862f5..51916a2e99a2d8d5d1f70dd87aefbe53faf8fb9e 100644
--- a/esm/vs/platform/theme/common/colors/quickpickColors.js
+++ b/esm/vs/platform/theme/common/colors/quickpickColors.js
@@ -9,12 +9,12 @@ import { registerColor, oneOf } from '../colorUtils.js';
 // Import the colors we need
 import { editorWidgetBackground, editorWidgetForeground } from './editorColors.js';
 import { listActiveSelectionBackground, listActiveSelectionForeground, listActiveSelectionIconForeground } from './listColors.js';
-export const quickInputBackground = registerColor('quickInput.background', editorWidgetBackground, nls.localize('pickerBackground', "Quick picker background color. The quick picker widget is the container for pickers like the command palette."));
-export const quickInputForeground = registerColor('quickInput.foreground', editorWidgetForeground, nls.localize('pickerForeground', "Quick picker foreground color. The quick picker widget is the container for pickers like the command palette."));
-export const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hcDark: '#000000', hcLight: Color.white }, nls.localize('pickerTitleBackground', "Quick picker title background color. The quick picker widget is the container for pickers like the command palette."));
-export const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupForeground', "Quick picker color for grouping labels."));
-export const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupBorder', "Quick picker color for grouping borders."));
-export const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', null, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', "Please use quickInputList.focusBackground instead"));
-export const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', listActiveSelectionForeground, nls.localize('quickInput.listFocusForeground', "Quick picker foreground color for the focused item."));
-export const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', listActiveSelectionIconForeground, nls.localize('quickInput.listFocusIconForeground', "Quick picker icon foreground color for the focused item."));
-export const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, nls.localize('quickInput.listFocusBackground', "Quick picker background color for the focused item."));
+export const quickInputBackground = registerColor('quickInput.background', editorWidgetBackground, nls.localize('vs/platform/theme/common/colors/quickpickColors', 'pickerBackground', "Quick picker background color. The quick picker widget is the container for pickers like the command palette."));
+export const quickInputForeground = registerColor('quickInput.foreground', editorWidgetForeground, nls.localize('vs/platform/theme/common/colors/quickpickColors', 'pickerForeground', "Quick picker foreground color. The quick picker widget is the container for pickers like the command palette."));
+export const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hcDark: '#000000', hcLight: Color.white }, nls.localize('vs/platform/theme/common/colors/quickpickColors', 'pickerTitleBackground', "Quick picker title background color. The quick picker widget is the container for pickers like the command palette."));
+export const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/quickpickColors', 'pickerGroupForeground', "Quick picker color for grouping labels."));
+export const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('vs/platform/theme/common/colors/quickpickColors', 'pickerGroupBorder', "Quick picker color for grouping borders."));
+export const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', null, '', undefined, nls.localize('vs/platform/theme/common/colors/quickpickColors', 'quickInput.list.focusBackground deprecation', "Please use quickInputList.focusBackground instead"));
+export const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', listActiveSelectionForeground, nls.localize('vs/platform/theme/common/colors/quickpickColors', 'quickInput.listFocusForeground', "Quick picker foreground color for the focused item."));
+export const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', listActiveSelectionIconForeground, nls.localize('vs/platform/theme/common/colors/quickpickColors', 'quickInput.listFocusIconForeground', "Quick picker icon foreground color for the focused item."));
+export const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, nls.localize('vs/platform/theme/common/colors/quickpickColors', 'quickInput.listFocusBackground', "Quick picker background color for the focused item."));
diff --git a/esm/vs/platform/theme/common/colors/searchColors.js b/esm/vs/platform/theme/common/colors/searchColors.js
index 4266afffc3a1e81377c2f48a443899293d03d51d..156091032563a3bfb3a88f4f2b46a8c71f354446 100644
--- a/esm/vs/platform/theme/common/colors/searchColors.js
+++ b/esm/vs/platform/theme/common/colors/searchColors.js
@@ -8,7 +8,7 @@ import { registerColor, transparent } from '../colorUtils.js';
 // Import the colors we need
 import { foreground } from './baseColors.js';
 import { editorFindMatchHighlight, editorFindMatchHighlightBorder } from './editorColors.js';
-export const searchResultsInfoForeground = registerColor('search.resultsInfoForeground', { light: foreground, dark: transparent(foreground, 0.65), hcDark: foreground, hcLight: foreground }, nls.localize('search.resultsInfoForeground', "Color of the text in the search viewlet's completion message."));
+export const searchResultsInfoForeground = registerColor('search.resultsInfoForeground', { light: foreground, dark: transparent(foreground, 0.65), hcDark: foreground, hcLight: foreground }, nls.localize('vs/platform/theme/common/colors/searchColors', 'search.resultsInfoForeground', "Color of the text in the search viewlet's completion message."));
 // ----- search editor (Distinct from normal editor find match to allow for better differentiation)
-export const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, nls.localize('searchEditor.queryMatch', "Color of the Search Editor query matches."));
-export const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, nls.localize('searchEditor.editorFindMatchBorder', "Border color of the Search Editor query matches."));
+export const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, nls.localize('vs/platform/theme/common/colors/searchColors', 'searchEditor.queryMatch', "Color of the Search Editor query matches."));
+export const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, nls.localize('vs/platform/theme/common/colors/searchColors', 'searchEditor.editorFindMatchBorder', "Border color of the Search Editor query matches."));
diff --git a/esm/vs/platform/theme/common/iconRegistry.js b/esm/vs/platform/theme/common/iconRegistry.js
index 1b10e44ac10aeb81576f8cdbdb8ba4d9134d3ca9..efcda0b049e77305ab341a04b1b9e3311d58b54c 100644
--- a/esm/vs/platform/theme/common/iconRegistry.js
+++ b/esm/vs/platform/theme/common/iconRegistry.js
@@ -64,8 +64,8 @@ class IconRegistry {
                 icons: {
                     type: 'object',
                     properties: {
-                        fontId: { type: 'string', description: localize('iconDefinition.fontId', 'The id of the font to use. If not set, the font that is defined first is used.') },
-                        fontCharacter: { type: 'string', description: localize('iconDefinition.fontCharacter', 'The font character associated with the icon definition.') }
+                        fontId: { type: 'string', description: localize('vs/platform/theme/common/iconRegistry', 'iconDefinition.fontId', 'The id of the font to use. If not set, the font that is defined first is used.') },
+                        fontCharacter: { type: 'string', description: localize('vs/platform/theme/common/iconRegistry', 'iconDefinition.fontCharacter', 'The font character associated with the icon definition.') }
                     },
                     additionalProperties: false,
                     defaultSnippets: [{ body: { fontCharacter: '\\\\e030' } }]
@@ -168,8 +168,8 @@ iconRegistry.onDidChange(() => {
 });
 //setTimeout(_ => console.log(iconRegistry.toString()), 5000);
 // common icons
-export const widgetClose = registerIcon('widget-close', Codicon.close, localize('widgetClose', 'Icon for the close action in widgets.'));
-export const gotoPreviousLocation = registerIcon('goto-previous-location', Codicon.arrowUp, localize('previousChangeIcon', 'Icon for goto previous editor location.'));
-export const gotoNextLocation = registerIcon('goto-next-location', Codicon.arrowDown, localize('nextChangeIcon', 'Icon for goto next editor location.'));
+export const widgetClose = registerIcon('widget-close', Codicon.close, localize('vs/platform/theme/common/iconRegistry', 'widgetClose', 'Icon for the close action in widgets.'));
+export const gotoPreviousLocation = registerIcon('goto-previous-location', Codicon.arrowUp, localize('vs/platform/theme/common/iconRegistry', 'previousChangeIcon', 'Icon for goto previous editor location.'));
+export const gotoNextLocation = registerIcon('goto-next-location', Codicon.arrowDown, localize('vs/platform/theme/common/iconRegistry', 'nextChangeIcon', 'Icon for goto next editor location.'));
 export const syncing = ThemeIcon.modify(Codicon.sync, 'spin');
 export const spinningLoading = ThemeIcon.modify(Codicon.loading, 'spin');
diff --git a/esm/vs/platform/undoRedo/common/undoRedoService.js b/esm/vs/platform/undoRedo/common/undoRedoService.js
index b0dd5e910b27f10c1f3cda7cd08d46935e0f9c53..1e94c0a409974a9e5ae6763d3d6cc0fbf2b3e5ff 100644
--- a/esm/vs/platform/undoRedo/common/undoRedoService.js
+++ b/esm/vs/platform/undoRedo/common/undoRedoService.js
@@ -70,10 +70,10 @@ class RemovedResources {
         }
         const messages = [];
         if (externalRemoval.length > 0) {
-            messages.push(nls.localize({ key: 'externalRemoval', comment: ['{0} is a list of filenames'] }, "The following files have been closed and modified on disk: {0}.", externalRemoval.join(', ')));
+            messages.push(nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'externalRemoval', comment: ['{0} is a list of filenames'] }, "The following files have been closed and modified on disk: {0}.", externalRemoval.join(', ')));
         }
         if (noParallelUniverses.length > 0) {
-            messages.push(nls.localize({ key: 'noParallelUniverses', comment: ['{0} is a list of filenames'] }, "The following files have been modified in an incompatible way: {0}.", noParallelUniverses.join(', ')));
+            messages.push(nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'noParallelUniverses', comment: ['{0} is a list of filenames'] }, "The following files have been modified in an incompatible way: {0}.", noParallelUniverses.join(', ')));
         }
         return messages.join('\n');
     }
@@ -657,10 +657,10 @@ let UndoRedoService = class UndoRedoService {
     }
     _checkWorkspaceUndo(strResource, element, editStackSnapshot, checkInvalidatedResources) {
         if (element.removedResources) {
-            return this._tryToSplitAndUndo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, "Could not undo '{0}' across all files. {1}", element.label, element.removedResources.createMessage()));
+            return this._tryToSplitAndUndo(strResource, element, element.removedResources, nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, "Could not undo '{0}' across all files. {1}", element.label, element.removedResources.createMessage()));
         }
         if (checkInvalidatedResources && element.invalidatedResources) {
-            return this._tryToSplitAndUndo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, "Could not undo '{0}' across all files. {1}", element.label, element.invalidatedResources.createMessage()));
+            return this._tryToSplitAndUndo(strResource, element, element.invalidatedResources, nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, "Could not undo '{0}' across all files. {1}", element.label, element.invalidatedResources.createMessage()));
         }
         // this must be the last past element in all the impacted resources!
         const cannotUndoDueToResources = [];
@@ -670,7 +670,7 @@ let UndoRedoService = class UndoRedoService {
             }
         }
         if (cannotUndoDueToResources.length > 0) {
-            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not undo '{0}' across all files because changes were made to {1}", element.label, cannotUndoDueToResources.join(', ')));
+            return this._tryToSplitAndUndo(strResource, element, null, nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotWorkspaceUndoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not undo '{0}' across all files because changes were made to {1}", element.label, cannotUndoDueToResources.join(', ')));
         }
         const cannotLockDueToResources = [];
         for (const editStack of editStackSnapshot.editStacks) {
@@ -679,11 +679,11 @@ let UndoRedoService = class UndoRedoService {
             }
         }
         if (cannotLockDueToResources.length > 0) {
-            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}", element.label, cannotLockDueToResources.join(', ')));
+            return this._tryToSplitAndUndo(strResource, element, null, nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotWorkspaceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}", element.label, cannotLockDueToResources.join(', ')));
         }
         // check if new stack elements were added in the meantime...
         if (!editStackSnapshot.isValid()) {
-            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime", element.label));
+            return this._tryToSplitAndUndo(strResource, element, null, nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime", element.label));
         }
         return null;
     }
@@ -730,14 +730,14 @@ let UndoRedoService = class UndoRedoService {
             })(UndoChoice || (UndoChoice = {}));
             const { result } = await this._dialogService.prompt({
                 type: Severity.Info,
-                message: nls.localize('confirmWorkspace', "Would you like to undo '{0}' across all files?", element.label),
+                message: nls.localize('vs/platform/undoRedo/common/undoRedoService', 'confirmWorkspace', "Would you like to undo '{0}' across all files?", element.label),
                 buttons: [
                     {
-                        label: nls.localize({ key: 'ok', comment: ['{0} denotes a number that is > 1, && denotes a mnemonic'] }, "&&Undo in {0} Files", editStackSnapshot.editStacks.length),
+                        label: nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'ok', comment: ['{0} denotes a number that is > 1, && denotes a mnemonic'] }, "&&Undo in {0} Files", editStackSnapshot.editStacks.length),
                         run: () => UndoChoice.All
                     },
                     {
-                        label: nls.localize({ key: 'nok', comment: ['&& denotes a mnemonic'] }, "Undo this &&File"),
+                        label: nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'nok', comment: ['&& denotes a mnemonic'] }, "Undo this &&File"),
                         run: () => UndoChoice.This
                     }
                 ],
@@ -788,7 +788,7 @@ let UndoRedoService = class UndoRedoService {
             return;
         }
         if (editStack.locked) {
-            const message = nls.localize({ key: 'cannotResourceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, "Could not undo '{0}' because there is already an undo or redo operation running.", element.label);
+            const message = nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotResourceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, "Could not undo '{0}' because there is already an undo or redo operation running.", element.label);
             this._notificationService.warn(message);
             return;
         }
@@ -875,9 +875,9 @@ let UndoRedoService = class UndoRedoService {
     }
     async _confirmAndContinueUndo(strResource, sourceId, element) {
         const result = await this._dialogService.confirm({
-            message: nls.localize('confirmDifferentSource', "Would you like to undo '{0}'?", element.label),
-            primaryButton: nls.localize({ key: 'confirmDifferentSource.yes', comment: ['&& denotes a mnemonic'] }, "&&Yes"),
-            cancelButton: nls.localize('confirmDifferentSource.no', "No")
+            message: nls.localize('vs/platform/undoRedo/common/undoRedoService', 'confirmDifferentSource', "Would you like to undo '{0}'?", element.label),
+            primaryButton: nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'confirmDifferentSource.yes', comment: ['&& denotes a mnemonic'] }, "&&Yes"),
+            cancelButton: nls.localize('vs/platform/undoRedo/common/undoRedoService', 'confirmDifferentSource.no', "No")
         });
         if (!result.confirmed) {
             return;
@@ -934,10 +934,10 @@ let UndoRedoService = class UndoRedoService {
     }
     _checkWorkspaceRedo(strResource, element, editStackSnapshot, checkInvalidatedResources) {
         if (element.removedResources) {
-            return this._tryToSplitAndRedo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, "Could not redo '{0}' across all files. {1}", element.label, element.removedResources.createMessage()));
+            return this._tryToSplitAndRedo(strResource, element, element.removedResources, nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, "Could not redo '{0}' across all files. {1}", element.label, element.removedResources.createMessage()));
         }
         if (checkInvalidatedResources && element.invalidatedResources) {
-            return this._tryToSplitAndRedo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, "Could not redo '{0}' across all files. {1}", element.label, element.invalidatedResources.createMessage()));
+            return this._tryToSplitAndRedo(strResource, element, element.invalidatedResources, nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, "Could not redo '{0}' across all files. {1}", element.label, element.invalidatedResources.createMessage()));
         }
         // this must be the last future element in all the impacted resources!
         const cannotRedoDueToResources = [];
@@ -947,7 +947,7 @@ let UndoRedoService = class UndoRedoService {
             }
         }
         if (cannotRedoDueToResources.length > 0) {
-            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not redo '{0}' across all files because changes were made to {1}", element.label, cannotRedoDueToResources.join(', ')));
+            return this._tryToSplitAndRedo(strResource, element, null, nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotWorkspaceRedoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not redo '{0}' across all files because changes were made to {1}", element.label, cannotRedoDueToResources.join(', ')));
         }
         const cannotLockDueToResources = [];
         for (const editStack of editStackSnapshot.editStacks) {
@@ -956,11 +956,11 @@ let UndoRedoService = class UndoRedoService {
             }
         }
         if (cannotLockDueToResources.length > 0) {
-            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}", element.label, cannotLockDueToResources.join(', ')));
+            return this._tryToSplitAndRedo(strResource, element, null, nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotWorkspaceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}", element.label, cannotLockDueToResources.join(', ')));
         }
         // check if new stack elements were added in the meantime...
         if (!editStackSnapshot.isValid()) {
-            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime", element.label));
+            return this._tryToSplitAndRedo(strResource, element, null, nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, "Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime", element.label));
         }
         return null;
     }
@@ -999,7 +999,7 @@ let UndoRedoService = class UndoRedoService {
             return;
         }
         if (editStack.locked) {
-            const message = nls.localize({ key: 'cannotResourceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, "Could not redo '{0}' because there is already an undo or redo operation running.", element.label);
+            const message = nls.localize('vs/platform/undoRedo/common/undoRedoService', { key: 'cannotResourceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, "Could not redo '{0}' because there is already an undo or redo operation running.", element.label);
             this._notificationService.warn(message);
             return;
         }
diff --git a/esm/vs/platform/workspace/common/workspace.js b/esm/vs/platform/workspace/common/workspace.js
index ff9670aa5735e067733c370109ec03b6fbfa3469..5a3c78593a46a5d37b6ad577fec299c57fefed26 100644
--- a/esm/vs/platform/workspace/common/workspace.js
+++ b/esm/vs/platform/workspace/common/workspace.js
@@ -125,7 +125,7 @@ export class WorkspaceFolder {
     }
 }
 export const WORKSPACE_EXTENSION = 'code-workspace';
-export const WORKSPACE_FILTER = [{ name: localize('codeWorkspace', "Code Workspace"), extensions: [WORKSPACE_EXTENSION] }];
+export const WORKSPACE_FILTER = [{ name: localize('vs/platform/workspace/common/workspace', 'codeWorkspace', "Code Workspace"), extensions: [WORKSPACE_EXTENSION] }];
 export const STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';
 export function isStandaloneEditorWorkspace(workspace) {
     return workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;
